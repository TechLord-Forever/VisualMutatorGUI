<MutationTestingSession SessionCreationWindowShowTime="2017-05-21T15:32:19.4898156+02:00" SessionStartTime="2017-05-21T15:33:12.4767345+02:00" SessionEndTime="2017-05-21T16:08:45.7471486+02:00" SessionRunTimeSeconds="2133.2704141" MutationScore="71">
  <Mutants Total="609" Live="171" MarkedAsEquivalentAmongLive="0" UnpairedFirstOrderMutants="0" Killed="436" Untested="2" WithError="2" AverageCreationTimeMiliseconds="7936.6128500823725" AverageTestingTimeMiliseconds="2452.2767710049425">
    <Assembly Name="NunitTests" />
    <Assembly Name="STVRogue">
      <Type Name="Bridge" Namespace="BridgeGameLogic">
        <Method Name=".ctor">
          <Mutant Id="SSDL#101" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8604" TestingTimeMiliseconds="1834" TestingEndRelativeSeconds="25.4594018" />
          <Mutant Id="JID#20" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8678" TestingTimeMiliseconds="1827" TestingEndRelativeSeconds="25.4514012" />
          <Mutant Id="JTD#20" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8602" TestingTimeMiliseconds="1829" TestingEndRelativeSeconds="25.4544015" />
          <Mutant Id="JID#21" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8680" TestingTimeMiliseconds="1814" TestingEndRelativeSeconds="35.981977199999996" />
          <Mutant Id="JTD#21" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8722" TestingTimeMiliseconds="1824" TestingEndRelativeSeconds="36.0319834" />
          <Mutant Id="PRV#46" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8685" TestingTimeMiliseconds="1787" TestingEndRelativeSeconds="35.9859778" />
          <Mutant Id="PRV#47" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8161" TestingTimeMiliseconds="1811" TestingEndRelativeSeconds="45.9795307" />
        </Method>
        <Method Name="ConnectToNodeOfNextZone">
          <Mutant Id="MCI#35" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8153" TestingTimeMiliseconds="1825" TestingEndRelativeSeconds="45.982530999999994" />
        </Method>
        <Method Name="ConnectToNodeOfSameZone">
          <Mutant Id="MCI#34" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8118" TestingTimeMiliseconds="1869" TestingEndRelativeSeconds="46.037534099999995" />
        </Method>
      </Type>
      <Type Name="Creature" Namespace="CreatureGameLogic">
        <Method Name=".ctor">
          <Mutant Id="PRV#12" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8178" TestingTimeMiliseconds="5517" TestingEndRelativeSeconds="59.694283" />
          <Mutant Id="SSDL#44" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8161" TestingTimeMiliseconds="5528" TestingEndRelativeSeconds="59.699282999999994" />
          <Mutant Id="JID#8" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8125" TestingTimeMiliseconds="5513" TestingEndRelativeSeconds="59.6952827" />
          <Mutant Id="JTD#8" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8518" TestingTimeMiliseconds="5502" TestingEndRelativeSeconds="73.7770618" />
        </Method>
        <Method Name="Attack">
          <Mutant Id="AOR#63" Description="LeftParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8558" TestingTimeMiliseconds="5513" TestingEndRelativeSeconds="73.8480652" />
          <Mutant Id="AOR#59" Description="Addition" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8464" TestingTimeMiliseconds="5523" TestingEndRelativeSeconds="73.8510649" />
          <Mutant Id="AOR#62" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8517" TestingTimeMiliseconds="1801" TestingEndRelativeSeconds="84.1336309" />
          <Mutant Id="PRV#13" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8483" TestingTimeMiliseconds="1805" TestingEndRelativeSeconds="84.1866336" />
          <Mutant Id="OODL#68" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8473" TestingTimeMiliseconds="5514" TestingEndRelativeSeconds="87.8868347" />
          <Mutant Id="OODL#69" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8400" TestingTimeMiliseconds="5514" TestingEndRelativeSeconds="98.064398099999991" />
          <Mutant Id="SSDL#45" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8366" TestingTimeMiliseconds="5528" TestingEndRelativeSeconds="98.119400599999992" />
        </Method>
        <Method Name="get_IsDead">
          <Mutant Id="ROR#108" Description="LessThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="4351" TestingTimeMiliseconds="5500" TestingEndRelativeSeconds="98.1233977" />
          <Mutant Id="ROR#111" Description="GreaterThanOrEqual" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8380" TestingTimeMiliseconds="1785" TestingEndRelativeSeconds="108.2579583" />
          <Mutant Id="ROR#109" Description="GreaterThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8309" TestingTimeMiliseconds="1824" TestingEndRelativeSeconds="108.341967" />
          <Mutant Id="OODL#71" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8356" TestingTimeMiliseconds="1797" TestingEndRelativeSeconds="108.3089619" />
        </Method>
      </Type>
      <Type Name="Crystal" Namespace="CrystalGameLogic">
        <Method Name="Use">
          <Mutant Id="ISD#1" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8144" TestingTimeMiliseconds="1910" TestingEndRelativeSeconds="118.33451" />
          <Mutant Id="SSDL#27" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8155" TestingTimeMiliseconds="1919" TestingEndRelativeSeconds="118.40751429999999" />
        </Method>
      </Type>
      <Type Name="Dungeon" Namespace="DungeonGameLogic">
        <Method Name=".cctor">
          <Mutant Id="PRV#39" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8133" TestingTimeMiliseconds="1914" TestingEndRelativeSeconds="118.4095143" />
          <Mutant Id="SSDL#92" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8166" TestingTimeMiliseconds="1809" TestingEndRelativeSeconds="128.3290606" />
        </Method>
        <Method Name=".ctor">
          <Mutant Id="JID#13" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8146" TestingTimeMiliseconds="1855" TestingEndRelativeSeconds="128.4440708" />
          <Mutant Id="JTD#13" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8150" TestingTimeMiliseconds="1854" TestingEndRelativeSeconds="128.4610712" />
          <Mutant Id="JID#14" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8050" TestingTimeMiliseconds="1795" TestingEndRelativeSeconds="138.1966029" />
          <Mutant Id="JTD#14" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8202" TestingTimeMiliseconds="1795" TestingEndRelativeSeconds="138.4646186" />
          <Mutant Id="JID#15" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8176" TestingTimeMiliseconds="1805" TestingEndRelativeSeconds="138.47461859999999" />
          <Mutant Id="JTD#15" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="243" TestingTimeMiliseconds="1715" TestingEndRelativeSeconds="140.1717123" />
          <Mutant Id="JID#16" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10766" TestingTimeMiliseconds="1769" TestingEndRelativeSeconds="151.0253093" />
          <Mutant Id="JTD#16" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10739" TestingTimeMiliseconds="1780" TestingEndRelativeSeconds="151.0213126" />
          <Mutant Id="JID#17" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9095" TestingTimeMiliseconds="1790" TestingEndRelativeSeconds="151.0713147" />
          <Mutant Id="JTD#17" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8126" TestingTimeMiliseconds="1789" TestingEndRelativeSeconds="160.9628607" />
          <Mutant Id="AOR#111" Description="LeftParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8144" TestingTimeMiliseconds="5509" TestingEndRelativeSeconds="164.7170639" />
          <Mutant Id="AOR#109" Description="Division" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8097" TestingTimeMiliseconds="5500" TestingEndRelativeSeconds="164.7020622" />
          <Mutant Id="AOR#115" Description="Division" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="347" TestingTimeMiliseconds="1999" TestingEndRelativeSeconds="163.3289901" />
          <Mutant Id="AOR#114" Description="Multiplication" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="11220" TestingTimeMiliseconds="1789" TestingEndRelativeSeconds="176.361707" />
          <Mutant Id="AOR#118" Description="RightParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9843" TestingTimeMiliseconds="1777" TestingEndRelativeSeconds="176.3587072" />
          <Mutant Id="AOR#119" Description="Subtraction" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9844" TestingTimeMiliseconds="1796" TestingEndRelativeSeconds="176.3967094" />
          <Mutant Id="AOR#122" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8076" TestingTimeMiliseconds="1790" TestingEndRelativeSeconds="186.2562482" />
          <Mutant Id="AOR#121" Description="Division" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8118" TestingTimeMiliseconds="1792" TestingEndRelativeSeconds="186.29825069999998" />
          <Mutant Id="AOR#124" Description="RightParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8067" TestingTimeMiliseconds="1800" TestingEndRelativeSeconds="186.29825069999998" />
          <Mutant Id="MCI#25" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8095" TestingTimeMiliseconds="1762" TestingEndRelativeSeconds="196.12879529999998" />
          <Mutant Id="PRV#26" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8071" TestingTimeMiliseconds="1789" TestingEndRelativeSeconds="196.1837986" />
          <Mutant Id="ROR#146" Description="NotEquality" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8048" TestingTimeMiliseconds="1793" TestingEndRelativeSeconds="196.19579869999998" />
          <Mutant Id="ROR#144" Description="GreaterThanOrEqual" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8174" TestingTimeMiliseconds="1815" TestingEndRelativeSeconds="206.14634329999998" />
          <Mutant Id="ROR#145" Description="Equality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8150" TestingTimeMiliseconds="1831" TestingEndRelativeSeconds="206.2053593" />
          <Mutant Id="PRV#27" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8136" TestingTimeMiliseconds="1807" TestingEndRelativeSeconds="206.18835629999998" />
          <Mutant Id="ROR#151" Description="GreaterThanOrEqual" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8133" TestingTimeMiliseconds="1798" TestingEndRelativeSeconds="216.09589409999998" />
          <Mutant Id="ROR#148" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8086" TestingTimeMiliseconds="1785" TestingEndRelativeSeconds="216.0918935" />
          <Mutant Id="ROR#152" Description="Equality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8061" TestingTimeMiliseconds="1812" TestingEndRelativeSeconds="216.114895" />
          <Mutant Id="ROR#147" Description="True" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8092" TestingTimeMiliseconds="1776" TestingEndRelativeSeconds="225.9894412" />
          <Mutant Id="PRV#28" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8084" TestingTimeMiliseconds="1794" TestingEndRelativeSeconds="226.00144469999998" />
          <Mutant Id="PRV#29" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8064" TestingTimeMiliseconds="1777" TestingEndRelativeSeconds="225.99945119999998" />
          <Mutant Id="PRV#30" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8204" TestingTimeMiliseconds="1781" TestingEndRelativeSeconds="236.0369916" />
          <Mutant Id="PRV#31" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8215" TestingTimeMiliseconds="1781" TestingEndRelativeSeconds="236.0209907" />
          <Mutant Id="PRV#32" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8220" TestingTimeMiliseconds="1782" TestingEndRelativeSeconds="236.029991" />
          <Mutant Id="PRV#33" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8113" TestingTimeMiliseconds="1826" TestingEndRelativeSeconds="245.9945395" />
          <Mutant Id="OODL#99" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8117" TestingTimeMiliseconds="5514" TestingEndRelativeSeconds="249.7047412" />
          <Mutant Id="OODL#100" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8109" TestingTimeMiliseconds="5504" TestingEndRelativeSeconds="249.70274089999998" />
          <Mutant Id="OODL#102" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="331" TestingTimeMiliseconds="1884" TestingEndRelativeSeconds="248.22566239999998" />
          <Mutant Id="OODL#101" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="11331" TestingTimeMiliseconds="1774" TestingEndRelativeSeconds="261.3493851" />
          <Mutant Id="OODL#103" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9840" TestingTimeMiliseconds="1792" TestingEndRelativeSeconds="261.373386" />
          <Mutant Id="OODL#104" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9846" TestingTimeMiliseconds="1821" TestingEndRelativeSeconds="261.4263894" />
          <Mutant Id="OODL#105" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8127" TestingTimeMiliseconds="1795" TestingEndRelativeSeconds="271.30192969999996" />
          <Mutant Id="OODL#108" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8119" TestingTimeMiliseconds="1786" TestingEndRelativeSeconds="271.3129298" />
          <Mutant Id="SSDL#73" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8077" TestingTimeMiliseconds="1765" TestingEndRelativeSeconds="271.2869288" />
          <Mutant Id="SSDL#74" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8124" TestingTimeMiliseconds="1782" TestingEndRelativeSeconds="281.2124784" />
          <Mutant Id="SSDL#75" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8088" TestingTimeMiliseconds="1780" TestingEndRelativeSeconds="281.1994777" />
          <Mutant Id="SSDL#76" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8065" TestingTimeMiliseconds="1775" TestingEndRelativeSeconds="281.20047769999996" />
          <Mutant Id="SSDL#77" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8076" TestingTimeMiliseconds="1821" TestingEndRelativeSeconds="291.12502079999996" />
          <Mutant Id="SSDL#78" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8088" TestingTimeMiliseconds="1776" TestingEndRelativeSeconds="291.087019" />
          <Mutant Id="SSDL#79" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8072" TestingTimeMiliseconds="1766" TestingEndRelativeSeconds="291.08201809999997" />
          <Mutant Id="SSDL#81" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8101" TestingTimeMiliseconds="1779" TestingEndRelativeSeconds="300.9825661" />
        </Method>
        <Method Name="Disconnect">
          <Mutant Id="AOR#128" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8105" TestingTimeMiliseconds="5515" TestingEndRelativeSeconds="304.7477703" />
          <Mutant Id="AOR#125" Description="Addition" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8078" TestingTimeMiliseconds="5501" TestingEndRelativeSeconds="304.72976969999996" />
          <Mutant Id="AOR#129" Description="LeftParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="219" TestingTimeMiliseconds="5512" TestingEndRelativeSeconds="306.7288823" />
          <Mutant Id="EAM#29" Description="System.Collections.IEnumerator.get_Current" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10722" TestingTimeMiliseconds="5511" TestingEndRelativeSeconds="320.98366699999997" />
          <Mutant Id="MCI#29" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10713" TestingTimeMiliseconds="5500" TestingEndRelativeSeconds="320.9946677" />
          <Mutant Id="MCI#30" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8767" TestingTimeMiliseconds="5524" TestingEndRelativeSeconds="321.04967039999997" />
          <Mutant Id="MCI#31" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8230" TestingTimeMiliseconds="5514" TestingEndRelativeSeconds="334.7564254" />
          <Mutant Id="ROR#170" Description="True" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8245" TestingTimeMiliseconds="1744" TestingEndRelativeSeconds="331.0252274" />
          <Mutant Id="ROR#172" Description="GreaterThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8192" TestingTimeMiliseconds="5516" TestingEndRelativeSeconds="334.7864246" />
          <Mutant Id="PRV#37" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="213" TestingTimeMiliseconds="5514" TestingEndRelativeSeconds="336.7665322" />
          <Mutant Id="PRV#38" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10858" TestingTimeMiliseconds="5508" TestingEndRelativeSeconds="351.1383234" />
          <Mutant Id="OODL#117" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10796" TestingTimeMiliseconds="5501" TestingEndRelativeSeconds="351.12232309999996" />
          <Mutant Id="OODL#118" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8870" TestingTimeMiliseconds="5510" TestingEndRelativeSeconds="351.1623381" />
          <Mutant Id="OODL#119" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8242" TestingTimeMiliseconds="1743" TestingEndRelativeSeconds="361.1288787" />
          <Mutant Id="OODL#120" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8246" TestingTimeMiliseconds="5521" TestingEndRelativeSeconds="364.9430865" />
          <Mutant Id="SSDL#89" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8143" TestingTimeMiliseconds="5508" TestingEndRelativeSeconds="364.94508679999996" />
          <Mutant Id="SSDL#90" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="221" TestingTimeMiliseconds="5500" TestingEndRelativeSeconds="366.8711975" />
          <Mutant Id="SSDL#91" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10698" TestingTimeMiliseconds="5501" TestingEndRelativeSeconds="381.1699759" />
        </Method>
        <Method Name="GeneratesNodes">
          <Mutant Id="AOR#91" Description="Division" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10715" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="377.47977629999997" />
          <Mutant Id="AOR#90" Description="Multiplication" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8843" TestingTimeMiliseconds="1796" TestingEndRelativeSeconds="377.5267794" />
          <Mutant Id="AOR#93" Description="LeftParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8173" TestingTimeMiliseconds="1779" TestingEndRelativeSeconds="387.45532219999996" />
          <Mutant Id="AOR#94" Description="RightParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8149" TestingTimeMiliseconds="1802" TestingEndRelativeSeconds="387.5133255" />
          <Mutant Id="AOR#100" Description="RightParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="4537" TestingTimeMiliseconds="1786" TestingEndRelativeSeconds="387.5113255" />
          <Mutant Id="AOR#98" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8073" TestingTimeMiliseconds="1799" TestingEndRelativeSeconds="397.3538673" />
          <Mutant Id="AOR#99" Description="LeftParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8031" TestingTimeMiliseconds="1789" TestingEndRelativeSeconds="397.3758688" />
          <Mutant Id="AOR#95" Description="Subtraction" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8052" TestingTimeMiliseconds="1793" TestingEndRelativeSeconds="397.3878691" />
          <Mutant Id="AOR#96" Description="Multiplication" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8108" TestingTimeMiliseconds="1768" TestingEndRelativeSeconds="407.2574156" />
          <Mutant Id="AOR#101" Description="Subtraction" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8135" TestingTimeMiliseconds="1809" TestingEndRelativeSeconds="407.3394202" />
          <Mutant Id="PRV#22" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8101" TestingTimeMiliseconds="1785" TestingEndRelativeSeconds="407.31741869999996" />
          <Mutant Id="PRV#23" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8194" TestingTimeMiliseconds="5512" TestingEndRelativeSeconds="420.9951688" />
          <Mutant Id="ROR#134" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8180" TestingTimeMiliseconds="1807" TestingEndRelativeSeconds="417.3589714" />
          <Mutant Id="ROR#133" Description="True" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8162" TestingTimeMiliseconds="1771" TestingEndRelativeSeconds="417.32096579999995" />
          <Mutant Id="ROR#138" Description="Equality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8484" TestingTimeMiliseconds="1779" TestingEndRelativeSeconds="427.6095385" />
          <Mutant Id="ROR#135" Description="GreaterThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8484" TestingTimeMiliseconds="1779" TestingEndRelativeSeconds="427.65153829999997" />
          <Mutant Id="ROR#137" Description="GreaterThanOrEqual" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="4852" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="427.6545389" />
          <Mutant Id="OODL#91" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8198" TestingTimeMiliseconds="1809" TestingEndRelativeSeconds="437.6330877" />
          <Mutant Id="OODL#92" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8198" TestingTimeMiliseconds="1788" TestingEndRelativeSeconds="437.6710893" />
          <Mutant Id="OODL#93" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8174" TestingTimeMiliseconds="1816" TestingEndRelativeSeconds="437.6880902" />
          <Mutant Id="OODL#96" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8088" TestingTimeMiliseconds="5527" TestingEndRelativeSeconds="451.2758378" />
          <Mutant Id="OODL#97" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8071" TestingTimeMiliseconds="1800" TestingEndRelativeSeconds="447.58163179999997" />
          <Mutant Id="SSDL#62" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8061" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="447.5666308" />
        </Method>
        <Method Name="GenerateZone">
          <Mutant Id="MCI#11" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8504" TestingTimeMiliseconds="1800" TestingEndRelativeSeconds="457.90120279999996" />
          <Mutant Id="MCI#12" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8506" TestingTimeMiliseconds="1789" TestingEndRelativeSeconds="457.89820249999997" />
          <Mutant Id="MCI#13" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="4804" TestingTimeMiliseconds="1775" TestingEndRelativeSeconds="457.8962022" />
          <Mutant Id="MCI#14" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8145" TestingTimeMiliseconds="1777" TestingEndRelativeSeconds="467.84174679999995" />
          <Mutant Id="MCI#15" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8162" TestingTimeMiliseconds="1771" TestingEndRelativeSeconds="467.8617481" />
          <Mutant Id="MCI#16" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8158" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="467.8597478" />
          <Mutant Id="MCI#17" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8140" TestingTimeMiliseconds="1777" TestingEndRelativeSeconds="477.81629879999997" />
          <Mutant Id="MCI#18" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8190" TestingTimeMiliseconds="1796" TestingEndRelativeSeconds="477.8773028" />
          <Mutant Id="MCI#19" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8199" TestingTimeMiliseconds="1798" TestingEndRelativeSeconds="477.88630279999995" />
          <Mutant Id="MCI#20" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="5590" TestingTimeMiliseconds="1791" TestingEndRelativeSeconds="485.2177054" />
          <Mutant Id="MCI#21" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5558" TestingTimeMiliseconds="1812" TestingEndRelativeSeconds="485.28770679999997" />
          <Mutant Id="MCI#22" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5527" TestingTimeMiliseconds="1784" TestingEndRelativeSeconds="485.2447049" />
          <Mutant Id="MCI#23" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10674" TestingTimeMiliseconds="1791" TestingEndRelativeSeconds="497.718394" />
          <Mutant Id="PRV#24" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10653" TestingTimeMiliseconds="1800" TestingEndRelativeSeconds="497.73139519999995" />
          <Mutant Id="MCI#24" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10650" TestingTimeMiliseconds="1827" TestingEndRelativeSeconds="497.78339789999995" />
          <Mutant Id="PRV#25" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8338" TestingTimeMiliseconds="1770" TestingEndRelativeSeconds="507.8569525" />
          <Mutant Id="MCI#5" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8342" TestingTimeMiliseconds="1796" TestingEndRelativeSeconds="507.88795089999996" />
          <Mutant Id="MCI#6" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8279" TestingTimeMiliseconds="1807" TestingEndRelativeSeconds="507.8889541" />
          <Mutant Id="MCI#7" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8213" TestingTimeMiliseconds="1762" TestingEndRelativeSeconds="517.8475023" />
          <Mutant Id="SSDL#64" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8208" TestingTimeMiliseconds="1783" TestingEndRelativeSeconds="517.917503" />
          <Mutant Id="SSDL#65" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8200" TestingTimeMiliseconds="1793" TestingEndRelativeSeconds="517.9205068" />
          <Mutant Id="SSDL#67" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8102" TestingTimeMiliseconds="1788" TestingEndRelativeSeconds="527.7580485" />
          <Mutant Id="SSDL#68" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8103" TestingTimeMiliseconds="1784" TestingEndRelativeSeconds="527.8370517" />
          <Mutant Id="SSDL#69" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8081" TestingTimeMiliseconds="1797" TestingEndRelativeSeconds="527.8420526" />
          <Mutant Id="SSDL#70" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8140" TestingTimeMiliseconds="1788" TestingEndRelativeSeconds="537.7155923" />
          <Mutant Id="MCI#8" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8129" TestingTimeMiliseconds="1793" TestingEndRelativeSeconds="537.80259719999992" />
          <Mutant Id="SSDL#71" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8145" TestingTimeMiliseconds="1831" TestingEndRelativeSeconds="537.87360089999993" />
          <Mutant Id="SSDL#72" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="7985" TestingTimeMiliseconds="1792" TestingEndRelativeSeconds="547.5091357" />
          <Mutant Id="MCI#9" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8056" TestingTimeMiliseconds="1796" TestingEndRelativeSeconds="547.6971452" />
          <Mutant Id="MCI#10" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8017" TestingTimeMiliseconds="1788" TestingEndRelativeSeconds="547.6951452" />
        </Method>
        <Method Name="NewBridge">
          <Mutant Id="AOR#82" Description="Multiplication" State="Live" IsEquivalent="false" CreationTimeMiliseconds="5465" TestingTimeMiliseconds="1719" TestingEndRelativeSeconds="554.70852819999993" />
          <Mutant Id="AOR#84" Description="Modulus" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10763" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="560.27583399999992" />
          <Mutant Id="OODL#79" Description="RightOperandRemoved" State="Error" IsEquivalent="false" CreationTimeMiliseconds="0" TestingTimeMiliseconds="0" TestingEndRelativeSeconds="-63630977592.47673">
            <ErrorInfo>
              <Description>Assumption failed.  The expression containing this as a subexpression should never allow a call to this routine.</Description>
              <ExceptionMessage>System.Diagnostics.Contracts.ContractException: Assumption failed.  The expression containing this as a subexpression should never allow a call to this routine.
   at System.Runtime.CompilerServices.ContractHelper.TriggerFailureImplementation(ContractFailureKind kind, String displayMessage, String userMessage, String conditionText, Exception innerException)
   at System.Diagnostics.Contracts.Contract.ReportFailure(ContractFailureKind failureKind, String userMessage, String conditionText, Exception innerException)
   at System.Diagnostics.Contracts.Contract.Assume(Boolean condition, String userMessage)
   at Microsoft.Cci.CodeModelToILConverter.TraverseChildren(ITargetExpression targetExpression)
   at Microsoft.Cci.CodeTraverser.Traverse(ITargetExpression targetExpression)
   at Microsoft.Cci.CodeTraverser.Dispatcher.Visit(ITargetExpression targetExpression)
   at Microsoft.Cci.MutableCodeModel.TargetExpression.Dispatch(ICodeVisitor visitor)
   at Microsoft.Cci.CodeTraverser.Traverse(IExpression expression)
   at Microsoft.Cci.CodeTraverser.Traverse(IEnumerable`1 expressions)
   at Microsoft.Cci.CodeModelToILConverter.TraverseChildren(ICreateObjectInstance createObjectInstance)
   at Microsoft.Cci.CodeTraverser.Traverse(ICreateObjectInstance createObjectInstance)
   at Microsoft.Cci.CodeTraverser.Dispatcher.Visit(ICreateObjectInstance createObjectInstance)
   at Microsoft.Cci.MutableCodeModel.CreateObjectInstance.Dispatch(ICodeVisitor visitor)
   at Microsoft.Cci.CodeTraverser.Traverse(IExpression expression)
   at Microsoft.Cci.CodeModelToILConverter.TraverseChildren(ILocalDeclarationStatement localDeclarationStatement)
   at Microsoft.Cci.CodeTraverser.Traverse(ILocalDeclarationStatement localDeclarationStatement)
   at Microsoft.Cci.CodeTraverser.Dispatcher.Visit(ILocalDeclarationStatement localDeclarationStatement)
   at Microsoft.Cci.MutableCodeModel.LocalDeclarationStatement.Dispatch(ICodeVisitor visitor)
   at Microsoft.Cci.CodeTraverser.Traverse(IStatement statement)
   at Microsoft.Cci.CodeTraverser.Traverse(IEnumerable`1 statements)
   at Microsoft.Cci.CodeModelToILConverter.TraverseChildren(IBlockStatement block)
   at Microsoft.Cci.CodeTraverser.Traverse(IBlockStatement block)
   at Microsoft.Cci.CodeModelToILConverter.ConvertToIL(IBlockStatement body)
   at Microsoft.Cci.MutableCodeModel.SourceMethodBody.GenerateIL()
   at Microsoft.Cci.MutableCodeModel.SourceMethodBody.get_PrivateHelperTypes()
   at Microsoft.Cci.MutableCodeModel.SourceMethodBody.get_PrivateHelperTypesImplementation()
   at Microsoft.Cci.ILToCodeModel.SourceMethodBody.Microsoft.Cci.IMethodBody.get_PrivateHelperTypes()
   at Microsoft.Cci.PeWriter.CreateIndicesFor(ITypeDefinition typeDef)
   at Microsoft.Cci.PeWriter.CreateIndices()
   at Microsoft.Cci.PeWriter.WritePeToStream(IModule module, IMetadataHost host, Stream stream, ISourceLocationProvider sourceLocationProvider, ILocalScopeProvider localScopeProvider, IPdbWriter pdbWriter, CustomSectionProvider[] customSectionProviders)
   at VisualMutator.Model.CciModuleSource.WriteToStream(IModuleInfo moduleInfo, FileStream stream, String filePath)
   at VisualMutator.Model.Mutations.MutantMaterializer.&lt;StoreMutant&gt;d__4.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at VisualMutator.Model.Tests.TestingMutant.&lt;RunAsync&gt;d__11.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at VisualMutator.Model.Tests.TestingProcess.&lt;TestOneMutant&gt;d__16.MoveNext()</ExceptionMessage>
            </ErrorInfo>
          </Mutant>
        </Method>
        <Method Name="NewNode">
          <Mutant Id="AOR#80" Description="Modulus" State="Live" IsEquivalent="false" CreationTimeMiliseconds="3859" TestingTimeMiliseconds="1761" TestingEndRelativeSeconds="560.3448386" />
          <Mutant Id="AOR#77" Description="Subtraction" State="Live" IsEquivalent="false" CreationTimeMiliseconds="293" TestingTimeMiliseconds="1790" TestingEndRelativeSeconds="560.5748538" />
          <Mutant Id="SSDL#52" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10723" TestingTimeMiliseconds="1784" TestingEndRelativeSeconds="572.8015244" />
        </Method>
        <Method Name="Shortestpath">
          <Mutant Id="MCI#26" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10650" TestingTimeMiliseconds="1751" TestingEndRelativeSeconds="572.7625219" />
          <Mutant Id="MCI#27" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10462" TestingTimeMiliseconds="1807" TestingEndRelativeSeconds="572.8605266" />
          <Mutant Id="EAM#28" Description="System.Collections.ICollection.get_IsSynchronized" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8220" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="582.7860764" />
          <Mutant Id="MCI#28" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8181" TestingTimeMiliseconds="1814" TestingEndRelativeSeconds="582.8290792" />
          <Mutant Id="ROR#155" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8158" TestingTimeMiliseconds="1794" TestingEndRelativeSeconds="582.8310789" />
          <Mutant Id="ROR#166" Description="NotEquality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8132" TestingTimeMiliseconds="1759" TestingEndRelativeSeconds="592.69369169999993" />
          <Mutant Id="ROR#160" Description="True" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8105" TestingTimeMiliseconds="1811" TestingEndRelativeSeconds="592.7906244" />
          <Mutant Id="ROR#165" Description="GreaterThanOrEqual" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8102" TestingTimeMiliseconds="1782" TestingEndRelativeSeconds="592.76562289999993" />
          <Mutant Id="ROR#162" Description="LessThan" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8084" TestingTimeMiliseconds="1773" TestingEndRelativeSeconds="602.5701654" />
          <Mutant Id="ROR#167" Description="True" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8045" TestingTimeMiliseconds="1818" TestingEndRelativeSeconds="602.6801715" />
          <Mutant Id="PRV#34" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8025" TestingTimeMiliseconds="5515" TestingEndRelativeSeconds="606.37137169999994" />
          <Mutant Id="PRV#35" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8127" TestingTimeMiliseconds="1774" TestingEndRelativeSeconds="612.4917087" />
          <Mutant Id="PRV#36" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8248" TestingTimeMiliseconds="1809" TestingEndRelativeSeconds="612.7587267" />
          <Mutant Id="OODL#111" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="4581" TestingTimeMiliseconds="1801" TestingEndRelativeSeconds="612.7707276" />
          <Mutant Id="OODL#112" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="280" TestingTimeMiliseconds="1725" TestingEndRelativeSeconds="614.5208238" />
          <Mutant Id="OODL#114" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10804" TestingTimeMiliseconds="1765" TestingEndRelativeSeconds="625.35641579999992" />
          <Mutant Id="OODL#115" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10793" TestingTimeMiliseconds="1791" TestingEndRelativeSeconds="625.37741729999993" />
          <Mutant Id="OODL#116" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9080" TestingTimeMiliseconds="1832" TestingEndRelativeSeconds="625.447421" />
          <Mutant Id="SSDL#83" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8425" TestingTimeMiliseconds="1806" TestingEndRelativeSeconds="635.61398409999993" />
          <Mutant Id="SSDL#84" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8426" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="635.6129841" />
          <Mutant Id="SSDL#85" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8367" TestingTimeMiliseconds="1786" TestingEndRelativeSeconds="635.6159844" />
          <Mutant Id="SSDL#86" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8199" TestingTimeMiliseconds="1796" TestingEndRelativeSeconds="645.6535369" />
          <Mutant Id="SSDL#87" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8199" TestingTimeMiliseconds="1793" TestingEndRelativeSeconds="645.6355409" />
          <Mutant Id="SSDL#88" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8187" TestingTimeMiliseconds="5514" TestingEndRelativeSeconds="649.3647409" />
        </Method>
        <Method Name="ToDot">
          <Mutant Id="AOR#88" Description="Modulus" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8404" TestingTimeMiliseconds="1774" TestingEndRelativeSeconds="655.8310938" />
          <Mutant Id="AOR#87" Description="Division" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8382" TestingTimeMiliseconds="1769" TestingEndRelativeSeconds="655.8410938" />
          <Mutant Id="AOR#85" Description="Subtraction" State="Live" IsEquivalent="false" CreationTimeMiliseconds="4695" TestingTimeMiliseconds="1779" TestingEndRelativeSeconds="655.860095" />
          <Mutant Id="PRV#20" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8182" TestingTimeMiliseconds="1772" TestingEndRelativeSeconds="665.80264549999993" />
          <Mutant Id="MCI#3" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8150" TestingTimeMiliseconds="1771" TestingEndRelativeSeconds="665.8106464" />
          <Mutant Id="PRV#21" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8137" TestingTimeMiliseconds="1766" TestingEndRelativeSeconds="665.8096458" />
          <Mutant Id="ROR#113" Description="True" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8111" TestingTimeMiliseconds="1738" TestingEndRelativeSeconds="675.68418669999994" />
          <Mutant Id="ROR#115" Description="NotEquality" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8103" TestingTimeMiliseconds="1772" TestingEndRelativeSeconds="675.7251883" />
          <Mutant Id="ROR#116" Description="True" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8094" TestingTimeMiliseconds="1767" TestingEndRelativeSeconds="675.7261883" />
          <Mutant Id="ROR#125" Description="NotEquality" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8203" TestingTimeMiliseconds="1781" TestingEndRelativeSeconds="685.6967374" />
          <Mutant Id="ROR#123" Description="LessThanOrEqual" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8164" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="685.70773769999994" />
          <Mutant Id="ROR#124" Description="GreaterThanOrEqual" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8146" TestingTimeMiliseconds="1780" TestingEndRelativeSeconds="685.70373769999992" />
          <Mutant Id="ROR#120" Description="False" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8118" TestingTimeMiliseconds="1776" TestingEndRelativeSeconds="695.63528869999993" />
          <Mutant Id="ROR#119" Description="True" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8122" TestingTimeMiliseconds="1774" TestingEndRelativeSeconds="695.6222887" />
          <Mutant Id="ROR#121" Description="LessThan" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8098" TestingTimeMiliseconds="1794" TestingEndRelativeSeconds="695.648289" />
          <Mutant Id="ROR#130" Description="GreaterThanOrEqual" State="Live" IsEquivalent="false" CreationTimeMiliseconds="5555" TestingTimeMiliseconds="1798" TestingEndRelativeSeconds="703.0066931" />
          <Mutant Id="ROR#128" Description="GreaterThan" State="Live" IsEquivalent="false" CreationTimeMiliseconds="5534" TestingTimeMiliseconds="1727" TestingEndRelativeSeconds="702.9496912" />
          <Mutant Id="EAM#25" Description="System.Collections.IEnumerator.get_Current" State="Live" IsEquivalent="false" CreationTimeMiliseconds="5532" TestingTimeMiliseconds="1774" TestingEndRelativeSeconds="702.9916925" />
          <Mutant Id="EAM#26" Description="System.Collections.IEnumerator.get_Current" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10693" TestingTimeMiliseconds="1800" TestingEndRelativeSeconds="715.4693757" />
          <Mutant Id="EAM#27" Description="System.Collections.IEnumerator.get_Current" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10634" TestingTimeMiliseconds="1785" TestingEndRelativeSeconds="715.4453745" />
          <Mutant Id="MCI#4" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10663" TestingTimeMiliseconds="1776" TestingEndRelativeSeconds="715.4693757" />
          <Mutant Id="OODL#81" Description="RightOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8092" TestingTimeMiliseconds="1766" TestingEndRelativeSeconds="725.33491929999991" />
          <Mutant Id="OODL#80" Description="LeftOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8090" TestingTimeMiliseconds="1788" TestingEndRelativeSeconds="725.3919224" />
          <Mutant Id="OODL#82" Description="LeftOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8108" TestingTimeMiliseconds="1754" TestingEndRelativeSeconds="725.3739211" />
          <Mutant Id="OODL#83" Description="RightOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8090" TestingTimeMiliseconds="1770" TestingEndRelativeSeconds="735.2224632" />
          <Mutant Id="OODL#84" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8093" TestingTimeMiliseconds="1776" TestingEndRelativeSeconds="735.2904701" />
          <Mutant Id="OODL#86" Description="RightOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8083" TestingTimeMiliseconds="1775" TestingEndRelativeSeconds="735.29447069999992" />
          <Mutant Id="OODL#88" Description="RightOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8124" TestingTimeMiliseconds="1758" TestingEndRelativeSeconds="745.1320182" />
          <Mutant Id="OODL#87" Description="LeftOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8115" TestingTimeMiliseconds="1777" TestingEndRelativeSeconds="745.2150164" />
          <Mutant Id="OODL#89" Description="LeftOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8107" TestingTimeMiliseconds="1779" TestingEndRelativeSeconds="745.214017" />
          <Mutant Id="SSDL#54" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="7959" TestingTimeMiliseconds="1758" TestingEndRelativeSeconds="754.8645441" />
          <Mutant Id="SSDL#55" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8099" TestingTimeMiliseconds="1784" TestingEndRelativeSeconds="755.1325592" />
          <Mutant Id="SSDL#56" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8078" TestingTimeMiliseconds="1788" TestingEndRelativeSeconds="755.1295592" />
          <Mutant Id="SSDL#57" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="2029" TestingTimeMiliseconds="1713" TestingEndRelativeSeconds="758.63275479999993" />
          <Mutant Id="SSDL#58" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10800" TestingTimeMiliseconds="1773" TestingEndRelativeSeconds="767.7292524" />
          <Mutant Id="SSDL#59" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10785" TestingTimeMiliseconds="1783" TestingEndRelativeSeconds="767.73125269999991" />
          <Mutant Id="SSDL#60" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="7321" TestingTimeMiliseconds="1783" TestingEndRelativeSeconds="767.77225479999993" />
          <Mutant Id="SSDL#61" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8150" TestingTimeMiliseconds="1783" TestingEndRelativeSeconds="777.68080049999992" />
        </Method>
      </Type>
      <Type Name="Game" Namespace="GameGameLogic">
        <Method Name=".ctor">
          <Mutant Id="PRV#14" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8161" TestingTimeMiliseconds="1768" TestingEndRelativeSeconds="777.6827999" />
          <Mutant Id="SSDL#46" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8128" TestingTimeMiliseconds="1768" TestingEndRelativeSeconds="777.6878005" />
          <Mutant Id="JID#9" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8077" TestingTimeMiliseconds="1781" TestingEndRelativeSeconds="787.5623476" />
          <Mutant Id="JTD#9" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8115" TestingTimeMiliseconds="1770" TestingEndRelativeSeconds="787.5903486" />
        </Method>
      </Type>
      <Type Name="HealingPotion" Namespace="HealingPotionGameLogic">
        <Method Name=".ctor">
          <Mutant Id="AOR#67" Description="Division" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8077" TestingTimeMiliseconds="1785" TestingEndRelativeSeconds="787.58934909999994" />
          <Mutant Id="AOR#66" Description="Multiplication" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8093" TestingTimeMiliseconds="1819" TestingEndRelativeSeconds="797.496894" />
          <Mutant Id="AOR#65" Description="Subtraction" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8097" TestingTimeMiliseconds="1796" TestingEndRelativeSeconds="797.5108955" />
          <Mutant Id="AOR#70" Description="RightParam" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8088" TestingTimeMiliseconds="1791" TestingEndRelativeSeconds="797.5228958" />
          <Mutant Id="PRV#15" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8078" TestingTimeMiliseconds="1784" TestingEndRelativeSeconds="807.3954355" />
          <Mutant Id="OODL#72" Description="LeftOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8096" TestingTimeMiliseconds="1769" TestingEndRelativeSeconds="807.4244374" />
          <Mutant Id="SSDL#47" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8081" TestingTimeMiliseconds="1796" TestingEndRelativeSeconds="807.43743799999993" />
          <Mutant Id="JID#10" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8129" TestingTimeMiliseconds="1792" TestingEndRelativeSeconds="817.3439872" />
          <Mutant Id="JTD#10" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8134" TestingTimeMiliseconds="1812" TestingEndRelativeSeconds="817.4039897" />
        </Method>
        <Method Name="Use">
          <Mutant Id="ISD#2" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8101" TestingTimeMiliseconds="1786" TestingEndRelativeSeconds="817.3709881" />
          <Mutant Id="AOR#71" Description="Subtraction" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8162" TestingTimeMiliseconds="1790" TestingEndRelativeSeconds="827.31253299999992" />
          <Mutant Id="AOR#73" Description="Division" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8165" TestingTimeMiliseconds="1757" TestingEndRelativeSeconds="827.3195327" />
          <Mutant Id="PRV#16" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8106" TestingTimeMiliseconds="1776" TestingEndRelativeSeconds="827.3325331" />
          <Mutant Id="OODL#74" Description="LeftOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8088" TestingTimeMiliseconds="1782" TestingEndRelativeSeconds="837.2150805" />
        </Method>
      </Type>
      <Type Name="Item" Namespace="ItemGameLogic">
        <Method Name=".ctor">
          <Mutant Id="JID#11" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8091" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="837.22908109999992" />
          <Mutant Id="JTD#11" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8070" TestingTimeMiliseconds="1770" TestingEndRelativeSeconds="837.21408049999991" />
          <Mutant Id="JID#12" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8168" TestingTimeMiliseconds="1777" TestingEndRelativeSeconds="847.19063009999991" />
          <Mutant Id="JTD#12" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8211" TestingTimeMiliseconds="1752" TestingEndRelativeSeconds="847.2146305" />
          <Mutant Id="PRV#17" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8203" TestingTimeMiliseconds="1777" TestingEndRelativeSeconds="847.2326314" />
          <Mutant Id="PRV#18" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8107" TestingTimeMiliseconds="1779" TestingEndRelativeSeconds="857.0961741" />
          <Mutant Id="SSDL#49" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8111" TestingTimeMiliseconds="1786" TestingEndRelativeSeconds="857.13717739999993" />
          <Mutant Id="SSDL#50" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8074" TestingTimeMiliseconds="1765" TestingEndRelativeSeconds="857.1101747" />
        </Method>
        <Method Name="Use">
          <Mutant Id="PRV#19" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8094" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="866.9977159" />
          <Mutant Id="EAM#23" Description="get_MemberType" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8103" TestingTimeMiliseconds="5526" TestingEndRelativeSeconds="870.7789275" />
          <Mutant Id="EAM#24" Description="get_MemberType" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8077" TestingTimeMiliseconds="5511" TestingEndRelativeSeconds="870.7609262" />
          <Mutant Id="SSDL#51" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="244" TestingTimeMiliseconds="1691" TestingEndRelativeSeconds="868.9608293" />
        </Method>
      </Type>
      <Type Name="Monster" Namespace="MonsterGameLogic">
        <Method Name=".ctor">
          <Mutant Id="SSDL#103" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10795" TestingTimeMiliseconds="1808" TestingEndRelativeSeconds="881.5775226" />
          <Mutant Id="SSDL#104" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8987" TestingTimeMiliseconds="1813" TestingEndRelativeSeconds="881.5775226" />
          <Mutant Id="SSDL#105" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8974" TestingTimeMiliseconds="1840" TestingEndRelativeSeconds="881.6295216" />
          <Mutant Id="JID#22" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8087" TestingTimeMiliseconds="1758" TestingEndRelativeSeconds="891.462063" />
          <Mutant Id="JTD#22" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8086" TestingTimeMiliseconds="1787" TestingEndRelativeSeconds="891.4700633" />
          <Mutant Id="JID#23" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8057" TestingTimeMiliseconds="1785" TestingEndRelativeSeconds="891.50907039999993" />
          <Mutant Id="JTD#23" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8127" TestingTimeMiliseconds="1769" TestingEndRelativeSeconds="901.3926134" />
          <Mutant Id="JID#24" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8150" TestingTimeMiliseconds="1790" TestingEndRelativeSeconds="901.4526156" />
          <Mutant Id="JTD#24" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8127" TestingTimeMiliseconds="1786" TestingEndRelativeSeconds="901.4546124" />
          <Mutant Id="AOR#178" Description="RightParam" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8123" TestingTimeMiliseconds="1780" TestingEndRelativeSeconds="911.31615879999993" />
          <Mutant Id="AOR#173" Description="Subtraction" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8105" TestingTimeMiliseconds="1811" TestingEndRelativeSeconds="911.4131640999999" />
          <Mutant Id="AOR#176" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8094" TestingTimeMiliseconds="1814" TestingEndRelativeSeconds="911.40616349999993" />
        </Method>
      </Type>
      <Type Name="Node" Namespace="NodeGameLogic">
        <Method Name=".ctor">
          <Mutant Id="JID#1" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5522" TestingTimeMiliseconds="1812" TestingEndRelativeSeconds="918.6725603" />
          <Mutant Id="JTD#1" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5512" TestingTimeMiliseconds="1815" TestingEndRelativeSeconds="918.7755664" />
          <Mutant Id="JID#2" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5511" TestingTimeMiliseconds="1779" TestingEndRelativeSeconds="918.7455672" />
          <Mutant Id="JTD#2" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10624" TestingTimeMiliseconds="1792" TestingEndRelativeSeconds="931.11824519999993" />
          <Mutant Id="JID#3" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10570" TestingTimeMiliseconds="1765" TestingEndRelativeSeconds="931.0972446" />
          <Mutant Id="JTD#3" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10558" TestingTimeMiliseconds="1786" TestingEndRelativeSeconds="931.143252" />
          <Mutant Id="SSDL#28" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8170" TestingTimeMiliseconds="1818" TestingEndRelativeSeconds="941.11579869999991" />
          <Mutant Id="SSDL#29" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8194" TestingTimeMiliseconds="1820" TestingEndRelativeSeconds="941.17580209999994" />
          <Mutant Id="SSDL#30" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8156" TestingTimeMiliseconds="1823" TestingEndRelativeSeconds="941.15780209999991" />
          <Mutant Id="JID#4" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8121" TestingTimeMiliseconds="1777" TestingEndRelativeSeconds="951.03134089999992" />
          <Mutant Id="JTD#4" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8110" TestingTimeMiliseconds="1805" TestingEndRelativeSeconds="951.09734459999993" />
          <Mutant Id="PRV#4" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8087" TestingTimeMiliseconds="1826" TestingEndRelativeSeconds="951.124347" />
          <Mutant Id="SSDL#31" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8113" TestingTimeMiliseconds="1761" TestingEndRelativeSeconds="960.92288569999994" />
          <Mutant Id="SSDL#32" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8093" TestingTimeMiliseconds="1787" TestingEndRelativeSeconds="961.02589119999993" />
          <Mutant Id="SSDL#33" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8066" TestingTimeMiliseconds="1768" TestingEndRelativeSeconds="961.0028903" />
          <Mutant Id="SSDL#34" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8083" TestingTimeMiliseconds="1793" TestingEndRelativeSeconds="970.81644069999993" />
          <Mutant Id="JID#5" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8074" TestingTimeMiliseconds="1801" TestingEndRelativeSeconds="970.9134392" />
          <Mutant Id="JTD#5" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8038" TestingTimeMiliseconds="1804" TestingEndRelativeSeconds="970.9094354" />
          <Mutant Id="PRV#5" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8169" TestingTimeMiliseconds="1801" TestingEndRelativeSeconds="980.80698309999991" />
          <Mutant Id="JID#6" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8110" TestingTimeMiliseconds="1747" TestingEndRelativeSeconds="980.8009796" />
          <Mutant Id="JTD#6" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8124" TestingTimeMiliseconds="1792" TestingEndRelativeSeconds="980.8709865" />
          <Mutant Id="PRV#6" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8149" TestingTimeMiliseconds="1770" TestingEndRelativeSeconds="990.75452769999993" />
          <Mutant Id="JID#7" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8128" TestingTimeMiliseconds="1763" TestingEndRelativeSeconds="990.7365268" />
          <Mutant Id="JTD#7" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8071" TestingTimeMiliseconds="1776" TestingEndRelativeSeconds="990.73852649999992" />
          <Mutant Id="PRV#7" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8114" TestingTimeMiliseconds="1775" TestingEndRelativeSeconds="1000.6490719" />
          <Mutant Id="PRV#8" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8099" TestingTimeMiliseconds="1787" TestingEndRelativeSeconds="1000.6530722" />
          <Mutant Id="PRV#9" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8075" TestingTimeMiliseconds="1789" TestingEndRelativeSeconds="1000.6510721999999" />
          <Mutant Id="PRV#10" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="5634" TestingTimeMiliseconds="1795" TestingEndRelativeSeconds="1008.109486" />
        </Method>
        <Method Name="Capacity">
          <Mutant Id="OODL#61" Description="LeftOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="5617" TestingTimeMiliseconds="1786" TestingEndRelativeSeconds="1008.0964852999999" />
          <Mutant Id="OODL#63" Description="LeftOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="5613" TestingTimeMiliseconds="1767" TestingEndRelativeSeconds="1008.0634838" />
          <Mutant Id="OODL#64" Description="RightOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10678" TestingTimeMiliseconds="1776" TestingEndRelativeSeconds="1020.5361701999999" />
          <Mutant Id="AOR#45" Description="LeftParam" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10665" TestingTimeMiliseconds="1757" TestingEndRelativeSeconds="1020.5381699" />
          <Mutant Id="AOR#46" Description="RightParam" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10659" TestingTimeMiliseconds="1793" TestingEndRelativeSeconds="1020.592173" />
          <Mutant Id="AOR#42" Description="Subtraction" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8037" TestingTimeMiliseconds="1789" TestingEndRelativeSeconds="1030.3887088" />
          <Mutant Id="AOR#49" Description="Division" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8068" TestingTimeMiliseconds="1785" TestingEndRelativeSeconds="1030.4297115" />
          <Mutant Id="AOR#48" Description="Multiplication" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8023" TestingTimeMiliseconds="1784" TestingEndRelativeSeconds="1030.4267112" />
          <Mutant Id="AOR#47" Description="Subtraction" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8160" TestingTimeMiliseconds="1845" TestingEndRelativeSeconds="1040.4112641" />
          <Mutant Id="AOR#51" Description="LeftParam" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8153" TestingTimeMiliseconds="1801" TestingEndRelativeSeconds="1040.4132608999998" />
        </Method>
        <Method Name="Connect">
          <Mutant Id="ROR#73" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8128" TestingTimeMiliseconds="1824" TestingEndRelativeSeconds="1040.430265" />
          <Mutant Id="ROR#75" Description="GreaterThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8189" TestingTimeMiliseconds="1789" TestingEndRelativeSeconds="1050.4258118" />
          <Mutant Id="EAM#17" Description="get_Capacity" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8204" TestingTimeMiliseconds="1795" TestingEndRelativeSeconds="1050.4378125" />
          <Mutant Id="OODL#46" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8183" TestingTimeMiliseconds="1761" TestingEndRelativeSeconds="1050.4098112" />
        </Method>
        <Method Name="Fight">
          <Mutant Id="ROR#80" Description="False" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8130" TestingTimeMiliseconds="1770" TestingEndRelativeSeconds="1060.3283572" />
          <Mutant Id="ROR#79" Description="True" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8133" TestingTimeMiliseconds="1796" TestingEndRelativeSeconds="1060.4043694" />
          <Mutant Id="ROR#86" Description="LessThanOrEqual" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8127" TestingTimeMiliseconds="1793" TestingEndRelativeSeconds="1060.3973638" />
          <Mutant Id="ROR#93" Description="LessThanOrEqual" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8124" TestingTimeMiliseconds="1764" TestingEndRelativeSeconds="1070.2379019999999" />
          <Mutant Id="ROR#90" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8117" TestingTimeMiliseconds="1806" TestingEndRelativeSeconds="1070.3629144" />
          <Mutant Id="ROR#91" Description="LessThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8096" TestingTimeMiliseconds="1792" TestingEndRelativeSeconds="1070.3419076" />
          <Mutant Id="EAM#18" Description="get_Capacity" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8078" TestingTimeMiliseconds="1781" TestingEndRelativeSeconds="1080.1184494" />
          <Mutant Id="ROR#98" Description="LessThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8092" TestingTimeMiliseconds="1788" TestingEndRelativeSeconds="1080.2504574" />
          <Mutant Id="ROR#97" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8078" TestingTimeMiliseconds="1811" TestingEndRelativeSeconds="1080.280458" />
          <Mutant Id="ROR#96" Description="True" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="7141" TestingTimeMiliseconds="1770" TestingEndRelativeSeconds="1089.0459406999999" />
          <Mutant Id="EAM#19" Description="get_Capacity" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8133" TestingTimeMiliseconds="1809" TestingEndRelativeSeconds="1090.209002" />
          <Mutant Id="EAM#20" Description="get_Capacity" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8080" TestingTimeMiliseconds="1786" TestingEndRelativeSeconds="1090.1769996" />
          <Mutant Id="OODL#52" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="222" TestingTimeMiliseconds="1783" TestingEndRelativeSeconds="1091.0740587" />
          <Mutant Id="OODL#51" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10631" TestingTimeMiliseconds="1794" TestingEndRelativeSeconds="1102.6226848" />
          <Mutant Id="OODL#53" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10635" TestingTimeMiliseconds="1799" TestingEndRelativeSeconds="1102.6616872" />
          <Mutant Id="OODL#56" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9791" TestingTimeMiliseconds="1822" TestingEndRelativeSeconds="1102.7126897" />
          <Mutant Id="SSDL#35" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8126" TestingTimeMiliseconds="1771" TestingEndRelativeSeconds="1112.542234" />
          <Mutant Id="SSDL#37" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8123" TestingTimeMiliseconds="1786" TestingEndRelativeSeconds="1112.5932364999999" />
          <Mutant Id="SSDL#38" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8085" TestingTimeMiliseconds="1773" TestingEndRelativeSeconds="1112.5912365" />
          <Mutant Id="SSDL#39" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8170" TestingTimeMiliseconds="1787" TestingEndRelativeSeconds="1122.5157795999999" />
          <Mutant Id="SSDL#40" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8151" TestingTimeMiliseconds="1796" TestingEndRelativeSeconds="1122.573783" />
          <Mutant Id="SSDL#41" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8143" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="1122.5577825999999" />
        </Method>
        <Method Name="get_IsBridge">
          <Mutant Id="ROR#68" Description="NotEquality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8099" TestingTimeMiliseconds="1811" TestingEndRelativeSeconds="1132.4443294" />
          <Mutant Id="ROR#67" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8113" TestingTimeMiliseconds="1794" TestingEndRelativeSeconds="1132.4883316" />
          <Mutant Id="ROR#66" Description="True" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8072" TestingTimeMiliseconds="1811" TestingEndRelativeSeconds="1132.4973321999999" />
          <Mutant Id="OODL#41" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8181" TestingTimeMiliseconds="1826" TestingEndRelativeSeconds="1142.4678778" />
          <Mutant Id="OODL#42" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8165" TestingTimeMiliseconds="1837" TestingEndRelativeSeconds="1142.5248809" />
          <Mutant Id="OODL#43" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8141" TestingTimeMiliseconds="1828" TestingEndRelativeSeconds="1142.5078799" />
        </Method>
        <Method Name="Level">
          <Mutant Id="ROR#105" Description="NotEquality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8125" TestingTimeMiliseconds="1808" TestingEndRelativeSeconds="1152.4264297" />
          <Mutant Id="OODL#58" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8127" TestingTimeMiliseconds="1813" TestingEndRelativeSeconds="1152.4774321999998" />
          <Mutant Id="OODL#60" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8100" TestingTimeMiliseconds="1817" TestingEndRelativeSeconds="1152.4794319" />
          <Mutant Id="OODL#59" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8124" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="1162.3449719999999" />
          <Mutant Id="SSDL#42" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8095" TestingTimeMiliseconds="1814" TestingEndRelativeSeconds="1162.4329765999999" />
          <Mutant Id="AOR#36" Description="Multiplication" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8110" TestingTimeMiliseconds="1815" TestingEndRelativeSeconds="1162.4349769" />
          <Mutant Id="AOR#40" Description="RightParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="7986" TestingTimeMiliseconds="1784" TestingEndRelativeSeconds="1172.1405144" />
          <Mutant Id="AOR#38" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8151" TestingTimeMiliseconds="1795" TestingEndRelativeSeconds="1172.4145297999999" />
        </Method>
        <Method Name="MonsterCount">
          <Mutant Id="PRV#11" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8133" TestingTimeMiliseconds="1808" TestingEndRelativeSeconds="1172.4215298" />
          <Mutant Id="EAM#21" Description="System.Collections.IEnumerator.get_Current" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="267" TestingTimeMiliseconds="1733" TestingEndRelativeSeconds="1174.1576274" />
          <Mutant Id="EAM#22" Description="get_Capacity" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10772" TestingTimeMiliseconds="1816" TestingEndRelativeSeconds="1185.0342236" />
          <Mutant Id="OODL#66" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10767" TestingTimeMiliseconds="1794" TestingEndRelativeSeconds="1185.0072297" />
          <Mutant Id="OODL#65" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9075" TestingTimeMiliseconds="1796" TestingEndRelativeSeconds="1185.0492248" />
          <Mutant Id="AOR#55" Description="Division" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8107" TestingTimeMiliseconds="1767" TestingEndRelativeSeconds="1194.8997633" />
          <Mutant Id="AOR#58" Description="RightParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8106" TestingTimeMiliseconds="1805" TestingEndRelativeSeconds="1194.9877686" />
          <Mutant Id="AOR#56" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8088" TestingTimeMiliseconds="1813" TestingEndRelativeSeconds="1194.9887691" />
          <Mutant Id="AOR#53" Description="Subtraction" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8082" TestingTimeMiliseconds="1796" TestingEndRelativeSeconds="1204.7973118999998" />
        </Method>
      </Type>
      <Type Name="NodeMock" Namespace="NodeMockGameLogic">
        <Method Name="Capacity">
          <Mutant Id="EAM#15" Description="get_Value" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8055" TestingTimeMiliseconds="1777" TestingEndRelativeSeconds="1204.8573156" />
          <Mutant Id="EAM#16" Description="get_HasValue" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8037" TestingTimeMiliseconds="1783" TestingEndRelativeSeconds="1204.856315" />
        </Method>
      </Type>
      <Type Name="Pack" Namespace="PackGameLogic">
        <Method Name=".ctor">
          <Mutant Id="JID#18" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8059" TestingTimeMiliseconds="1779" TestingEndRelativeSeconds="1214.6618511" />
          <Mutant Id="JTD#18" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8024" TestingTimeMiliseconds="1810" TestingEndRelativeSeconds="1214.7448563" />
          <Mutant Id="JID#19" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8041" TestingTimeMiliseconds="1761" TestingEndRelativeSeconds="1214.7048538" />
          <Mutant Id="JTD#19" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8088" TestingTimeMiliseconds="1756" TestingEndRelativeSeconds="1224.5253972" />
          <Mutant Id="AOR#132" Description="Multiplication" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8092" TestingTimeMiliseconds="1782" TestingEndRelativeSeconds="1224.6054015" />
          <Mutant Id="AOR#136" Description="RightParam" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8056" TestingTimeMiliseconds="1784" TestingEndRelativeSeconds="1224.6134021" />
          <Mutant Id="AOR#135" Description="LeftParam" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8147" TestingTimeMiliseconds="1841" TestingEndRelativeSeconds="1234.5309537" />
          <Mutant Id="AOR#138" Description="Multiplication" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8087" TestingTimeMiliseconds="5512" TestingEndRelativeSeconds="1238.260154" />
          <Mutant Id="AOR#137" Description="Subtraction" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8110" TestingTimeMiliseconds="5523" TestingEndRelativeSeconds="1238.2801543" />
          <Mutant Id="AOR#141" Description="LeftParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="332" TestingTimeMiliseconds="5513" TestingEndRelativeSeconds="1240.4042726" />
          <Mutant Id="EAM#30" Description="get_IsEmpty" State="Live" IsEquivalent="false" CreationTimeMiliseconds="11227" TestingTimeMiliseconds="1781" TestingEndRelativeSeconds="1251.28687" />
          <Mutant Id="ROR#178" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="11147" TestingTimeMiliseconds="1800" TestingEndRelativeSeconds="1251.2998714999999" />
          <Mutant Id="PRV#41" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9104" TestingTimeMiliseconds="1795" TestingEndRelativeSeconds="1251.3258727" />
          <Mutant Id="PRV#42" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8087" TestingTimeMiliseconds="1774" TestingEndRelativeSeconds="1261.1764114999999" />
          <Mutant Id="PRV#43" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8092" TestingTimeMiliseconds="5511" TestingEndRelativeSeconds="1264.9366215" />
          <Mutant Id="OODL#121" Description="LeftOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8069" TestingTimeMiliseconds="1777" TestingEndRelativeSeconds="1261.2094127999999" />
          <Mutant Id="OODL#122" Description="RightOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8476" TestingTimeMiliseconds="1781" TestingEndRelativeSeconds="1271.4519807" />
          <Mutant Id="OODL#123" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8445" TestingTimeMiliseconds="5513" TestingEndRelativeSeconds="1275.2011831" />
          <Mutant Id="OODL#124" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="4751" TestingTimeMiliseconds="5505" TestingEndRelativeSeconds="1275.2201872" />
          <Mutant Id="OODL#126" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="268" TestingTimeMiliseconds="1886" TestingEndRelativeSeconds="1273.6280967" />
          <Mutant Id="OODL#125" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="11146" TestingTimeMiliseconds="5513" TestingEndRelativeSeconds="1290.303023" />
          <Mutant Id="SSDL#94" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9527" TestingTimeMiliseconds="1769" TestingEndRelativeSeconds="1286.5278068" />
          <Mutant Id="SSDL#95" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="9544" TestingTimeMiliseconds="1755" TestingEndRelativeSeconds="1286.5528087" />
          <Mutant Id="SSDL#96" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8392" TestingTimeMiliseconds="1767" TestingEndRelativeSeconds="1296.7033698999999" />
          <Mutant Id="SSDL#97" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8396" TestingTimeMiliseconds="5519" TestingEndRelativeSeconds="1300.495575" />
        </Method>
        <Method Name="Attack">
          <Mutant Id="ISD#3" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="4670" TestingTimeMiliseconds="1790" TestingEndRelativeSeconds="1296.7813715999998" />
          <Mutant Id="EAM#31" Description="System.Collections.IEnumerator.get_Current" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8388" TestingTimeMiliseconds="5515" TestingEndRelativeSeconds="1310.6321418" />
        </Method>
        <Method Name="CanMoveTo">
          <Mutant Id="AOR#145" Description="Division" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8397" TestingTimeMiliseconds="1791" TestingEndRelativeSeconds="1306.9909333" />
          <Mutant Id="MCI#32" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="4680" TestingTimeMiliseconds="1826" TestingEndRelativeSeconds="1307.0199350999999" />
          <Mutant Id="MCI#33" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8147" TestingTimeMiliseconds="1773" TestingEndRelativeSeconds="1316.9264831" />
          <Mutant Id="EAM#34" Description="get_Capacity" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8158" TestingTimeMiliseconds="1815" TestingEndRelativeSeconds="1317.0174881" />
          <Mutant Id="ROR#191" Description="True" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="4559" TestingTimeMiliseconds="1807" TestingEndRelativeSeconds="1317.0154933" />
          <Mutant Id="ROR#197" Description="NotEquality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8004" TestingTimeMiliseconds="1787" TestingEndRelativeSeconds="1326.7370197999999" />
          <Mutant Id="ROR#192" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8092" TestingTimeMiliseconds="1791" TestingEndRelativeSeconds="1326.9581028999999" />
          <Mutant Id="ROR#194" Description="LessThanOrEqual" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8126" TestingTimeMiliseconds="1795" TestingEndRelativeSeconds="1326.9710327" />
          <Mutant Id="ROR#193" Description="GreaterThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="2023" TestingTimeMiliseconds="1716" TestingEndRelativeSeconds="1330.4942303999999" />
          <Mutant Id="OODL#130" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10736" TestingTimeMiliseconds="1816" TestingEndRelativeSeconds="1339.5417255" />
          <Mutant Id="OODL#131" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10756" TestingTimeMiliseconds="1792" TestingEndRelativeSeconds="1339.543725" />
        </Method>
        <Method Name="Flees">
          <Mutant Id="AOR#151" Description="Division" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="7265" TestingTimeMiliseconds="1810" TestingEndRelativeSeconds="1339.5957271" />
          <Mutant Id="AOR#152" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5654" TestingTimeMiliseconds="1814" TestingEndRelativeSeconds="1347.0451372999999" />
          <Mutant Id="AOR#149" Description="Addition" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5672" TestingTimeMiliseconds="1773" TestingEndRelativeSeconds="1347.0121396" />
          <Mutant Id="AOR#150" Description="Subtraction" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5630" TestingTimeMiliseconds="1798" TestingEndRelativeSeconds="1347.0431403" />
          <Mutant Id="AOR#158" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10632" TestingTimeMiliseconds="1823" TestingEndRelativeSeconds="1359.4908225" />
          <Mutant Id="AOR#159" Description="LeftParam" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10616" TestingTimeMiliseconds="1781" TestingEndRelativeSeconds="1359.4788231" />
          <Mutant Id="AOR#160" Description="RightParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10610" TestingTimeMiliseconds="1776" TestingEndRelativeSeconds="1359.4508200999999" />
          <Mutant Id="AOR#166" Description="RightParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8136" TestingTimeMiliseconds="1790" TestingEndRelativeSeconds="1369.3943708" />
          <Mutant Id="AOR#165" Description="LeftParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8115" TestingTimeMiliseconds="1803" TestingEndRelativeSeconds="1369.4443735999998" />
          <Mutant Id="AOR#161" Description="Addition" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8115" TestingTimeMiliseconds="1807" TestingEndRelativeSeconds="1369.4413733" />
          <Mutant Id="AOR#164" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5582" TestingTimeMiliseconds="1792" TestingEndRelativeSeconds="1376.7847749999999" />
          <Mutant Id="AOR#169" Description="Multiplication" State="Live" IsEquivalent="false" CreationTimeMiliseconds="5549" TestingTimeMiliseconds="1790" TestingEndRelativeSeconds="1376.8297765999998" />
          <Mutant Id="AOR#171" Description="LeftParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5563" TestingTimeMiliseconds="1816" TestingEndRelativeSeconds="1376.8497774999999" />
          <Mutant Id="AOR#167" Description="Addition" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10757" TestingTimeMiliseconds="1817" TestingEndRelativeSeconds="1389.3774676" />
          <Mutant Id="EAM#35" Description="get_StartingHP" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10695" TestingTimeMiliseconds="1833" TestingEndRelativeSeconds="1389.3814714999999" />
          <Mutant Id="EAM#36" Description="get_IsEmpty" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10714" TestingTimeMiliseconds="1786" TestingEndRelativeSeconds="1389.3754706" />
          <Mutant Id="ROR#200" Description="GreaterThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8177" TestingTimeMiliseconds="1801" TestingEndRelativeSeconds="1399.3810234999999" />
          <Mutant Id="ROR#199" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8168" TestingTimeMiliseconds="1835" TestingEndRelativeSeconds="1399.4230241999999" />
          <Mutant Id="PRV#45" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8140" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="1399.3520197" />
          <Mutant Id="OODL#133" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8273" TestingTimeMiliseconds="1809" TestingEndRelativeSeconds="1409.4535758" />
          <Mutant Id="OODL#136" Description="RightOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8233" TestingTimeMiliseconds="1783" TestingEndRelativeSeconds="1409.4355745999999" />
          <Mutant Id="OODL#137" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8214" TestingTimeMiliseconds="1820" TestingEndRelativeSeconds="1409.4925779999999" />
          <Mutant Id="OODL#141" Description="LeftOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8136" TestingTimeMiliseconds="1780" TestingEndRelativeSeconds="1419.3771218" />
          <Mutant Id="OODL#142" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8152" TestingTimeMiliseconds="1811" TestingEndRelativeSeconds="1419.4341216999999" />
          <Mutant Id="SSDL#99" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8092" TestingTimeMiliseconds="1797" TestingEndRelativeSeconds="1419.4001234" />
        </Method>
        <Method Name="get_CurrentHP">
          <Mutant Id="ROR#206" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8140" TestingTimeMiliseconds="1793" TestingEndRelativeSeconds="1429.3396668" />
          <Mutant Id="OODL#143" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8185" TestingTimeMiliseconds="1849" TestingEndRelativeSeconds="1429.4526785" />
          <Mutant Id="OODL#144" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8138" TestingTimeMiliseconds="1832" TestingEndRelativeSeconds="1429.4396732" />
        </Method>
        <Method Name="get_IsEmpty">
          <Mutant Id="EAM#33" Description="get_Capacity" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8158" TestingTimeMiliseconds="1783" TestingEndRelativeSeconds="1439.3062185" />
          <Mutant Id="ROR#185" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8113" TestingTimeMiliseconds="1790" TestingEndRelativeSeconds="1439.3752227999999" />
          <Mutant Id="ROR#184" Description="True" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8091" TestingTimeMiliseconds="1836" TestingEndRelativeSeconds="1439.4172251999999" />
          <Mutant Id="ROR#186" Description="LessThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8134" TestingTimeMiliseconds="1785" TestingEndRelativeSeconds="1449.2447622" />
          <Mutant Id="ROR#190" Description="NotEquality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8149" TestingTimeMiliseconds="1808" TestingEndRelativeSeconds="1449.3737698999998" />
          <Mutant Id="OODL#127" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8099" TestingTimeMiliseconds="1793" TestingEndRelativeSeconds="1449.3517683" />
        </Method>
        <Method Name="Move">
          <Mutant Id="PRV#44" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="7981" TestingTimeMiliseconds="1780" TestingEndRelativeSeconds="1459.0213010999999" />
          <Mutant Id="SSDL#98" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8079" TestingTimeMiliseconds="1812" TestingEndRelativeSeconds="1459.2723144" />
        </Method>
        <Method Name="MoveTowards">
          <Mutant Id="EAM#32" Description="System.Collections.IList.get_Item" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8076" TestingTimeMiliseconds="1798" TestingEndRelativeSeconds="1459.2893162" />
        </Method>
        <Method Name="set_StartingHP">
          <Mutant Id="PRV#40" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="2882" TestingTimeMiliseconds="1741" TestingEndRelativeSeconds="1463.6695568" />
          <Mutant Id="SSDL#93" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10702" TestingTimeMiliseconds="1776" TestingEndRelativeSeconds="1471.7760056" />
        </Method>
      </Type>
      <Type Name="PackMock" Namespace="PackMockGameLogic">
        <Method Name="Flees">
          <Mutant Id="EAM#37" Description="get_Value" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10663" TestingTimeMiliseconds="1821" TestingEndRelativeSeconds="1471.810013" />
          <Mutant Id="EAM#38" Description="get_HasValue" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="6340" TestingTimeMiliseconds="1776" TestingEndRelativeSeconds="1471.8010044999999" />
          <Mutant Id="EAM#39" Description="get_HasValue" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8115" TestingTimeMiliseconds="1757" TestingEndRelativeSeconds="1481.6645474" />
        </Method>
      </Type>
      <Type Name="Player" Namespace="PlayerGameLogic">
        <Method Name=".ctor">
          <Mutant Id="SSDL#106" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8117" TestingTimeMiliseconds="1804" TestingEndRelativeSeconds="1481.7485517" />
          <Mutant Id="SSDL#107" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8112" TestingTimeMiliseconds="1777" TestingEndRelativeSeconds="1481.7285502" />
          <Mutant Id="SSDL#108" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8177" TestingTimeMiliseconds="1787" TestingEndRelativeSeconds="1491.6550997" />
          <Mutant Id="SSDL#109" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8152" TestingTimeMiliseconds="1841" TestingEndRelativeSeconds="1491.7581056" />
          <Mutant Id="SSDL#110" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8110" TestingTimeMiliseconds="1791" TestingEndRelativeSeconds="1491.7031031" />
          <Mutant Id="SSDL#111" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8115" TestingTimeMiliseconds="1763" TestingEndRelativeSeconds="1501.5516413" />
          <Mutant Id="SSDL#112" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8111" TestingTimeMiliseconds="1793" TestingEndRelativeSeconds="1501.6446468" />
          <Mutant Id="JID#25" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8046" TestingTimeMiliseconds="1809" TestingEndRelativeSeconds="1501.6466467999999" />
          <Mutant Id="JTD#25" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="7993" TestingTimeMiliseconds="1806" TestingEndRelativeSeconds="1511.3771826999998" />
          <Mutant Id="JID#26" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8094" TestingTimeMiliseconds="1767" TestingEndRelativeSeconds="1511.5381906999999" />
          <Mutant Id="JTD#26" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8080" TestingTimeMiliseconds="1802" TestingEndRelativeSeconds="1511.5671925" />
          <Mutant Id="JID#27" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="5478" TestingTimeMiliseconds="1700" TestingEndRelativeSeconds="1518.572582" />
          <Mutant Id="JTD#27" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10815" TestingTimeMiliseconds="1786" TestingEndRelativeSeconds="1524.1718869" />
          <Mutant Id="JID#28" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10760" TestingTimeMiliseconds="1799" TestingEndRelativeSeconds="1524.2188929" />
          <Mutant Id="JTD#28" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="3871" TestingTimeMiliseconds="1792" TestingEndRelativeSeconds="1524.2578945" />
          <Mutant Id="JID#29" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8132" TestingTimeMiliseconds="1776" TestingEndRelativeSeconds="1534.0994326999999" />
          <Mutant Id="JTD#29" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8113" TestingTimeMiliseconds="1769" TestingEndRelativeSeconds="1534.1274345" />
          <Mutant Id="JID#30" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8082" TestingTimeMiliseconds="1777" TestingEndRelativeSeconds="1534.1414353999999" />
          <Mutant Id="JTD#30" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8126" TestingTimeMiliseconds="1775" TestingEndRelativeSeconds="1544.0189825" />
          <Mutant Id="JID#31" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8140" TestingTimeMiliseconds="1793" TestingEndRelativeSeconds="1544.0999832999999" />
          <Mutant Id="JTD#31" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8119" TestingTimeMiliseconds="1818" TestingEndRelativeSeconds="1544.1059871" />
          <Mutant Id="PRV#48" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5549" TestingTimeMiliseconds="1792" TestingEndRelativeSeconds="1551.3783846" />
          <Mutant Id="PRV#49" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="5541" TestingTimeMiliseconds="1808" TestingEndRelativeSeconds="1551.4853939" />
          <Mutant Id="PRV#50" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="5559" TestingTimeMiliseconds="1798" TestingEndRelativeSeconds="1551.5053963" />
          <Mutant Id="PRV#51" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10651" TestingTimeMiliseconds="1787" TestingEndRelativeSeconds="1563.8310698" />
          <Mutant Id="PRV#52" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10573" TestingTimeMiliseconds="1771" TestingEndRelativeSeconds="1563.8460701" />
          <Mutant Id="PRV#53" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10579" TestingTimeMiliseconds="1788" TestingEndRelativeSeconds="1563.8880723" />
        </Method>
        <Method Name="Attack">
          <Mutant Id="SSDL#114" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8118" TestingTimeMiliseconds="5510" TestingEndRelativeSeconds="1577.4878211" />
          <Mutant Id="SSDL#115" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8143" TestingTimeMiliseconds="5502" TestingEndRelativeSeconds="1577.5208337" />
          <Mutant Id="SSDL#116" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8113" TestingTimeMiliseconds="5879" TestingEndRelativeSeconds="1577.906847" />
          <Mutant Id="SSDL#117" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="303" TestingTimeMiliseconds="1814" TestingEndRelativeSeconds="1579.6289425999999" />
          <Mutant Id="AOR#183" Description="LeftParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10774" TestingTimeMiliseconds="1780" TestingEndRelativeSeconds="1590.4825414" />
          <Mutant Id="AOR#180" Description="Multiplication" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10714" TestingTimeMiliseconds="5515" TestingEndRelativeSeconds="1594.2577546" />
          <Mutant Id="ROR#209" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9114" TestingTimeMiliseconds="5500" TestingEndRelativeSeconds="1594.2657491" />
          <Mutant Id="ROR#208" Description="True" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="242" TestingTimeMiliseconds="5511" TestingEndRelativeSeconds="1596.2498567" />
          <Mutant Id="ROR#210" Description="NotEquality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10873" TestingTimeMiliseconds="5502" TestingEndRelativeSeconds="1610.6516494999999" />
          <Mutant Id="EAM#40" Description="System.Collections.IEnumerator.get_Current" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10858" TestingTimeMiliseconds="5519" TestingEndRelativeSeconds="1610.677651" />
          <Mutant Id="ISD#5" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8929" TestingTimeMiliseconds="5520" TestingEndRelativeSeconds="1610.7146527999998" />
          <Mutant Id="EAM#41" Description="get_StartingHP" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8208" TestingTimeMiliseconds="5509" TestingEndRelativeSeconds="1624.3834055999998" />
          <Mutant Id="ISD#6" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8161" TestingTimeMiliseconds="5514" TestingEndRelativeSeconds="1624.3814103" />
          <Mutant Id="PRV#54" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8125" TestingTimeMiliseconds="5506" TestingEndRelativeSeconds="1624.4064068999999" />
          <Mutant Id="PRV#55" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8236" TestingTimeMiliseconds="1838" TestingEndRelativeSeconds="1634.4829579999998" />
        </Method>
        <Method Name="ChooseTarget">
          <Mutant Id="EAM#42" Description="System.Collections.IList.get_Item" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8233" TestingTimeMiliseconds="1802" TestingEndRelativeSeconds="1634.4619564999998" />
          <Mutant Id="EAM#43" Description="System.Collections.IList.get_Item" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8171" TestingTimeMiliseconds="1797" TestingEndRelativeSeconds="1634.4469563999999" />
        </Method>
        <Method Name="Flees">
          <Mutant Id="SSDL#118" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8114" TestingTimeMiliseconds="1781" TestingEndRelativeSeconds="1644.3775065999998" />
          <Mutant Id="SSDL#119" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8132" TestingTimeMiliseconds="1781" TestingEndRelativeSeconds="1644.4285080999998" />
          <Mutant Id="SSDL#120" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8124" TestingTimeMiliseconds="5516" TestingEndRelativeSeconds="1648.1377092999999" />
          <Mutant Id="AOR#189" Description="LeftParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8230" TestingTimeMiliseconds="5518" TestingEndRelativeSeconds="1658.1412630999998" />
          <Mutant Id="AOR#187" Description="Division" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8201" TestingTimeMiliseconds="5807" TestingEndRelativeSeconds="1658.4652809" />
          <Mutant Id="AOR#188" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="4521" TestingTimeMiliseconds="5785" TestingEndRelativeSeconds="1658.4612814999998" />
          <Mutant Id="ROR#216" Description="GreaterThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="352" TestingTimeMiliseconds="1731" TestingEndRelativeSeconds="1660.5653932" />
          <Mutant Id="EAM#44" Description="System.Collections.IList.get_Item" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10698" TestingTimeMiliseconds="1799" TestingEndRelativeSeconds="1671.4109935" />
          <Mutant Id="EAM#45" Description="get_Capacity" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10680" TestingTimeMiliseconds="1802" TestingEndRelativeSeconds="1671.4129937999999" />
          <Mutant Id="PRV#56" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9050" TestingTimeMiliseconds="1782" TestingEndRelativeSeconds="1671.4239909" />
          <Mutant Id="PRV#57" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8108" TestingTimeMiliseconds="1780" TestingEndRelativeSeconds="1681.3215389" />
          <Mutant Id="OODL#152" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8103" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="1681.3155391999999" />
          <Mutant Id="OODL#154" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8075" TestingTimeMiliseconds="1806" TestingEndRelativeSeconds="1681.3365371999998" />
          <Mutant Id="OODL#153" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8147" TestingTimeMiliseconds="1788" TestingEndRelativeSeconds="1691.2840841" />
          <Mutant Id="OODL#155" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8174" TestingTimeMiliseconds="5501" TestingEndRelativeSeconds="1695.0422912" />
          <Mutant Id="OODL#156" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8165" TestingTimeMiliseconds="5514" TestingEndRelativeSeconds="1695.0612921" />
          <Mutant Id="OODL#157" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="260" TestingTimeMiliseconds="1792" TestingEndRelativeSeconds="1693.3592036999999" />
          <Mutant Id="OODL#158" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="11011" TestingTimeMiliseconds="1801" TestingEndRelativeSeconds="1706.1879044999998" />
        </Method>
        <Method Name="Use">
          <Mutant Id="ISD#4" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9324" TestingTimeMiliseconds="1795" TestingEndRelativeSeconds="1706.1869041999998" />
        </Method>
      </Type>
      <Type Name="Extensions" Namespace="ExtensionsUtils">
        <Method Name="Random">
          <Mutant Id="EAM#1" Description="System.Collections.IList.get_Item" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9326" TestingTimeMiliseconds="1814" TestingEndRelativeSeconds="1706.2329072999999" />
          <Mutant Id="EAM#2" Description="get_Capacity" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8149" TestingTimeMiliseconds="1793" TestingEndRelativeSeconds="1716.1474558999998" />
        </Method>
      </Type>
      <Type Name="Predicates" Namespace="PredicatesUtils">
        <Method Name="CountNumberOfBridges">
          <Mutant Id="AOR#7" Description="Subtraction" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8116" TestingTimeMiliseconds="1782" TestingEndRelativeSeconds="1716.1154540999999" />
          <Mutant Id="AOR#12" Description="RightParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8099" TestingTimeMiliseconds="1790" TestingEndRelativeSeconds="1716.1484556" />
          <Mutant Id="SSDL#12" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8123" TestingTimeMiliseconds="1782" TestingEndRelativeSeconds="1726.0379971999998" />
          <Mutant Id="EAM#8" Description="System.Collections.IEnumerator.get_Current" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8096" TestingTimeMiliseconds="5507" TestingEndRelativeSeconds="1729.7922036999999" />
          <Mutant Id="OODL#16" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8119" TestingTimeMiliseconds="1797" TestingEndRelativeSeconds="1726.0970008" />
        </Method>
        <Method Name="IsBridge">
          <Mutant Id="SSDL#11" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8168" TestingTimeMiliseconds="1797" TestingEndRelativeSeconds="1736.0275500999999" />
          <Mutant Id="ROR#24" Description="NotEquality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8157" TestingTimeMiliseconds="1794" TestingEndRelativeSeconds="1736.0795532" />
          <Mutant Id="ROR#23" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="4458" TestingTimeMiliseconds="1775" TestingEndRelativeSeconds="1736.0675523" />
          <Mutant Id="ROR#27" Description="NotEquality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8131" TestingTimeMiliseconds="1771" TestingEndRelativeSeconds="1745.9540941" />
          <Mutant Id="ROR#25" Description="True" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8126" TestingTimeMiliseconds="1794" TestingEndRelativeSeconds="1746.0280968999998" />
          <Mutant Id="ROR#26" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8114" TestingTimeMiliseconds="1814" TestingEndRelativeSeconds="1746.0410981" />
          <Mutant Id="EAM#6" Description="System.Collections.IEnumerator.get_Current" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8140" TestingTimeMiliseconds="1756" TestingEndRelativeSeconds="1755.8706421" />
          <Mutant Id="OODL#10" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8125" TestingTimeMiliseconds="1798" TestingEndRelativeSeconds="1755.9906489" />
          <Mutant Id="EAM#7" Description="System.Collections.IEnumerator.get_Current" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8108" TestingTimeMiliseconds="1797" TestingEndRelativeSeconds="1755.9926489" />
          <Mutant Id="OODL#12" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8000" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="1765.6661778999999" />
          <Mutant Id="OODL#11" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8074" TestingTimeMiliseconds="1806" TestingEndRelativeSeconds="1765.9161917" />
          <Mutant Id="OODL#14" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8094" TestingTimeMiliseconds="1801" TestingEndRelativeSeconds="1765.9181919999999" />
          <Mutant Id="SSDL#8" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="2943" TestingTimeMiliseconds="1719" TestingEndRelativeSeconds="1770.3454362" />
          <Mutant Id="SSDL#9" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10806" TestingTimeMiliseconds="1796" TestingEndRelativeSeconds="1778.5708894" />
          <Mutant Id="SSDL#10" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10810" TestingTimeMiliseconds="1791" TestingEndRelativeSeconds="1778.5728889" />
        </Method>
        <Method Name="IsPath">
          <Mutant Id="AOR#6" Description="RightParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="6451" TestingTimeMiliseconds="1794" TestingEndRelativeSeconds="1778.6058904" />
          <Mutant Id="AOR#4" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8150" TestingTimeMiliseconds="1797" TestingEndRelativeSeconds="1788.5524412" />
          <Mutant Id="AOR#1" Description="Subtraction" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8177" TestingTimeMiliseconds="1775" TestingEndRelativeSeconds="1788.5544421" />
          <Mutant Id="ROR#7" Description="NotEquality" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8146" TestingTimeMiliseconds="1782" TestingEndRelativeSeconds="1788.5564411999999" />
          <Mutant Id="ROR#3" Description="LessThan" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8141" TestingTimeMiliseconds="1766" TestingEndRelativeSeconds="1798.4959855" />
          <Mutant Id="OODL#2" Description="RightOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8128" TestingTimeMiliseconds="1777" TestingEndRelativeSeconds="1798.4919846" />
          <Mutant Id="OODL#1" Description="LeftOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8138" TestingTimeMiliseconds="1761" TestingEndRelativeSeconds="1798.4979852" />
          <Mutant Id="SSDL#1" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5547" TestingTimeMiliseconds="1805" TestingEndRelativeSeconds="1805.8903953" />
          <Mutant Id="ROR#14" Description="NotEquality" State="Live" IsEquivalent="false" CreationTimeMiliseconds="5563" TestingTimeMiliseconds="1782" TestingEndRelativeSeconds="1805.8593905" />
          <Mutant Id="ROR#10" Description="GreaterThan" State="Live" IsEquivalent="false" CreationTimeMiliseconds="5539" TestingTimeMiliseconds="1759" TestingEndRelativeSeconds="1805.8153914999998" />
          <Mutant Id="ROR#11" Description="LessThanOrEqual" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10736" TestingTimeMiliseconds="1789" TestingEndRelativeSeconds="1818.3660791" />
          <Mutant Id="ROR#9" Description="False" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10711" TestingTimeMiliseconds="1795" TestingEndRelativeSeconds="1818.3930799999998" />
          <Mutant Id="ROR#13" Description="Equality" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10726" TestingTimeMiliseconds="1802" TestingEndRelativeSeconds="1818.4360824999999" />
          <Mutant Id="OODL#4" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8148" TestingTimeMiliseconds="1789" TestingEndRelativeSeconds="1828.3216298999998" />
          <Mutant Id="OODL#3" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8133" TestingTimeMiliseconds="1753" TestingEndRelativeSeconds="1828.3106298" />
          <Mutant Id="SSDL#2" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8103" TestingTimeMiliseconds="1786" TestingEndRelativeSeconds="1828.3506317" />
          <Mutant Id="OODL#6" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8097" TestingTimeMiliseconds="1832" TestingEndRelativeSeconds="1838.2651738999998" />
          <Mutant Id="OODL#5" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8093" TestingTimeMiliseconds="1807" TestingEndRelativeSeconds="1838.2631815" />
          <Mutant Id="SSDL#3" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8075" TestingTimeMiliseconds="1862" TestingEndRelativeSeconds="1838.3231816999999" />
        </Method>
        <Method Name="IsValidDungeon">
          <Mutant Id="LOR#3" Description="OnesComplementLeft" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8391" TestingTimeMiliseconds="5816" TestingEndRelativeSeconds="1852.5029582999998" />
          <Mutant Id="LOR#4" Description="OnesComplementRight" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8381" TestingTimeMiliseconds="5808" TestingEndRelativeSeconds="1852.4999583" />
          <Mutant Id="LOR#2" Description="BitwiseOr" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8354" TestingTimeMiliseconds="5499" TestingEndRelativeSeconds="1852.1999463999998" />
          <Mutant Id="LOR#1" Description="BitwiseAnd" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="264" TestingTimeMiliseconds="5518" TestingEndRelativeSeconds="1858.3082805" />
          <Mutant Id="EAM#11" Description="get_Capacity" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10747" TestingTimeMiliseconds="5797" TestingEndRelativeSeconds="1869.4599016999998" />
          <Mutant Id="EAM#12" Description="get_Capacity" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10738" TestingTimeMiliseconds="5516" TestingEndRelativeSeconds="1869.149874" />
          <Mutant Id="OODL#21" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5360" TestingTimeMiliseconds="5776" TestingEndRelativeSeconds="1869.4599016999998" />
          <Mutant Id="EAM#13" Description="get_Capacity" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="299" TestingTimeMiliseconds="5513" TestingEndRelativeSeconds="1875.2882227999999" />
          <Mutant Id="OODL#22" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10786" TestingTimeMiliseconds="5513" TestingEndRelativeSeconds="1886.1608184" />
          <Mutant Id="SSDL#13" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10757" TestingTimeMiliseconds="1747" TestingEndRelativeSeconds="1882.3886077999998" />
          <Mutant Id="OODL#25" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5377" TestingTimeMiliseconds="5508" TestingEndRelativeSeconds="1886.190815" />
          <Mutant Id="OODL#24" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="250" TestingTimeMiliseconds="5509" TestingEndRelativeSeconds="1888.1699211999999" />
          <Mutant Id="SSDL#14" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10815" TestingTimeMiliseconds="5506" TestingEndRelativeSeconds="1902.5017093" />
          <Mutant Id="SSDL#15" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10767" TestingTimeMiliseconds="5511" TestingEndRelativeSeconds="1902.4997096" />
          <Mutant Id="OODL#28" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8828" TestingTimeMiliseconds="5532" TestingEndRelativeSeconds="1902.5547124" />
          <Mutant Id="SSDL#18" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8245" TestingTimeMiliseconds="5515" TestingEndRelativeSeconds="1916.2914683" />
          <Mutant Id="SSDL#19" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8278" TestingTimeMiliseconds="5503" TestingEndRelativeSeconds="1916.3104698" />
          <Mutant Id="AOR#17" Description="LeftParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8220" TestingTimeMiliseconds="5514" TestingEndRelativeSeconds="1916.3284707" />
          <Mutant Id="AOR#16" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8245" TestingTimeMiliseconds="5511" TestingEndRelativeSeconds="1930.0742309999998" />
          <Mutant Id="AOR#15" Description="Division" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8253" TestingTimeMiliseconds="5511" TestingEndRelativeSeconds="1930.1102328999998" />
          <Mutant Id="AOR#20" Description="Subtraction" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8217" TestingTimeMiliseconds="5504" TestingEndRelativeSeconds="1930.1082322999998" />
          <Mutant Id="AOR#22" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8286" TestingTimeMiliseconds="5514" TestingEndRelativeSeconds="1943.8989883" />
          <Mutant Id="AOR#19" Description="Addition" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8265" TestingTimeMiliseconds="5508" TestingEndRelativeSeconds="1943.9349899" />
          <Mutant Id="AOR#23" Description="LeftParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8258" TestingTimeMiliseconds="5502" TestingEndRelativeSeconds="1943.9319899" />
          <Mutant Id="AOR#24" Description="RightParam" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8224" TestingTimeMiliseconds="5510" TestingEndRelativeSeconds="1957.6537454" />
          <Mutant Id="ROR#33" Description="GreaterThanOrEqual" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8204" TestingTimeMiliseconds="1769" TestingEndRelativeSeconds="1953.9365559999999" />
          <Mutant Id="ROR#34" Description="Equality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8156" TestingTimeMiliseconds="1787" TestingEndRelativeSeconds="1953.9735504999999" />
          <Mutant Id="ROR#28" Description="True" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8107" TestingTimeMiliseconds="1764" TestingEndRelativeSeconds="1963.8290935" />
          <Mutant Id="ROR#39" Description="GreaterThanOrEqual" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8105" TestingTimeMiliseconds="5512" TestingEndRelativeSeconds="1967.6272976999999" />
          <Mutant Id="ROR#40" Description="Equality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="4447" TestingTimeMiliseconds="5507" TestingEndRelativeSeconds="1967.6362975" />
          <Mutant Id="ROR#36" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="251" TestingTimeMiliseconds="5503" TestingEndRelativeSeconds="1969.6044083" />
          <Mutant Id="ROR#35" Description="True" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10711" TestingTimeMiliseconds="5505" TestingEndRelativeSeconds="1984.2302112" />
          <Mutant Id="ROR#37" Description="LessThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10705" TestingTimeMiliseconds="5812" TestingEndRelativeSeconds="1984.5312278" />
          <Mutant Id="ROR#48" Description="NotEquality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="9138" TestingTimeMiliseconds="5781" TestingEndRelativeSeconds="1984.5402279" />
          <Mutant Id="ROR#47" Description="Equality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="255" TestingTimeMiliseconds="5501" TestingEndRelativeSeconds="1990.3105464" />
          <Mutant Id="ROR#42" Description="True" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10760" TestingTimeMiliseconds="5510" TestingEndRelativeSeconds="2001.2261431" />
          <Mutant Id="ROR#43" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10754" TestingTimeMiliseconds="5806" TestingEndRelativeSeconds="2001.5291599999998" />
          <Mutant Id="EAM#9" Description="System.Collections.IEnumerator.get_Current" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5423" TestingTimeMiliseconds="5784" TestingEndRelativeSeconds="2001.53216" />
          <Mutant Id="EAM#10" Description="System.Collections.IEnumerator.get_Current" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="291" TestingTimeMiliseconds="5513" TestingEndRelativeSeconds="2007.3544806999998" />
          <Mutant Id="OODL#17" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10799" TestingTimeMiliseconds="5509" TestingEndRelativeSeconds="2018.2330825" />
        </Method>
        <Method Name="ReachableNodes">
          <Mutant Id="EAM#3" Description="System.Collections.IList.get_Item" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10794" TestingTimeMiliseconds="1745" TestingEndRelativeSeconds="2014.4638771999998" />
          <Mutant Id="ROR#17" Description="LessThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="5387" TestingTimeMiliseconds="5505" TestingEndRelativeSeconds="2018.2650844" />
          <Mutant Id="EAM#4" Description="System.Collections.IEnumerator.get_Current" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="226" TestingTimeMiliseconds="5500" TestingEndRelativeSeconds="2020.2131935999998" />
          <Mutant Id="SSDL#4" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10804" TestingTimeMiliseconds="5500" TestingEndRelativeSeconds="2034.5569775" />
          <Mutant Id="EAM#5" Description="get_Capacity" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10749" TestingTimeMiliseconds="5515" TestingEndRelativeSeconds="2034.5599777999998" />
        </Method>
      </Type>
      <Type Name="RNG" Namespace="RNGUtils">
        <Method Name=".cctor">
          <Mutant Id="PRV#3" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8847" TestingTimeMiliseconds="1740" TestingEndRelativeSeconds="2030.8167750999999" />
        </Method>
        <Method Name="get_Rnd">
          <Mutant Id="PRV#1" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="216" TestingTimeMiliseconds="1658" TestingEndRelativeSeconds="2032.7058797999998" />
          <Mutant Id="OODL#30" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10820" TestingTimeMiliseconds="1891" TestingEndRelativeSeconds="2045.4365768999999" />
          <Mutant Id="SSDL#20" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8957" TestingTimeMiliseconds="1870" TestingEndRelativeSeconds="2045.4225757" />
          <Mutant Id="ROR#49" Description="True" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8982" TestingTimeMiliseconds="2132" TestingEndRelativeSeconds="2045.7155925999998" />
        </Method>
        <Method Name="InitializeWithSeed">
          <Mutant Id="PRV#2" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8223" TestingTimeMiliseconds="1787" TestingEndRelativeSeconds="2055.4601396" />
          <Mutant Id="SSDL#21" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8189" TestingTimeMiliseconds="1807" TestingEndRelativeSeconds="2055.4581381" />
        </Method>
        <Method Name="Next">
          <Mutant Id="MCI#1" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="7930" TestingTimeMiliseconds="1813" TestingEndRelativeSeconds="2055.4801347" />
          <Mutant Id="MCI#2" Description="" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8099" TestingTimeMiliseconds="1766" TestingEndRelativeSeconds="2065.3496726" />
        </Method>
        <Method Name="UniqueList">
          <Mutant Id="ROR#63" Description="LessThanOrEqual" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8117" TestingTimeMiliseconds="1804" TestingEndRelativeSeconds="2065.4026753999997" />
          <Mutant Id="ROR#62" Description="GreaterThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8070" TestingTimeMiliseconds="1794" TestingEndRelativeSeconds="2065.3866757" />
          <Mutant Id="ROR#61" Description="LessThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8079" TestingTimeMiliseconds="1789" TestingEndRelativeSeconds="2075.2402171" />
          <Mutant Id="ROR#60" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8070" TestingTimeMiliseconds="1798" TestingEndRelativeSeconds="2075.2782196" />
          <Mutant Id="ROR#65" Description="NotEquality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8047" TestingTimeMiliseconds="1784" TestingEndRelativeSeconds="2075.2712192999998" />
          <Mutant Id="EAM#14" Description="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8149" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="2085.2007691" />
          <Mutant Id="OODL#32" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8122" TestingTimeMiliseconds="1803" TestingEndRelativeSeconds="2085.2317700999997" />
          <Mutant Id="OODL#33" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8113" TestingTimeMiliseconds="1754" TestingEndRelativeSeconds="2085.1907685" />
          <Mutant Id="OODL#35" Description="RightOperandRemoved" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8161" TestingTimeMiliseconds="1760" TestingEndRelativeSeconds="2095.1313148" />
          <Mutant Id="OODL#36" Description="LeftOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8169" TestingTimeMiliseconds="1786" TestingEndRelativeSeconds="2095.1993190999997" />
          <Mutant Id="OODL#37" Description="RightOperandRemoved" State="Error" IsEquivalent="false" CreationTimeMiliseconds="0" TestingTimeMiliseconds="0" TestingEndRelativeSeconds="-63630977592.47673">
            <ErrorInfo>
              <Description>Assumption failed.  The expression containing this as a subexpression should never allow a call to this routine.</Description>
              <ExceptionMessage>System.Diagnostics.Contracts.ContractException: Assumption failed.  The expression containing this as a subexpression should never allow a call to this routine.
   at System.Runtime.CompilerServices.ContractHelper.TriggerFailureImplementation(ContractFailureKind kind, String displayMessage, String userMessage, String conditionText, Exception innerException)
   at System.Diagnostics.Contracts.Contract.ReportFailure(ContractFailureKind failureKind, String userMessage, String conditionText, Exception innerException)
   at System.Diagnostics.Contracts.Contract.Assume(Boolean condition, String userMessage)
   at Microsoft.Cci.CodeModelToILConverter.TraverseChildren(ITargetExpression targetExpression)
   at Microsoft.Cci.CodeTraverser.Traverse(ITargetExpression targetExpression)
   at Microsoft.Cci.CodeTraverser.Dispatcher.Visit(ITargetExpression targetExpression)
   at Microsoft.Cci.MutableCodeModel.TargetExpression.Dispatch(ICodeVisitor visitor)
   at Microsoft.Cci.CodeTraverser.Traverse(IExpression expression)
   at Microsoft.Cci.CodeTraverser.Traverse(IEnumerable`1 expressions)
   at Microsoft.Cci.CodeModelToILConverter.VisitAssignment(ITargetExpression target, IExpression source, SourceTraverser sourceTraverser, Boolean treatAsStatement, Boolean pushTargetRValue, Boolean resultIsInitialTargetRValue)
   at Microsoft.Cci.CodeModelToILConverter.VisitAssignment(IAssignment assignment, Boolean treatAsStatement)
   at Microsoft.Cci.CodeModelToILConverter.TraverseChildren(IExpressionStatement expressionStatement)
   at Microsoft.Cci.CodeTraverser.Traverse(IExpressionStatement expressionStatement)
   at Microsoft.Cci.CodeTraverser.Dispatcher.Visit(IExpressionStatement expressionStatement)
   at Microsoft.Cci.MutableCodeModel.ExpressionStatement.Dispatch(ICodeVisitor visitor)
   at Microsoft.Cci.CodeTraverser.Traverse(IStatement statement)
   at Microsoft.Cci.CodeTraverser.Traverse(IEnumerable`1 statements)
   at Microsoft.Cci.CodeModelToILConverter.TraverseChildren(IBlockStatement block)
   at Microsoft.Cci.CodeTraverser.Traverse(IBlockStatement block)
   at Microsoft.Cci.CodeTraverser.Dispatcher.Visit(IBlockStatement block)
   at Microsoft.Cci.MutableCodeModel.BlockStatement.Dispatch(ICodeVisitor visitor)
   at Microsoft.Cci.CodeTraverser.Traverse(IStatement statement)
   at Microsoft.Cci.CodeTraverser.Traverse(IEnumerable`1 statements)
   at Microsoft.Cci.CodeModelToILConverter.TraverseChildren(IBlockStatement block)
   at Microsoft.Cci.CodeTraverser.Traverse(IBlockStatement block)
   at Microsoft.Cci.CodeModelToILConverter.ConvertToIL(IBlockStatement body)
   at Microsoft.Cci.MutableCodeModel.SourceMethodBody.GenerateIL()
   at Microsoft.Cci.MutableCodeModel.SourceMethodBody.get_PrivateHelperTypes()
   at Microsoft.Cci.MutableCodeModel.SourceMethodBody.get_PrivateHelperTypesImplementation()
   at Microsoft.Cci.ILToCodeModel.SourceMethodBody.Microsoft.Cci.IMethodBody.get_PrivateHelperTypes()
   at Microsoft.Cci.PeWriter.CreateIndicesFor(ITypeDefinition typeDef)
   at Microsoft.Cci.PeWriter.CreateIndices()
   at Microsoft.Cci.PeWriter.WritePeToStream(IModule module, IMetadataHost host, Stream stream, ISourceLocationProvider sourceLocationProvider, ILocalScopeProvider localScopeProvider, IPdbWriter pdbWriter, CustomSectionProvider[] customSectionProviders)
   at VisualMutator.Model.CciModuleSource.WriteToStream(IModuleInfo moduleInfo, FileStream stream, String filePath)
   at VisualMutator.Model.Mutations.MutantMaterializer.&lt;StoreMutant&gt;d__4.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at VisualMutator.Model.Tests.TestingMutant.&lt;RunAsync&gt;d__11.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at VisualMutator.Model.Tests.TestingProcess.&lt;TestOneMutant&gt;d__16.MoveNext()</ExceptionMessage>
            </ErrorInfo>
          </Mutant>
          <Mutant Id="OODL#39" Description="RightOperandRemoved" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="309" TestingTimeMiliseconds="1803" TestingEndRelativeSeconds="2095.4823345" />
          <Mutant Id="SSDL#23" Description="" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10689" TestingTimeMiliseconds="1768" TestingEndRelativeSeconds="2107.6080022" />
          <Mutant Id="AOR#28" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="10612" TestingTimeMiliseconds="1803" TestingEndRelativeSeconds="2107.6310028" />
          <Mutant Id="AOR#25" Description="Addition" State="Live" IsEquivalent="false" CreationTimeMiliseconds="10366" TestingTimeMiliseconds="1782" TestingEndRelativeSeconds="2107.6460036999997" />
          <Mutant Id="AOR#27" Description="Division" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8137" TestingTimeMiliseconds="1778" TestingEndRelativeSeconds="2117.5505456" />
          <Mutant Id="AOR#30" Description="RightParam" State="Live" IsEquivalent="false" CreationTimeMiliseconds="8137" TestingTimeMiliseconds="1765" TestingEndRelativeSeconds="2117.5765471" />
          <Mutant Id="AOR#34" Description="Modulus" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8126" TestingTimeMiliseconds="1791" TestingEndRelativeSeconds="2117.609549" />
          <Mutant Id="AOR#32" Description="Multiplication" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8094" TestingTimeMiliseconds="1791" TestingEndRelativeSeconds="2127.4580913" />
          <Mutant Id="ROR#53" Description="False" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8081" TestingTimeMiliseconds="5516" TestingEndRelativeSeconds="2131.2002969" />
          <Mutant Id="ROR#55" Description="GreaterThan" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="8059" TestingTimeMiliseconds="5504" TestingEndRelativeSeconds="2131.1982969" />
          <Mutant Id="ROR#57" Description="Equality" State="Killed" IsEquivalent="false" CreationTimeMiliseconds="274" TestingTimeMiliseconds="5513" TestingEndRelativeSeconds="2133.2604117" />
        </Method>
      </Type>
    </Assembly>
    <Assembly Name="STVRogue_Main" />
  </Mutants>
  <CodeDifferenceListings>
    <MutantCodeListing MutantId="SSDL#101">
      <Code>
   1    1   public Bridge(int id)
   2    2   {
   3       -      this.FromNodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
        3  +      new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   4    4       this.ToNodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.STVRogue.GameLogic.Node(id);
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#20">
      <Code>
   1    1   public Bridge(int id)
   2    2   {
   3       -      this.FromNodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   4    3       this.ToNodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    4       this.STVRogue.GameLogic.Node(id);
   6    5   }
   7    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#20">
      <Code>
   1    1   public Bridge(int id)
   2    2   {
   3       -      this.FromNodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   4    3       this.ToNodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    4       this.STVRogue.GameLogic.Node(id);
   6    5   }
   7    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#21">
      <Code>
   1    1   public Bridge(int id)
   2    2   {
   3    3       this.FromNodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   4       -      this.ToNodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    4       this.STVRogue.GameLogic.Node(id);
   6    5   }
   7    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#21">
      <Code>
   1    1   public Bridge(int id)
   2    2   {
   3    3       this.FromNodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   4       -      this.ToNodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    4       this.STVRogue.GameLogic.Node(id);
   6    5   }
   7    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#46">
      <Code>
   1    1   public Bridge(int id)
   2    2   {
   3       -      this.FromNodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
        3  +      this.FromNodes = this.FromNodes;
   4    4       this.ToNodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.STVRogue.GameLogic.Node(id);
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#47">
      <Code>
   1    1   public Bridge(int id)
   2    2   {
   3    3       this.FromNodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   4       -      this.ToNodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
        4  +      this.ToNodes = this.FromNodes;
   5    5       this.STVRogue.GameLogic.Node(id);
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#35">
      <Code>
   1    1   public void ConnectToNodeOfNextZone(STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       this.Connect(nd);
   4       -      this.ToNodes.Add(nd);
        4  +      this.FromNodes.Add(nd);
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#34">
      <Code>
   1    1   public void ConnectToNodeOfSameZone(STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       this.Connect(nd);
   4       -      this.FromNodes.Add(nd);
        4  +      this.ToNodes.Add(nd);
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#12">
      <Code>
   1    1   public Creature()
   2    2   {
   3       -      this.AttackRating = 1;
        3  +      this.AttackRating = this.Id;
   4    4       this.object();
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#44">
      <Code>
   1    1   public Creature()
   2    2   {
   3       -      this.AttackRating = 1;
        3  +      1;
   4    4       this.object();
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#8">
      <Code>
   1    1   public Creature()
   2    2   {
   3       -      this.AttackRating = 1;
   4    3       this.object();
   5    4   }
   6    5   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#8">
      <Code>
   1    1   public Creature()
   2    2   {
   3       -      this.AttackRating = 1;
   4    3       this.object();
   5    4   }
   6    5   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#63">
      <Code>
   1    1   public virtual void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3       -      foe.HP = System.Math.Max(0, foe.HP - this.AttackRating);
        3  +      foe.HP = System.Math.Max(0, foe.HP);
   4    4       string killMsg = foe.IsDead ? ", KILLING it" : "";
   5    5       STVRogue.Utils.Logger.Log(string.Concat(new string[6] {"Creature ", this.Name, " attacks ", foe.Name, killMsg, "."}));
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#59">
      <Code>
   1    1   public virtual void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3       -      foe.HP = System.Math.Max(0, foe.HP - this.AttackRating);
        3  +      foe.HP = System.Math.Max(0, foe.HP + this.AttackRating);
   4    4       string killMsg = foe.IsDead ? ", KILLING it" : "";
   5    5       STVRogue.Utils.Logger.Log(string.Concat(new string[6] {"Creature ", this.Name, " attacks ", foe.Name, killMsg, "."}));
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#62">
      <Code>
   1    1   public virtual void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3       -      foe.HP = System.Math.Max(0, foe.HP - this.AttackRating);
        3  +      foe.HP = System.Math.Max(0, foe.HP % this.AttackRating);
   4    4       string killMsg = foe.IsDead ? ", KILLING it" : "";
   5    5       STVRogue.Utils.Logger.Log(string.Concat(new string[6] {"Creature ", this.Name, " attacks ", foe.Name, killMsg, "."}));
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#13">
      <Code>
   1    1   public virtual void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3       -      foe.HP = System.Math.Max(0, foe.HP - this.AttackRating);
        3  +      foe.HP = this.Id;
   4    4       string killMsg = foe.IsDead ? ", KILLING it" : "";
   5    5       STVRogue.Utils.Logger.Log(string.Concat(new string[6] {"Creature ", this.Name, " attacks ", foe.Name, killMsg, "."}));
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#68">
      <Code>
   1    1   public virtual void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3       -      foe.HP = System.Math.Max(0, foe.HP - this.AttackRating);
        3  +      foe.HP = System.Math.Max(0, foe.HP);
   4    4       string killMsg = foe.IsDead ? ", KILLING it" : "";
   5    5       STVRogue.Utils.Logger.Log(string.Concat(new string[6] {"Creature ", this.Name, " attacks ", foe.Name, killMsg, "."}));
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#69">
      <Code>
   1    1   public virtual void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       foe.HP = System.Math.Max(0, foe.HP - this.AttackRating);
   4       -      string killMsg = foe.IsDead ? ", KILLING it" : "";
        4  +      string killMsg = foe.IsDead;
   5    5       STVRogue.Utils.Logger.Log(string.Concat(new string[6] {"Creature ", this.Name, " attacks ", foe.Name, killMsg, "."}));
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#45">
      <Code>
   1    1   public virtual void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3       -      foe.HP = System.Math.Max(0, foe.HP - this.AttackRating);
        3  +      System.Math.Max(0, foe.HP - this.AttackRating);
   4    4       string killMsg = foe.IsDead ? ", KILLING it" : "";
   5    5       STVRogue.Utils.Logger.Log(string.Concat(new string[6] {"Creature ", this.Name, " attacks ", foe.Name, killMsg, "."}));
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#108">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#111">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#109">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#71">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ISD#1">
      <Code>
   1    1   public override void Use(STVRogue.GameLogic.Player player)
   2    2   {
   3       -      this.Use(player);
   4    3       player.Accelerated = true;
   5    4       if (player.Location.IsBridge)
   6    5       {
   7    6           player.Location.Dungeon.Disconnect(player.Location as STVRogue.GameLogic.Bridge);
   8    7       }
   9    8   }
  10    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#27">
      <Code>
   1    1   public override void Use(STVRogue.GameLogic.Player player)
   2    2   {
   3    3       this.Use(player);
   4       -      player.Accelerated = true;
        4  +      true;
   5    5       if (player.Location.IsBridge)
   6    6       {
   7    7           player.Location.Dungeon.Disconnect(player.Location as STVRogue.GameLogic.Bridge);
   8    8       }
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#39">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#92">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#13">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4       -      this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    4       this.object();
   6    5       {
   7    6           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    7           this.DifficultyLevel = difficulty;
   9    8           this.M = nodeCapacityMultiplier;
  10    9           this.StartNode = this.NewNode();
  11   10           this.ExitNode = this.NewNode();
  12   11           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   12           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       13  +              int i = 0;
       14  +              goto IL_00a2;
       15  +          IL_0086:
  16   16               push this._nodes;
  17   17               bridges[i] = CS$0$0001 = this.NewBridge();
  18   18               pop.Add(CS$0$0001);
       19  +              ++i;
       20  +          IL_00a2:
       21  +              if (i &lt; this.DifficultyLevel)
       22  +                  goto IL_0086;
  19   23           }
  20       -          }
  21   24           this.GenerateZone(this.StartNode, bridges[0]);
  22   25           {
  23   26               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       27  +              i = 1;
       28  +              goto IL_00d8;
       29  +          IL_00c5:
  26   30               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       31  +              ++i;
       32  +          IL_00d8:
       33  +              if (i &lt; bridges.Length)
       34  +                  goto IL_00c5;
  28   35           }
  29   36           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   37       }
  31   38   }
  32   39   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#13">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4       -      this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    4       this.object();
   6    5       {
   7    6           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    7           this.DifficultyLevel = difficulty;
   9    8           this.M = nodeCapacityMultiplier;
  10    9           this.StartNode = this.NewNode();
  11   10           this.ExitNode = this.NewNode();
  12   11           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   12           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       13  +              int i = 0;
       14  +              goto IL_00a2;
       15  +          IL_0086:
  16   16               push this._nodes;
  17   17               bridges[i] = CS$0$0001 = this.NewBridge();
  18   18               pop.Add(CS$0$0001);
       19  +              ++i;
       20  +          IL_00a2:
       21  +              if (i &lt; this.DifficultyLevel)
       22  +                  goto IL_0086;
  19   23           }
  20       -          }
  21   24           this.GenerateZone(this.StartNode, bridges[0]);
  22   25           {
  23   26               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       27  +              i = 1;
       28  +              goto IL_00d8;
       29  +          IL_00c5:
  26   30               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       31  +              ++i;
       32  +          IL_00d8:
       33  +              if (i &lt; bridges.Length)
       34  +                  goto IL_00c5;
  28   35           }
  29   36           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   37       }
  31   38   }
  32   39   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#14">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8       -          this.DifficultyLevel = difficulty;
   9    8           this.M = nodeCapacityMultiplier;
  10    9           this.StartNode = this.NewNode();
  11   10           this.ExitNode = this.NewNode();
  12   11           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   12           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       13  +              int i = 0;
       14  +              goto IL_00a2;
       15  +          IL_0086:
  16   16               push this._nodes;
  17   17               bridges[i] = CS$0$0001 = this.NewBridge();
  18   18               pop.Add(CS$0$0001);
       19  +              ++i;
       20  +          IL_00a2:
       21  +              if (i &lt; this.DifficultyLevel)
       22  +                  goto IL_0086;
  19   23           }
  20       -          }
  21   24           this.GenerateZone(this.StartNode, bridges[0]);
  22   25           {
  23   26               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       27  +              i = 1;
       28  +              goto IL_00d8;
       29  +          IL_00c5:
  26   30               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       31  +              ++i;
       32  +          IL_00d8:
       33  +              if (i &lt; bridges.Length)
       34  +                  goto IL_00c5;
  28   35           }
  29   36           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   37       }
  31   38   }
  32   39   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#14">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8       -          this.DifficultyLevel = difficulty;
   9    8           this.M = nodeCapacityMultiplier;
  10    9           this.StartNode = this.NewNode();
  11   10           this.ExitNode = this.NewNode();
  12   11           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   12           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       13  +              int i = 0;
       14  +              goto IL_00a2;
       15  +          IL_0086:
  16   16               push this._nodes;
  17   17               bridges[i] = CS$0$0001 = this.NewBridge();
  18   18               pop.Add(CS$0$0001);
       19  +              ++i;
       20  +          IL_00a2:
       21  +              if (i &lt; this.DifficultyLevel)
       22  +                  goto IL_0086;
  19   23           }
  20       -          }
  21   24           this.GenerateZone(this.StartNode, bridges[0]);
  22   25           {
  23   26               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       27  +              i = 1;
       28  +              goto IL_00d8;
       29  +          IL_00c5:
  26   30               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       31  +              ++i;
       32  +          IL_00d8:
       33  +              if (i &lt; bridges.Length)
       34  +                  goto IL_00c5;
  28   35           }
  29   36           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   37       }
  31   38   }
  32   39   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#15">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9       -          this.M = nodeCapacityMultiplier;
  10    9           this.StartNode = this.NewNode();
  11   10           this.ExitNode = this.NewNode();
  12   11           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   12           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       13  +              int i = 0;
       14  +              goto IL_00a2;
       15  +          IL_0086:
  16   16               push this._nodes;
  17   17               bridges[i] = CS$0$0001 = this.NewBridge();
  18   18               pop.Add(CS$0$0001);
       19  +              ++i;
       20  +          IL_00a2:
       21  +              if (i &lt; this.DifficultyLevel)
       22  +                  goto IL_0086;
  19   23           }
  20       -          }
  21   24           this.GenerateZone(this.StartNode, bridges[0]);
  22   25           {
  23   26               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       27  +              i = 1;
       28  +              goto IL_00d8;
       29  +          IL_00c5:
  26   30               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       31  +              ++i;
       32  +          IL_00d8:
       33  +              if (i &lt; bridges.Length)
       34  +                  goto IL_00c5;
  28   35           }
  29   36           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   37       }
  31   38   }
  32   39   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#15">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9       -          this.M = nodeCapacityMultiplier;
  10    9           this.StartNode = this.NewNode();
  11   10           this.ExitNode = this.NewNode();
  12   11           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   12           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       13  +              int i = 0;
       14  +              goto IL_00a2;
       15  +          IL_0086:
  16   16               push this._nodes;
  17   17               bridges[i] = CS$0$0001 = this.NewBridge();
  18   18               pop.Add(CS$0$0001);
       19  +              ++i;
       20  +          IL_00a2:
       21  +              if (i &lt; this.DifficultyLevel)
       22  +                  goto IL_0086;
  19   23           }
  20       -          }
  21   24           this.GenerateZone(this.StartNode, bridges[0]);
  22   25           {
  23   26               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       27  +              i = 1;
       28  +              goto IL_00d8;
       29  +          IL_00c5:
  26   30               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       31  +              ++i;
       32  +          IL_00d8:
       33  +              if (i &lt; bridges.Length)
       34  +                  goto IL_00c5;
  28   35           }
  29   36           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   37       }
  31   38   }
  32   39   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#16">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10       -          this.StartNode = this.NewNode();
  11   10           this.ExitNode = this.NewNode();
  12   11           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   12           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       13  +              int i = 0;
       14  +              goto IL_00a2;
       15  +          IL_0086:
  16   16               push this._nodes;
  17   17               bridges[i] = CS$0$0001 = this.NewBridge();
  18   18               pop.Add(CS$0$0001);
       19  +              ++i;
       20  +          IL_00a2:
       21  +              if (i &lt; this.DifficultyLevel)
       22  +                  goto IL_0086;
  19   23           }
  20       -          }
  21   24           this.GenerateZone(this.StartNode, bridges[0]);
  22   25           {
  23   26               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       27  +              i = 1;
       28  +              goto IL_00d8;
       29  +          IL_00c5:
  26   30               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       31  +              ++i;
       32  +          IL_00d8:
       33  +              if (i &lt; bridges.Length)
       34  +                  goto IL_00c5;
  28   35           }
  29   36           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   37       }
  31   38   }
  32   39   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#16">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10       -          this.StartNode = this.NewNode();
  11   10           this.ExitNode = this.NewNode();
  12   11           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   12           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       13  +              int i = 0;
       14  +              goto IL_00a2;
       15  +          IL_0086:
  16   16               push this._nodes;
  17   17               bridges[i] = CS$0$0001 = this.NewBridge();
  18   18               pop.Add(CS$0$0001);
       19  +              ++i;
       20  +          IL_00a2:
       21  +              if (i &lt; this.DifficultyLevel)
       22  +                  goto IL_0086;
  19   23           }
  20       -          }
  21   24           this.GenerateZone(this.StartNode, bridges[0]);
  22   25           {
  23   26               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       27  +              i = 1;
       28  +              goto IL_00d8;
       29  +          IL_00c5:
  26   30               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       31  +              ++i;
       32  +          IL_00d8:
       33  +              if (i &lt; bridges.Length)
       34  +                  goto IL_00c5;
  28   35           }
  29   36           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   37       }
  31   38   }
  32   39   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#17">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11       -          this.ExitNode = this.NewNode();
  12   11           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   12           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       13  +              int i = 0;
       14  +              goto IL_00a2;
       15  +          IL_0086:
  16   16               push this._nodes;
  17   17               bridges[i] = CS$0$0001 = this.NewBridge();
  18   18               pop.Add(CS$0$0001);
       19  +              ++i;
       20  +          IL_00a2:
       21  +              if (i &lt; this.DifficultyLevel)
       22  +                  goto IL_0086;
  19   23           }
  20       -          }
  21   24           this.GenerateZone(this.StartNode, bridges[0]);
  22   25           {
  23   26               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       27  +              i = 1;
       28  +              goto IL_00d8;
       29  +          IL_00c5:
  26   30               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       31  +              ++i;
       32  +          IL_00d8:
       33  +              if (i &lt; bridges.Length)
       34  +                  goto IL_00c5;
  28   35           }
  29   36           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   37       }
  31   38   }
  32   39   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#17">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11       -          this.ExitNode = this.NewNode();
  12   11           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   12           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       13  +              int i = 0;
       14  +              goto IL_00a2;
       15  +          IL_0086:
  16   16               push this._nodes;
  17   17               bridges[i] = CS$0$0001 = this.NewBridge();
  18   18               pop.Add(CS$0$0001);
       19  +              ++i;
       20  +          IL_00a2:
       21  +              if (i &lt; this.DifficultyLevel)
       22  +                  goto IL_0086;
  19   23           }
  20       -          }
  21   24           this.GenerateZone(this.StartNode, bridges[0]);
  22   25           {
  23   26               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       27  +              i = 1;
       28  +              goto IL_00d8;
       29  +          IL_00c5:
  26   30               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       31  +              ++i;
       32  +          IL_00d8:
       33  +              if (i &lt; bridges.Length)
       34  +                  goto IL_00c5;
  28   35           }
  29   36           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   37       }
  31   38   }
  32   39   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#111">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              i = i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#109">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              i /= 1;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#115">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  19   24           }
  20       -          }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
  26       -                  this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
       31  +              this.GenerateZone(bridges[i / 1], bridges[i]);
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#114">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  19   24           }
  20       -          }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
  26       -                  this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
       31  +              this.GenerateZone(bridges[i * 1], bridges[i]);
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#118">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  19   24           }
  20       -          }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
  26       -                  this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
       31  +              this.GenerateZone(bridges[1], bridges[i]);
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#119">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              --i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#122">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              i %= 1;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#121">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              i /= 1;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#124">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              i = 1;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#25">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18       -                  pop.Add(CS$0$0001);
  19       -              }
       19  +              this._nodes.Add(CS$0$0001);
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#26">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4       -      this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
        4  +      this._nodes = this._nodes;
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#146">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i != this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#144">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &gt;= this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#145">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i == this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#27">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8       -          this.DifficultyLevel = difficulty;
        8  +          this.DifficultyLevel = this.DifficultyLevel;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#151">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &gt;= bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#148">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (false)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#152">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i == bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#147">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (true)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#28">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9       -          this.M = nodeCapacityMultiplier;
        9  +          this.M = this.DifficultyLevel;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#29">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10       -          this.StartNode = this.NewNode();
       10  +          this.StartNode = this.StartNode;
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#30">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11       -          this.ExitNode = this.NewNode();
       11  +          this.ExitNode = this.StartNode;
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#31">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              i = this.DifficultyLevel;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#32">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = this.DifficultyLevel;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#33">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              i = this.DifficultyLevel;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#99">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              i = 1;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#100">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              i = i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#102">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#101">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#103">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  19   24           }
  20       -          }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
  26       -                  this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
       31  +              this.GenerateZone(bridges[1], bridges[i]);
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#104">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  19   24           }
  20       -          }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
  26       -                  this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
       31  +              this.GenerateZone(bridges[i], bridges[i]);
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#105">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              i = 1;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#108">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#73">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4       -      this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
        4  +      new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#74">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8       -          this.DifficultyLevel = difficulty;
        8  +          difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#75">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9       -          this.M = nodeCapacityMultiplier;
        9  +          nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#76">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10       -          this.StartNode = this.NewNode();
       10  +          this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#77">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11       -          this.ExitNode = this.NewNode();
       11  +          this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#78">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17       -                  bridges[i] = CS$0$0001 = this.NewBridge();
       18  +              CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#79">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17       -                  bridges[i] = CS$0$0001 = this.NewBridge();
       18  +              bridges[i] = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              i = 1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#81">
      <Code>
   1    1   public Dungeon(int difficulty, int nodeCapacityMultiplier)
   2    2   {
   3    3       STVRogue.GameLogic.Bridge CS$0$0001;
   4    4       this._nodes = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       this.object();
   6    6       {
   7    7           STVRogue.Utils.Logger.Log(string.Concat(new object[5] {"Creating a dungeon of difficulty level ", (object)difficulty, ", node capacity multiplier ", (object)nodeCapacityMultiplier, "."}));
   8    8           this.DifficultyLevel = difficulty;
   9    9           this.M = nodeCapacityMultiplier;
  10   10           this.StartNode = this.NewNode();
  11   11           this.ExitNode = this.NewNode();
  12   12           STVRogue.GameLogic.Bridge[] bridges = new STVRogue.GameLogic.Bridge[this.DifficultyLevel];
  13   13           {
  14       -              for (int i = 0; i &lt; this.DifficultyLevel; ++i)
  15       -              {
       14  +              int i = 0;
       15  +              goto IL_00a2;
       16  +          IL_0086:
  16   17               push this._nodes;
  17   18               bridges[i] = CS$0$0001 = this.NewBridge();
  18   19               pop.Add(CS$0$0001);
  19       -              }
       20  +              ++i;
       21  +          IL_00a2:
       22  +              if (i &lt; this.DifficultyLevel)
       23  +                  goto IL_0086;
  20   24           }
  21   25           this.GenerateZone(this.StartNode, bridges[0]);
  22   26           {
  23   27               int i;
  24       -              for (i = 1; i &lt; bridges.Length; ++i)
  25       -              {
       28  +              1;
       29  +              goto IL_00d8;
       30  +          IL_00c5:
  26   31               this.GenerateZone(bridges[i - 1], bridges[i]);
  27       -              }
       32  +              ++i;
       33  +          IL_00d8:
       34  +              if (i &lt; bridges.Length)
       35  +                  goto IL_00c5;
  28   36           }
  29   37           this.GenerateZone(System.Linq.Enumerable.Last&lt;STVRogue.GameLogic.Bridge&gt;(bridges), this.ExitNode);
  30   38       }
  31   39   }
  32   40   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#128">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5       -      int newDifficultyLevel = this.DifficultyLevel - b.Level();
        5  +      int newDifficultyLevel = this.DifficultyLevel % b.Level();
   6    6       if (newDifficultyLevel &lt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_00ac;
       16  +          {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#125">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5       -      int newDifficultyLevel = this.DifficultyLevel - b.Level();
        5  +      int newDifficultyLevel = this.DifficultyLevel + b.Level();
   6    6       if (newDifficultyLevel &lt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_00ac;
       16  +          {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#129">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5       -      int newDifficultyLevel = this.DifficultyLevel - b.Level();
        5  +      int newDifficultyLevel = this.DifficultyLevel;
   6    6       if (newDifficultyLevel &lt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_00ac;
       16  +          {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#29">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5    5       int newDifficultyLevel = this.DifficultyLevel - b.Level();
   6    6       if (newDifficultyLevel &lt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_00ac;
  13   16           {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.System.Collections.IEnumerator.get_Current();
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#29">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5    5       int newDifficultyLevel = this.DifficultyLevel - b.Level();
   6    6       if (newDifficultyLevel &lt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = this._nodes.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_00ac;
  13   16           {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#30">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5    5       int newDifficultyLevel = this.DifficultyLevel - b.Level();
   6    6       if (newDifficultyLevel &lt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_00ac;
  13   16           {
  14       -          node.Disconnect(b);
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
       19  +              this.StartNode.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#31">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5    5       int newDifficultyLevel = this.DifficultyLevel - b.Level();
   6    6       if (newDifficultyLevel &lt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_00ac;
  13   16           {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
  15   20           }
  16       -      b.FromNodes.Clear();
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
       24  +      }
       25  +      this._nodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#170">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5    5       int newDifficultyLevel = this.DifficultyLevel - b.Level();
   6       -      if (newDifficultyLevel &lt; 1)
        6  +      if (true)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_00ac;
       16  +          {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#172">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5    5       int newDifficultyLevel = this.DifficultyLevel - b.Level();
   6       -      if (newDifficultyLevel &lt; 1)
        6  +      if (newDifficultyLevel &gt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_00ac;
       16  +          {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#37">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5    5       int newDifficultyLevel = this.DifficultyLevel - b.Level();
   6    6       if (newDifficultyLevel &lt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10       -      this.StartNode = b;
       10  +      this.StartNode = this.StartNode;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_00ac;
       16  +          {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#38">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5    5       int newDifficultyLevel = this.DifficultyLevel - b.Level();
   6    6       if (newDifficultyLevel &lt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11       -      this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       11  +      this.DifficultyLevel = this.DifficultyLevel;
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_00ac;
       16  +          {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#117">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5       -      int newDifficultyLevel = this.DifficultyLevel - b.Level();
        5  +      int newDifficultyLevel = b.Level();
   6    6       if (newDifficultyLevel &lt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_00ac;
       16  +          {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#118">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5       -      int newDifficultyLevel = this.DifficultyLevel - b.Level();
        5  +      int newDifficultyLevel = this.DifficultyLevel;
   6    6       if (newDifficultyLevel &lt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_00ac;
       16  +          {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#119">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5    5       int newDifficultyLevel = this.DifficultyLevel - b.Level();
   6       -      if (newDifficultyLevel &lt; 1)
        6  +      if (1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_00ac;
       16  +          {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#120">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5    5       int newDifficultyLevel = this.DifficultyLevel - b.Level();
   6       -      if (newDifficultyLevel &lt; 1)
        6  +      if (newDifficultyLevel)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_00ac;
       16  +          {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#89">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5    5       int newDifficultyLevel = this.DifficultyLevel - b.Level();
   6    6       if (newDifficultyLevel &lt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10       -      this.StartNode = b;
       10  +      b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_00ac;
       16  +          {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#90">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5    5       int newDifficultyLevel = this.DifficultyLevel - b.Level();
   6    6       if (newDifficultyLevel &lt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11       -      this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       11  +      newDifficultyLevel;
       12  +      using(    CS$5$0002 = b.FromNodes.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_00ac;
       16  +          {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#91">
      <Code>
   1    1   public void Disconnect(STVRogue.GameLogic.Bridge b)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       STVRogue.Utils.Logger.Log(string.Concat("Disconnecting the bridge ", (object)b.Id, " from its zone."));
   5    5       int newDifficultyLevel = this.DifficultyLevel - b.Level();
   6    6       if (newDifficultyLevel &lt; 1)
   7    7       {
   8    8           throw new System.ArgumentException(string.Concat(new object[5] {"Bridge ", (object)b.Id, " cannot be disconnected, because the difficulty level would be ", (object)newDifficultyLevel, "."}));
   9    9       }
  10   10       this.StartNode = b;
  11   11       this.DifficultyLevel = newDifficultyLevel;
  12       -      foreach (STVRogue.GameLogic.Node node in b.FromNodes)
       12  +      using(    b.FromNodes.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_00ac;
  13   16           {
       17  +          IL_009a:
       18  +              STVRogue.GameLogic.Node node = CS$5$0002.Current;
  14   19               node.Disconnect(b);
       20  +          }
       21  +      IL_00ac:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_009a;
  15   24       }
  16   25       b.FromNodes.Clear();
  17   26   }
  18   27   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#91">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3       -      STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
        3  +      STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count / 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#90">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3       -      STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
        3  +      STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count * 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#93">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3       -      STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
        3  +      STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#94">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3       -      STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
        3  +      STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#100">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
   7       -              n[i + 1] = this.NewNode();
   8       -          }
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
        8  +          n[1] = this.NewNode();
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#98">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
   7       -              n[i + 1] = this.NewNode();
   8       -          }
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
        8  +          n[i % 1] = this.NewNode();
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#99">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
   7       -              n[i + 1] = this.NewNode();
   8       -          }
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
        8  +          n[i] = this.NewNode();
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#95">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
   7       -              n[i + 1] = this.NewNode();
   8       -          }
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
        8  +          n[i - 1] = this.NewNode();
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#96">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
   7       -              n[i + 1] = this.NewNode();
   8       -          }
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
        8  +          n[i * 1] = this.NewNode();
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#101">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          --i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#22">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
   7       -              n[i + 1] = this.NewNode();
   8       -          }
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
        8  +          n[i + 1] = this.StartNode;
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#23">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          i = this.DifficultyLevel;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#134">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (false)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#133">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (true)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#138">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i == count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#135">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &gt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#137">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &gt;= count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#91">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3       -      STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
        3  +      STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#92">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3       -      STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
        3  +      STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#93">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
   7       -              n[i + 1] = this.NewNode();
   8       -          }
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
        8  +          n[1] = this.NewNode();
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#96">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          i = i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#97">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
   7    8           n[i + 1] = this.NewNode();
   8       -          }
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#62">
      <Code>
   1    1   private STVRogue.GameLogic.Node[] GeneratesNodes(int count)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n = new STVRogue.GameLogic.Node[count + 1];
   4    4       {
   5       -          for (int i = 0; i &lt; count; ++i)
   6       -          {
   7       -              n[i + 1] = this.NewNode();
   8       -          }
        5  +          int i = 0;
        6  +          goto IL_001d;
        7  +      IL_000e:
        8  +          this.NewNode();
        9  +          ++i;
       10  +      IL_001d:
       11  +          if (i &lt; count)
       12  +              goto IL_000e;
   9   13       }
  10   14       return n;
  11   15   
  12   16   }
  13   17   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#11">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74       -      n[2].Connect(n[4]);
       61  +      this.StartNode.Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#12">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83       -      n[1].Connect(n[4]);
       70  +      this.StartNode.Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#13">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84       -      n[1].Connect(n[3]);
       71  +      this.StartNode.Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#14">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85       -      n[2].Connect(n[4]);
       72  +      this.StartNode.Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#15">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86       -      n[3].Connect(n[5]);
       73  +      this.StartNode.Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#16">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87       -      n[3].Connect(n[6]);
       74  +      this.StartNode.Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#17">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88       -      n[4].Connect(n[6]);
       75  +      this.StartNode.Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#18">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97       -      n[1].Connect(n[3]);
       84  +      this.StartNode.Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#19">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98       -      n[1].Connect(n[4]);
       85  +      this.StartNode.Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#20">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99       -      n[2].Connect(n[4]);
       86  +      this.StartNode.Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#21">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108       -      n[1].Connect(n[3]);
       95  +      this.StartNode.Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#22">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109       -      n[1].Connect(n[4]);
       96  +      this.StartNode.Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#23">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110       -      n[2].Connect(n[5]);
       97  +      this.StartNode.Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#24">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = this.StartNode;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#24">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111       -      n[3].Connect(n[5]);
       98  +      this.StartNode.Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#25">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = this.StartNode;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#5">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52       -      n[1].Connect(n[2]);
       39  +      this.StartNode.Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#6">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61       -      n[1].Connect(n[2]);
       48  +      this.StartNode.Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#7">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62       -      n[2].Connect(n[3]);
       49  +      this.StartNode.Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#64">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#65">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#67">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49       -      n = this.GeneratesNodes(2);
       36  +      this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#68">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58       -      n = this.GeneratesNodes(4);
       45  +      this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#69">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69       -      n = this.GeneratesNodes(4);
       56  +      this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#70">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80       -      n = this.GeneratesNodes(6);
       67  +      this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#8">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63       -      n[3].Connect(n[4]);
       50  +      this.StartNode.Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#71">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94       -      n = this.GeneratesNodes(4);
       81  +      this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#72">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105       -      n = this.GeneratesNodes(5);
       92  +      this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#9">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72       -      n[1].Connect(n[2]);
       59  +      this.StartNode.Connect(n[2]);
  73   60       n[2].Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#10">
      <Code>
   1    1   private void GenerateZone(STVRogue.GameLogic.Node b, STVRogue.GameLogic.Node a)
   2    2   {
   3    3       STVRogue.GameLogic.Node[] n;
   4       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = delegate (STVRogue.GameLogic.Node node) {
   5       -          if (b.IsBridge)
   6       -          {
   7       -              b as STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(node);
   8       -              return;
        4  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2 CS$&lt;&gt;8__locals3 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2();
        5  +      CS$&lt;&gt;8__locals3.b = b;
        6  +      CS$&lt;&gt;8__locals3.a = a;
        7  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectBefore = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__0;
        8  +      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = CS$&lt;&gt;8__locals3.&lt;GenerateZone&gt;b__1;
   9       -  
  10       -          }
  11       -          b.Connect(node);
  12       -      };
  13       -      System.Action&lt;STVRogue.GameLogic.Node&gt; ConnectAfter = delegate (STVRogue.GameLogic.Node node) {
  14       -          if (a.IsBridge)
  15       -          {
  16       -              a as STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(node);
  17       -              return;
  18       -  
  19       -          }
  20       -          a.Connect(node);
  21       -      };
  22    9       switch(STVRogue.Utils.RNG.Next(7)){
  23   10           case 0:
  24   11               goto IL_005f;
  25   12           case 1:
  26   13               goto IL_0094;
  27   14           case 2:
  28   15               goto IL_00d5;
  29   16           case 3:
  30   17               goto IL_012e;
  31   18           case 4:
  32   19               goto IL_0187;
  33   20           case 5:
  34   21               goto IL_0204;
  35   22           case 6:
  36   23               goto IL_025a;
  37   24       }
  38   25       return;
  39   26   
  40   27   IL_005f:
  41   28       n = this.GeneratesNodes(2);
  42   29       ConnectBefore(n[1]);
  43   30       ConnectBefore(n[2]);
  44   31       ConnectAfter(n[1]);
  45   32       ConnectAfter(n[2]);
  46   33       return;
  47   34   
  48   35   IL_0094:
  49   36       n = this.GeneratesNodes(2);
  50   37       ConnectBefore(n[1]);
  51   38       ConnectBefore(n[2]);
  52   39       n[1].Connect(n[2]);
  53   40       ConnectAfter(n[1]);
  54   41       ConnectAfter(n[2]);
  55   42       return;
  56   43   
  57   44   IL_00d5:
  58   45       n = this.GeneratesNodes(4);
  59   46       ConnectBefore(n[1]);
  60   47       ConnectBefore(n[2]);
  61   48       n[1].Connect(n[2]);
  62   49       n[2].Connect(n[3]);
  63   50       n[3].Connect(n[4]);
  64   51       ConnectAfter(n[1]);
  65   52       ConnectAfter(n[2]);
  66   53       return;
  67   54   
  68   55   IL_012e:
  69   56       n = this.GeneratesNodes(4);
  70   57       ConnectBefore(n[1]);
  71   58       ConnectBefore(n[4]);
  72   59       n[1].Connect(n[2]);
  73       -      n[2].Connect(n[3]);
       60  +      this.StartNode.Connect(n[3]);
  74   61       n[2].Connect(n[4]);
  75   62       ConnectAfter(n[1]);
  76   63       ConnectAfter(n[4]);
  77   64       return;
  78   65   
  79   66   IL_0187:
  80   67       n = this.GeneratesNodes(6);
  81   68       ConnectBefore(n[1]);
  82   69       ConnectBefore(n[2]);
  83   70       n[1].Connect(n[4]);
  84   71       n[1].Connect(n[3]);
  85   72       n[2].Connect(n[4]);
  86   73       n[3].Connect(n[5]);
  87   74       n[3].Connect(n[6]);
  88   75       n[4].Connect(n[6]);
  89   76       ConnectAfter(n[5]);
  90   77       ConnectAfter(n[6]);
  91   78       return;
  92   79   
  93   80   IL_0204:
  94   81       n = this.GeneratesNodes(4);
  95   82       ConnectBefore(n[1]);
  96   83       ConnectBefore(n[2]);
  97   84       n[1].Connect(n[3]);
  98   85       n[1].Connect(n[4]);
  99   86       n[2].Connect(n[4]);
 100   87       ConnectAfter(n[3]);
 101   88       ConnectAfter(n[4]);
 102   89       return;
 103   90   
 104   91   IL_025a:
 105   92       n = this.GeneratesNodes(5);
 106   93       ConnectBefore(n[1]);
 107   94       ConnectBefore(n[2]);
 108   95       n[1].Connect(n[3]);
 109   96       n[1].Connect(n[4]);
 110   97       n[2].Connect(n[5]);
 111   98       n[3].Connect(n[5]);
 112   99       ConnectAfter(n[4]);
 113  100       ConnectAfter(n[5]);
 114  101       return;
 115  102   
 116  103   }
 117  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#82">
      <Code>
   1    1   private STVRogue.GameLogic.Bridge NewBridge()
   2    2   {
   3       -      STVRogue.GameLogic.Bridge bridge = new STVRogue.GameLogic.Bridge(STVRogue.GameLogic.Dungeon._idPool++);
        3  +      STVRogue.GameLogic.Bridge bridge = new STVRogue.GameLogic.Bridge(STVRogue.GameLogic.Dungeon._idPool *= 1);
   4    4       bridge.Dungeon = this;
   5    5       this._nodes.Add(bridge);
   6    6       return bridge;
   7    7   
   8    8   }
   9    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#84">
      <Code>
   1    1   private STVRogue.GameLogic.Bridge NewBridge()
   2    2   {
   3       -      STVRogue.GameLogic.Bridge bridge = new STVRogue.GameLogic.Bridge(STVRogue.GameLogic.Dungeon._idPool++);
        3  +      STVRogue.GameLogic.Bridge bridge = new STVRogue.GameLogic.Bridge(STVRogue.GameLogic.Dungeon._idPool %= 1);
   4    4       bridge.Dungeon = this;
   5    5       this._nodes.Add(bridge);
   6    6       return bridge;
   7    7   
   8    8   }
   9    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#79">
      <Code>
   1    1   private STVRogue.GameLogic.Bridge NewBridge()
   2    2   {
   3       -      STVRogue.GameLogic.Bridge bridge = new STVRogue.GameLogic.Bridge(STVRogue.GameLogic.Dungeon._idPool++);
        3  +      STVRogue.GameLogic.Bridge bridge = new STVRogue.GameLogic.Bridge(STVRogue.GameLogic.Dungeon._idPool);
   4    4       bridge.Dungeon = this;
   5    5       this._nodes.Add(bridge);
   6    6       return bridge;
   7    7   
   8    8   }
   9    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#80">
      <Code>
   1    1   private STVRogue.GameLogic.Node NewNode()
   2    2   {
   3       -      STVRogue.GameLogic.Node node = new STVRogue.GameLogic.Node(STVRogue.GameLogic.Dungeon._idPool++);
        3  +      STVRogue.GameLogic.Node node = new STVRogue.GameLogic.Node(STVRogue.GameLogic.Dungeon._idPool %= 1);
   4    4       node.Dungeon = this;
   5    5       this._nodes.Add(node);
   6    6       return node;
   7    7   
   8    8   }
   9    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#77">
      <Code>
   1    1   private STVRogue.GameLogic.Node NewNode()
   2    2   {
   3       -      STVRogue.GameLogic.Node node = new STVRogue.GameLogic.Node(STVRogue.GameLogic.Dungeon._idPool++);
        3  +      STVRogue.GameLogic.Node node = new STVRogue.GameLogic.Node(STVRogue.GameLogic.Dungeon._idPool--);
   4    4       node.Dungeon = this;
   5    5       this._nodes.Add(node);
   6    6       return node;
   7    7   
   8    8   }
   9    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#52">
      <Code>
   1    1   private STVRogue.GameLogic.Node NewNode()
   2    2   {
   3    3       STVRogue.GameLogic.Node node = new STVRogue.GameLogic.Node(STVRogue.GameLogic.Dungeon._idPool++);
   4       -      node.Dungeon = this;
        4  +      this;
   5    5       this._nodes.Add(node);
   6    6       return node;
   7    7   
   8    8   }
   9    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#26">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = this._nodes.GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#27">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
  31       -          path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       44  +      goto IL_00fd;
       45  +  IL_00e5:
       46  +      this._nodes.Add(current);
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#28">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25       -          if (!(Q.Count == 0))
       40  +          if (!(Q.System.Collections.ICollection.get_IsSynchronized() == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#28">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
  34       -      path.Reverse();
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
       51  +      this._nodes.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#155">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13       -      if (current == v)
       15  +      if (false)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#166">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25       -          if (!(Q.Count == 0))
       40  +          if (!(Q.Count != 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#160">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25       -          if (!(Q.Count == 0))
       40  +          if (!true)
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#165">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25       -          if (!(Q.Count == 0))
       40  +          if (!(Q.Count &gt;= 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#162">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25       -          if (!(Q.Count == 0))
       40  +          if (!(Q.Count &lt; 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#167">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!true)
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#34">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12       -      current = Q.Dequeue();
       14  +      current = this.StartNode;
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#35">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28       -      path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       43  +      path = this._nodes;
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#36">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = this.StartNode;
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#111">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#112">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5)
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#114">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25       -          if (!(Q.Count == 0))
       40  +          if (!Q.Count)
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#115">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!u)
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#116">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!current)
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#83">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#84">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12       -      current = Q.Dequeue();
       14  +      Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#85">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#86">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#87">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28       -      path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       43  +      new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      current = CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#88">
      <Code>
   1    1   public System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; Shortestpath(STVRogue.GameLogic.Node u, STVRogue.GameLogic.Node v)
   2    2   {
   3    3       System.Collections.Generic.IEnumerator&lt;STVRogue.GameLogic.Node&gt; CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path;
        5  +      System.Func&lt;STVRogue.GameLogic.Node, bool&gt; CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = (System.Func&lt;STVRogue.GameLogic.Node, bool&gt;)null;
        6  +      STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6 CS$&lt;&gt;8__locals7 = new STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass6();
   5    7       System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt; Q = new System.Collections.Generic.Queue&lt;STVRogue.GameLogic.Node&gt;();
   6       -      System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
   7       -      parents.Add(u, (STVRogue.GameLogic.Node)null);
        8  +      CS$&lt;&gt;8__locals7.parents = new System.Collections.Generic.Dictionary&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;();
        9  +      CS$&lt;&gt;8__locals7.parents.Add(u, (STVRogue.GameLogic.Node)null);
   8   10       Q.Enqueue(u);
   9   11       STVRogue.GameLogic.Node current = (STVRogue.GameLogic.Node)null;
  10   12       goto IL_00c8;
  11   13   IL_003b:
  12   14       current = Q.Dequeue();
  13   15       if (current == v)
  14   16       {
  15   17       }
  16   18       else
  17   19       {
  18   20           push current.Neighbors;
  19       -          foreach (STVRogue.GameLogic.Node next in System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, (STVRogue.GameLogic.Node i) =&gt; !parents.ContainsKey(i)))
       21  +          if (CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       22  +          {
       23  +              CS$&lt;&gt;9__CachedAnonymousMethodDelegate5 = CS$&lt;&gt;8__locals7.&lt;Shortestpath&gt;b__4;
       24  +          }
       25  +          using(        CS$5$0002 = System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(pop, CS$&lt;&gt;9__CachedAnonymousMethodDelegate5).GetEnumerator();
       26  +  )
       27  +          {
       28  +              goto IL_00a3;
  20   29               {
  21       -              parents.Add(next, current);
       30  +              IL_0082:
       31  +                  STVRogue.GameLogic.Node next = CS$5$0002.Current;
       32  +                  CS$&lt;&gt;8__locals7.parents.Add(next, current);
  22   33                   Q.Enqueue(next);
       34  +              }
       35  +          IL_00a3:
       36  +              if (CS$5$0002.MoveNext())
       37  +                  goto IL_0082;
  23   38           }
  24   39       IL_00c8:
  25   40           if (!(Q.Count == 0))
  26   41               goto IL_003b;
  27   42       }
  28   43       path = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
  29       -      while (!(current == u))
  30       -      {
       44  +      goto IL_00fd;
       45  +  IL_00e5:
  31   46       path.Add(current);
  32       -          current = parents.Item[current];
  33       -      }
       47  +      CS$&lt;&gt;8__locals7.parents.Item[current];
       48  +  IL_00fd:
       49  +      if (!(current == u))
       50  +          goto IL_00e5;
  34   51       path.Reverse();
  35   52       return path;
  36   53   
  37   54   }
  38   55   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#88">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59       -                          if (i++ &lt; 4)
       75  +                              if (i %= 1 &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#87">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59       -                          if (i++ &lt; 4)
       75  +                              if (i /= 1 &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#85">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59       -                          if (i++ &lt; 4)
       75  +                              if (i-- &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#20">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35       -      i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       45  +      i = this.DifficultyLevel;
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#3">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26       -                  if (node.IsBridge)
       31  +                          if (this.StartNode.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#21">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65       -                              i = 0;
       81  +                                  i = this.DifficultyLevel;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#113">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14       -          if (node == this.StartNode)
       19  +                  if (true)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#115">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14       -          if (node == this.StartNode)
       19  +                  if (node != this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#116">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20       -              if (node == this.ExitNode)
       25  +                      if (true)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#125">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54       -                          if (i == 0)
       70  +                              if (i != 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#123">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54       -                          if (i == 0)
       70  +                              if (i &lt;= 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#124">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54       -                          if (i == 0)
       70  +                              if (i &gt;= 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#120">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54       -                          if (i == 0)
       70  +                              if (false)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#119">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54       -                          if (i == 0)
       70  +                              if (true)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#121">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54       -                          if (i == 0)
       70  +                              if (i &lt; 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#130">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59       -                          if (i++ &lt; 4)
       75  +                              if (i++ &gt;= 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#128">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59       -                          if (i++ &lt; 4)
       75  +                              if (i++ &gt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#25">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.System.Collections.IEnumerator.get_Current();
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
       38  +              }
  33   39           }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
       93  +              }
  74   94           }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#26">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
       38  +              }
  33   39           }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.System.Collections.IEnumerator.get_Current();
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
       93  +              }
  74   94           }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#27">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
  43       -                  STVRogue.GameLogic.Node v = CS$5$0003.Current;
       58  +                  IL_010e:
       59  +                      STVRogue.GameLogic.Node v = CS$5$0003.System.Collections.IEnumerator.get_Current();
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#4">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
  38       -          CS$5$0003 = u.Neighbors.GetEnumerator();
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
       53  +              CS$5$0003 = this._nodes.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#81">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14       -          if (node == this.StartNode)
       19  +                  if (node)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#80">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14       -          if (node == this.StartNode)
       19  +                  if (this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#82">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20       -              if (node == this.ExitNode)
       25  +                      if (this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#83">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20       -              if (node == this.ExitNode)
       25  +                      if (node)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#84">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47       -                      if (connected.Contains(t1) || connected.Contains(t2))
       63  +                          if (connected.Contains(t1))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#86">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54       -                          if (i == 0)
       70  +                              if (i)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#88">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59       -                          if (i++ &lt; 4)
       75  +                              if (i++)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#87">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59       -                          if (i++ &lt; 4)
       75  +                              if (i += 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#89">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59       -                          if (i++ &lt; 4)
       75  +                              if (1 &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#54">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16       -              color = "#7EF797";
       21  +                      "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#55">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22       -                  color = "#FF4F4F";
       27  +                          "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#56">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28       -                      color = "#51B1F9";
       33  +                              "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#57">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
  34       -      connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
       44  +      new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#58">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35       -      i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       45  +      0;
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#59">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
       38  +              }
  33   39           }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
       93  +              }
  74   94           }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#60">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
  38       -          CS$5$0003 = u.Neighbors.GetEnumerator();
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
       53  +              u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65   81                                   i = 0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#61">
      <Code>
   1    1   [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
   2    2   public string ToDot()
   3    3   {
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt; connected;
   6    6       int i;
   7    7       System.Text.StringBuilder result = new System.Text.StringBuilder();
   8    8       result.AppendLine("graph Rogue {");
   9    9       result.AppendLine("    overlap = false;");
  10   10       result.AppendLine("    splines = true;");
  11       -      foreach (STVRogue.GameLogic.Node node in this._nodes)
       11  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = this._nodes.GetEnumerator())
       12  +      {
       13  +          goto IL_00b2;
       14  +          {
       15  +          IL_003b:
       16  +              STVRogue.GameLogic.Node node = CS$5$0001.Current;
  12   17               {
  13   18                   string color = "white";
  14   19                   if (node == this.StartNode)
  15   20                   {
  16   21                       color = "#7EF797";
  17   22                   }
  18   23                   else
  19   24                   {
  20   25                       if (node == this.ExitNode)
  21   26                       {
  22   27                           color = "#FF4F4F";
  23   28                       }
  24   29                       else
  25   30                       {
  26   31                           if (node.IsBridge)
  27   32                           {
  28   33                               color = "#51B1F9";
  29   34                           }
  30   35                       }
  31   36                   }
  32   37                   result.AppendLine(string.Format("    n{0} [label=\"{1}\" style=filled fillcolor=\"{2}\"];", (object)node.Id, node, color));
  33   38               }
       39  +          }
       40  +      IL_00b2:
       41  +          if (CS$5$0001.MoveNext())
       42  +              goto IL_003b;
       43  +      }
  34   44       connected = new System.Collections.Generic.HashSet&lt;System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;&gt;();
  35   45       i = 0;
  36       -      foreach (STVRogue.GameLogic.Node u in this._nodes)
       46  +      using(    CS$5$0001 = this._nodes.GetEnumerator();
       47  +  )
       48  +      {
       49  +          goto IL_01e7;
  37   50           {
       51  +          IL_00f0:
       52  +              STVRogue.GameLogic.Node u = CS$5$0001.Current;
  38   53               CS$5$0003 = u.Neighbors.GetEnumerator();
  39   54               try
  40   55               {
  41       -              while (CS$5$0003.MoveNext())
       56  +                  goto IL_01c4;
  42   57                   {
       58  +                  IL_010e:
  43   59                       STVRogue.GameLogic.Node v = CS$5$0003.Current;
  44   60                       {
  45   61                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t1 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(u, v);
  46   62                           System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt; t2 = new System.Tuple&lt;STVRogue.GameLogic.Node, STVRogue.GameLogic.Node&gt;(v, u);
  47   63                           if (connected.Contains(t1) || connected.Contains(t2))
  48   64                           {
  49   65                           }
  50   66                           else
  51   67                           {
  52   68                               connected.Add(t1);
  53   69                               connected.Add(t2);
  54   70                               if (i == 0)
  55   71                               {
  56   72                                   result.Append("   ");
  57   73                               }
  58   74                               result.Append(string.Format(" n{0} -- n{1};", (object)u.Id, (object)v.Id));
  59   75                               if (i++ &lt; 4)
  60   76                               {
  61   77                               }
  62   78                               else
  63   79                               {
  64   80                                   result.AppendLine();
  65       -                              i = 0;
       81  +                                  0;
  66   82                               }
  67   83                           }
  68   84                       }
  69   85                   }
       86  +              IL_01c4:
       87  +                  if (CS$5$0003.MoveNext())
       88  +                      goto IL_010e;
  70   89               }
  71   90               finally
  72   91               {
  73   92                   CS$5$0003.Dispose();
  74   93               }
       94  +          }
       95  +      IL_01e7:
       96  +          if (CS$5$0001.MoveNext())
       97  +              goto IL_00f0;
  75   98       }
  76   99       result.AppendLine();
  77  100       result.AppendLine("}");
  78  101       return result.ToString();
  79  102   
  80  103   }
  81  104   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#14">
      <Code>
   1    1   public Game(int difficultyLevel, int nodeCapcityMultiplier, int numberOfMonsters)
   2    2   {
   3    3       this.object();
   4    4       STVRogue.Utils.Logger.Log(string.Concat(new object[7] {"Creating a game of difficulty level ", (object)difficultyLevel, ", node capacity multiplier ", (object)nodeCapcityMultiplier, ", and ", (object)numberOfMonsters, " monsters."}));
   5       -      this.Player = new STVRogue.GameLogic.Player();
        5  +      this.Player = this.Player;
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#46">
      <Code>
   1    1   public Game(int difficultyLevel, int nodeCapcityMultiplier, int numberOfMonsters)
   2    2   {
   3    3       this.object();
   4    4       STVRogue.Utils.Logger.Log(string.Concat(new object[7] {"Creating a game of difficulty level ", (object)difficultyLevel, ", node capacity multiplier ", (object)nodeCapcityMultiplier, ", and ", (object)numberOfMonsters, " monsters."}));
   5       -      this.Player = new STVRogue.GameLogic.Player();
        5  +      new STVRogue.GameLogic.Player();
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#9">
      <Code>
   1    1   public Game(int difficultyLevel, int nodeCapcityMultiplier, int numberOfMonsters)
   2    2   {
   3    3       this.object();
   4    4       STVRogue.Utils.Logger.Log(string.Concat(new object[7] {"Creating a game of difficulty level ", (object)difficultyLevel, ", node capacity multiplier ", (object)nodeCapcityMultiplier, ", and ", (object)numberOfMonsters, " monsters."}));
   5       -      this.Player = new STVRogue.GameLogic.Player();
   6    5   }
   7    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#9">
      <Code>
   1    1   public Game(int difficultyLevel, int nodeCapcityMultiplier, int numberOfMonsters)
   2    2   {
   3    3       this.object();
   4    4       STVRogue.Utils.Logger.Log(string.Concat(new object[7] {"Creating a game of difficulty level ", (object)difficultyLevel, ", node capacity multiplier ", (object)nodeCapcityMultiplier, ", and ", (object)numberOfMonsters, " monsters."}));
   5       -      this.Player = new STVRogue.GameLogic.Player();
   6    5   }
   7    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#67">
      <Code>
   1    1   public HealingPotion(string id)
   2    2   {
   3    3       this.STVRogue.GameLogic.Item(id);
   4       -      this.HPvalue = STVRogue.Utils.RNG.Next(10) + 1;
        4  +      this.HPvalue = STVRogue.Utils.RNG.Next(10) / 1;
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#66">
      <Code>
   1    1   public HealingPotion(string id)
   2    2   {
   3    3       this.STVRogue.GameLogic.Item(id);
   4       -      this.HPvalue = STVRogue.Utils.RNG.Next(10) + 1;
        4  +      this.HPvalue = STVRogue.Utils.RNG.Next(10) * 1;
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#65">
      <Code>
   1    1   public HealingPotion(string id)
   2    2   {
   3    3       this.STVRogue.GameLogic.Item(id);
   4       -      this.HPvalue = STVRogue.Utils.RNG.Next(10) + 1;
        4  +      this.HPvalue = STVRogue.Utils.RNG.Next(10) - 1;
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#70">
      <Code>
   1    1   public HealingPotion(string id)
   2    2   {
   3    3       this.STVRogue.GameLogic.Item(id);
   4       -      this.HPvalue = STVRogue.Utils.RNG.Next(10) + 1;
        4  +      this.HPvalue = 1;
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#15">
      <Code>
   1    1   public HealingPotion(string id)
   2    2   {
   3    3       this.STVRogue.GameLogic.Item(id);
   4       -      this.HPvalue = STVRogue.Utils.RNG.Next(10) + 1;
        4  +      this.HPvalue = this.HPvalue;
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#72">
      <Code>
   1    1   public HealingPotion(string id)
   2    2   {
   3    3       this.STVRogue.GameLogic.Item(id);
   4       -      this.HPvalue = STVRogue.Utils.RNG.Next(10) + 1;
        4  +      this.HPvalue = 1;
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#47">
      <Code>
   1    1   public HealingPotion(string id)
   2    2   {
   3    3       this.STVRogue.GameLogic.Item(id);
   4       -      this.HPvalue = STVRogue.Utils.RNG.Next(10) + 1;
        4  +      STVRogue.Utils.RNG.Next(10) + 1;
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#10">
      <Code>
   1    1   public HealingPotion(string id)
   2    2   {
   3    3       this.STVRogue.GameLogic.Item(id);
   4       -      this.HPvalue = STVRogue.Utils.RNG.Next(10) + 1;
   5    4   }
   6    5   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#10">
      <Code>
   1    1   public HealingPotion(string id)
   2    2   {
   3    3       this.STVRogue.GameLogic.Item(id);
   4       -      this.HPvalue = STVRogue.Utils.RNG.Next(10) + 1;
   5    4   }
   6    5   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ISD#2">
      <Code>
   1    1   public override void Use(STVRogue.GameLogic.Player player)
   2    2   {
   3       -      this.Use(player);
   4    3       player.HP = System.Math.Min(player.HPbase, player.HP + this.HPvalue);
   5    4   }
   6    5   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#71">
      <Code>
   1    1   public override void Use(STVRogue.GameLogic.Player player)
   2    2   {
   3    3       this.Use(player);
   4       -      player.HP = System.Math.Min(player.HPbase, player.HP + this.HPvalue);
        4  +      player.HP = System.Math.Min(player.HPbase, player.HP - this.HPvalue);
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#73">
      <Code>
   1    1   public override void Use(STVRogue.GameLogic.Player player)
   2    2   {
   3    3       this.Use(player);
   4       -      player.HP = System.Math.Min(player.HPbase, player.HP + this.HPvalue);
        4  +      player.HP = System.Math.Min(player.HPbase, player.HP / this.HPvalue);
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#16">
      <Code>
   1    1   public override void Use(STVRogue.GameLogic.Player player)
   2    2   {
   3    3       this.Use(player);
   4       -      player.HP = System.Math.Min(player.HPbase, player.HP + this.HPvalue);
        4  +      player.HP = this.HPvalue;
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#74">
      <Code>
   1    1   public override void Use(STVRogue.GameLogic.Player player)
   2    2   {
   3    3       this.Use(player);
   4       -      player.HP = System.Math.Min(player.HPbase, player.HP + this.HPvalue);
        4  +      player.HP = System.Math.Min(player.HPbase, this.HPvalue);
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#11">
      <Code>
   1    1   public Item(string id)
   2    2   {
   3       -      this.Used = false;
   4    3       this.object();
   5    4       this.Id = id;
   6    5   }
   7    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#11">
      <Code>
   1    1   public Item(string id)
   2    2   {
   3       -      this.Used = false;
   4    3       this.object();
   5    4       this.Id = id;
   6    5   }
   7    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#12">
      <Code>
   1    1   public Item(string id)
   2    2   {
   3    3       this.Used = false;
   4    4       this.object();
   5       -      this.Id = id;
   6    5   }
   7    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#12">
      <Code>
   1    1   public Item(string id)
   2    2   {
   3    3       this.Used = false;
   4    4       this.object();
   5       -      this.Id = id;
   6    5   }
   7    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#17">
      <Code>
   1    1   public Item(string id)
   2    2   {
   3       -      this.Used = false;
        3  +      this.Used = this.Used;
   4    4       this.object();
   5    5       this.Id = id;
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#18">
      <Code>
   1    1   public Item(string id)
   2    2   {
   3    3       this.Used = false;
   4    4       this.object();
   5       -      this.Id = id;
        5  +      this.Id = this.Id;
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#49">
      <Code>
   1    1   public Item(string id)
   2    2   {
   3       -      this.Used = false;
        3  +      false;
   4    4       this.object();
   5    5       this.Id = id;
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#50">
      <Code>
   1    1   public Item(string id)
   2    2   {
   3    3       this.Used = false;
   4    4       this.object();
   5       -      this.Id = id;
        5  +      id;
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#19">
      <Code>
   1    1   public virtual void Use(STVRogue.GameLogic.Player player)
   2    2   {
   3    3       if (this.Used)
   4    4       {
   5    5           throw new System.ArgumentException(string.Concat(new object[6] {(object)player.Id, " is trying to use an expired item: ", this.GetType().Name, " ", this.Id, ". Rejected."}));
   6    6       }
   7    7       STVRogue.Utils.Logger.Log(string.Concat(new object[5] {(object)player.Id, " uses ", this.GetType().Name, " ", this.Id}));
   8       -      this.Used = true;
        8  +      this.Used = this.Used;
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#23">
      <Code>
   1    1   public virtual void Use(STVRogue.GameLogic.Player player)
   2    2   {
   3    3       if (this.Used)
   4    4       {
   5       -          throw new System.ArgumentException(string.Concat(new object[6] {(object)player.Id, " is trying to use an expired item: ", this.GetType().Name, " ", this.Id, ". Rejected."}));
        5  +          throw new System.ArgumentException(string.Concat(new object[6] {(object)player.Id, " is trying to use an expired item: ", this.GetType().MemberType, " ", this.Id, ". Rejected."}));
   6    6       }
   7    7       STVRogue.Utils.Logger.Log(string.Concat(new object[5] {(object)player.Id, " uses ", this.GetType().Name, " ", this.Id}));
   8    8       this.Used = true;
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#24">
      <Code>
   1    1   public virtual void Use(STVRogue.GameLogic.Player player)
   2    2   {
   3    3       if (this.Used)
   4    4       {
   5    5           throw new System.ArgumentException(string.Concat(new object[6] {(object)player.Id, " is trying to use an expired item: ", this.GetType().Name, " ", this.Id, ". Rejected."}));
   6    6       }
   7       -      STVRogue.Utils.Logger.Log(string.Concat(new object[5] {(object)player.Id, " uses ", this.GetType().Name, " ", this.Id}));
        7  +      STVRogue.Utils.Logger.Log(string.Concat(new object[5] {(object)player.Id, " uses ", this.GetType().MemberType, " ", this.Id}));
   8    8       this.Used = true;
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#51">
      <Code>
   1    1   public virtual void Use(STVRogue.GameLogic.Player player)
   2    2   {
   3    3       if (this.Used)
   4    4       {
   5    5           throw new System.ArgumentException(string.Concat(new object[6] {(object)player.Id, " is trying to use an expired item: ", this.GetType().Name, " ", this.Id, ". Rejected."}));
   6    6       }
   7    7       STVRogue.Utils.Logger.Log(string.Concat(new object[5] {(object)player.Id, " uses ", this.GetType().Name, " ", this.Id}));
   8       -      this.Used = true;
        8  +      true;
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#103">
      <Code>
   1    1   public Monster(int id, string name)
   2    2   {
   3    3       this.STVRogue.GameLogic.Creature();
   4       -      this.Id = id;
        4  +      id;
   5    5       this.Name = name;
   6    6       this.HP = 1 + STVRogue.Utils.RNG.Next(6);
   7    7   }
   8    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#104">
      <Code>
   1    1   public Monster(int id, string name)
   2    2   {
   3    3       this.STVRogue.GameLogic.Creature();
   4    4       this.Id = id;
   5       -      this.Name = name;
        5  +      name;
   6    6       this.HP = 1 + STVRogue.Utils.RNG.Next(6);
   7    7   }
   8    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#105">
      <Code>
   1    1   public Monster(int id, string name)
   2    2   {
   3    3       this.STVRogue.GameLogic.Creature();
   4    4       this.Id = id;
   5    5       this.Name = name;
   6       -      this.HP = 1 + STVRogue.Utils.RNG.Next(6);
        6  +      1 + STVRogue.Utils.RNG.Next(6);
   7    7   }
   8    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#22">
      <Code>
   1    1   public Monster(int id, string name)
   2    2   {
   3    3       this.STVRogue.GameLogic.Creature();
   4       -      this.Id = id;
   5    4       this.Name = name;
   6    5       this.HP = 1 + STVRogue.Utils.RNG.Next(6);
   7    6   }
   8    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#22">
      <Code>
   1    1   public Monster(int id, string name)
   2    2   {
   3    3       this.STVRogue.GameLogic.Creature();
   4       -      this.Id = id;
   5    4       this.Name = name;
   6    5       this.HP = 1 + STVRogue.Utils.RNG.Next(6);
   7    6   }
   8    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#23">
      <Code>
   1    1   public Monster(int id, string name)
   2    2   {
   3    3       this.STVRogue.GameLogic.Creature();
   4    4       this.Id = id;
   5       -      this.Name = name;
   6    5       this.HP = 1 + STVRogue.Utils.RNG.Next(6);
   7    6   }
   8    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#23">
      <Code>
   1    1   public Monster(int id, string name)
   2    2   {
   3    3       this.STVRogue.GameLogic.Creature();
   4    4       this.Id = id;
   5       -      this.Name = name;
   6    5       this.HP = 1 + STVRogue.Utils.RNG.Next(6);
   7    6   }
   8    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#24">
      <Code>
   1    1   public Monster(int id, string name)
   2    2   {
   3    3       this.STVRogue.GameLogic.Creature();
   4    4       this.Id = id;
   5    5       this.Name = name;
   6       -      this.HP = 1 + STVRogue.Utils.RNG.Next(6);
   7    6   }
   8    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#24">
      <Code>
   1    1   public Monster(int id, string name)
   2    2   {
   3    3       this.STVRogue.GameLogic.Creature();
   4    4       this.Id = id;
   5    5       this.Name = name;
   6       -      this.HP = 1 + STVRogue.Utils.RNG.Next(6);
   7    6   }
   8    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#178">
      <Code>
   1    1   public Monster(int id, string name)
   2    2   {
   3    3       this.STVRogue.GameLogic.Creature();
   4    4       this.Id = id;
   5    5       this.Name = name;
   6       -      this.HP = 1 + STVRogue.Utils.RNG.Next(6);
        6  +      this.HP = STVRogue.Utils.RNG.Next(6);
   7    7   }
   8    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#173">
      <Code>
   1    1   public Monster(int id, string name)
   2    2   {
   3    3       this.STVRogue.GameLogic.Creature();
   4    4       this.Id = id;
   5    5       this.Name = name;
   6       -      this.HP = 1 + STVRogue.Utils.RNG.Next(6);
        6  +      this.HP = 1 - STVRogue.Utils.RNG.Next(6);
   7    7   }
   8    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#176">
      <Code>
   1    1   public Monster(int id, string name)
   2    2   {
   3    3       this.STVRogue.GameLogic.Creature();
   4    4       this.Id = id;
   5    5       this.Name = name;
   6       -      this.HP = 1 + STVRogue.Utils.RNG.Next(6);
        6  +      this.HP = 1 % STVRogue.Utils.RNG.Next(6);
   7    7   }
   8    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#1">
      <Code>
   1    1   public Node()
   2    2   {
   3       -      this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    3       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    4       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    5       this.object();
   7    6   }
   8    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#1">
      <Code>
   1    1   public Node()
   2    2   {
   3       -      this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    3       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    4       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    5       this.object();
   7    6   }
   8    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#2">
      <Code>
   1    1   public Node()
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4       -      this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    4       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    5       this.object();
   7    6   }
   8    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#2">
      <Code>
   1    1   public Node()
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4       -      this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    4       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    5       this.object();
   7    6   }
   8    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#3">
      <Code>
   1    1   public Node()
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5       -      this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    5       this.object();
   7    6   }
   8    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#3">
      <Code>
   1    1   public Node()
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5       -      this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    5       this.object();
   7    6   }
   8    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#28">
      <Code>
   1    1   public Node()
   2    2   {
   3       -      this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
        3  +      new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    5       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    6       this.object();
   7    7   }
   8    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#29">
      <Code>
   1    1   public Node()
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4       -      this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
        4  +      new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    5       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    6       this.object();
   7    7   }
   8    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#30">
      <Code>
   1    1   public Node()
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5       -      this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
        5  +      new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    6       this.object();
   7    7   }
   8    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#4">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3       -      this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    3       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    4       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    5       this.object();
   7    6       this.Id = id;
   8    7   }
   9    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#4">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3       -      this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    3       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    4       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    5       this.object();
   7    6       this.Id = id;
   8    7   }
   9    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#4">
      <Code>
   1    1   public Node()
   2    2   {
   3       -      this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
        3  +      this.Neighbors = this.Neighbors;
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    5       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    6       this.object();
   7    7   }
   8    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#31">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3       -      this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
        3  +      new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    5       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    6       this.object();
   7    7       this.Id = id;
   8    8   }
   9    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#32">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4       -      this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
        4  +      new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    5       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    6       this.object();
   7    7       this.Id = id;
   8    8   }
   9    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#33">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5       -      this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
        5  +      new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    6       this.object();
   7    7       this.Id = id;
   8    8   }
   9    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#34">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    5       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    6       this.object();
   7       -      this.Id = id;
        7  +      id;
   8    8   }
   9    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#5">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4       -      this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    4       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    5       this.object();
   7    6       this.Id = id;
   8    7   }
   9    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#5">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4       -      this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    4       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    5       this.object();
   7    6       this.Id = id;
   8    7   }
   9    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#5">
      <Code>
   1    1   public Node()
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4       -      this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
        4  +      this.Packs = this.Packs;
   5    5       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    6       this.object();
   7    7   }
   8    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#6">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5       -      this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    5       this.object();
   7    6       this.Id = id;
   8    7   }
   9    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#6">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5       -      this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    5       this.object();
   7    6       this.Id = id;
   8    7   }
   9    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#6">
      <Code>
   1    1   public Node()
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5       -      this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
        5  +      this.Items = this.Items;
   6    6       this.object();
   7    7   }
   8    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#7">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    5       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    6       this.object();
   7       -      this.Id = id;
   8    7   }
   9    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#7">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    5       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    6       this.object();
   7       -      this.Id = id;
   8    7   }
   9    8   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#7">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3       -      this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
        3  +      this.Neighbors = this.Neighbors;
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    5       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    6       this.object();
   7    7       this.Id = id;
   8    8   }
   9    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#8">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4       -      this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
        4  +      this.Packs = this.Packs;
   5    5       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    6       this.object();
   7    7       this.Id = id;
   8    8   }
   9    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#9">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5       -      this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
        5  +      this.Items = this.Items;
   6    6       this.object();
   7    7       this.Id = id;
   8    8   }
   9    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#10">
      <Code>
   1    1   public Node(int id)
   2    2   {
   3    3       this.Neighbors = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;(4);
   4    4       this.Packs = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;();
   5    5       this.Items = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   6    6       this.object();
   7       -      this.Id = id;
        7  +      this.Id = this.Id;
   8    8   }
   9    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#61">
      <Code>
   1    1   public virtual int Capacity()
   2    2   {
   3       -      return this.Dungeon.M * (this.Level() + 1);
        3  +      return this.Level() + 1;
   4    4   
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#63">
      <Code>
   1    1   public virtual int Capacity()
   2    2   {
   3       -      return this.Dungeon.M * (this.Level() + 1);
        3  +      return this.Dungeon.M * 1;
   4    4   
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#64">
      <Code>
   1    1   public virtual int Capacity()
   2    2   {
   3       -      return this.Dungeon.M * (this.Level() + 1);
        3  +      return this.Dungeon.M * this.Level();
   4    4   
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#45">
      <Code>
   1    1   public virtual int Capacity()
   2    2   {
   3       -      return this.Dungeon.M * (this.Level() + 1);
        3  +      return this.Dungeon.M;
   4    4   
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#46">
      <Code>
   1    1   public virtual int Capacity()
   2    2   {
   3       -      return this.Dungeon.M * (this.Level() + 1);
        3  +      return this.Level() + 1;
   4    4   
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#42">
      <Code>
   1    1   public virtual int Capacity()
   2    2   {
   3       -      return this.Dungeon.M * (this.Level() + 1);
        3  +      return this.Dungeon.M - this.Level() + 1;
   4    4   
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#49">
      <Code>
   1    1   public virtual int Capacity()
   2    2   {
   3       -      return this.Dungeon.M * (this.Level() + 1);
        3  +      return this.Dungeon.M * this.Level() / 1;
   4    4   
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#48">
      <Code>
   1    1   public virtual int Capacity()
   2    2   {
   3       -      return this.Dungeon.M * (this.Level() + 1);
        3  +      return this.Dungeon.M * this.Level() * 1;
   4    4   
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#47">
      <Code>
   1    1   public virtual int Capacity()
   2    2   {
   3       -      return this.Dungeon.M * (this.Level() + 1);
        3  +      return this.Dungeon.M * (this.Level() - 1);
   4    4   
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#51">
      <Code>
   1    1   public virtual int Capacity()
   2    2   {
   3       -      return this.Dungeon.M * (this.Level() + 1);
        3  +      return this.Dungeon.M * this.Level();
   4    4   
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#73">
      <Code>
   1    1   public void Connect(STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       if (this.Neighbors.Contains(nd) || nd.Neighbors.Contains(this))
   4    4       {
   5    5           throw new System.InvalidOperationException("Node already (partially) connected...");
   6    6       }
   7       -      if (this.Neighbors.Count &gt;= 4)
        7  +      if (false)
   8    8       {
   9    9           throw new System.InvalidOperationException("Maximum connectivity is 4");
  10   10       }
  11   11       this.Neighbors.Add(nd);
  12   12       nd.Neighbors.Add(this);
  13   13   }
  14   14   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#75">
      <Code>
   1    1   public void Connect(STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       if (this.Neighbors.Contains(nd) || nd.Neighbors.Contains(this))
   4    4       {
   5    5           throw new System.InvalidOperationException("Node already (partially) connected...");
   6    6       }
   7       -      if (this.Neighbors.Count &gt;= 4)
        7  +      if (this.Neighbors.Count &gt; 4)
   8    8       {
   9    9           throw new System.InvalidOperationException("Maximum connectivity is 4");
  10   10       }
  11   11       this.Neighbors.Add(nd);
  12   12       nd.Neighbors.Add(this);
  13   13   }
  14   14   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#17">
      <Code>
   1    1   public void Connect(STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       if (this.Neighbors.Contains(nd) || nd.Neighbors.Contains(this))
   4    4       {
   5    5           throw new System.InvalidOperationException("Node already (partially) connected...");
   6    6       }
   7       -      if (this.Neighbors.Count &gt;= 4)
        7  +      if (this.Neighbors.Capacity &gt;= 4)
   8    8       {
   9    9           throw new System.InvalidOperationException("Maximum connectivity is 4");
  10   10       }
  11   11       this.Neighbors.Add(nd);
  12   12       nd.Neighbors.Add(this);
  13   13   }
  14   14   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#46">
      <Code>
   1    1   public void Connect(STVRogue.GameLogic.Node nd)
   2    2   {
   3       -      if (this.Neighbors.Contains(nd) || nd.Neighbors.Contains(this))
        3  +      if (this.Neighbors.Contains(nd))
   4    4       {
   5    5           throw new System.InvalidOperationException("Node already (partially) connected...");
   6    6       }
   7    7       if (this.Neighbors.Count &gt;= 4)
   8    8       {
   9    9           throw new System.InvalidOperationException("Maximum connectivity is 4");
  10   10       }
  11   11       this.Neighbors.Add(nd);
  12   12       nd.Neighbors.Add(this);
  13   13   }
  14   14   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#80">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player)
   2    2   {
   3       -      this.Fight(player, (System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt; data) =&gt; STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Pack&gt;(data));
        3  +      push this;
        4  +      push player;
        5  +      if (false)
        6  +      {
        7  +          STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Fight&gt;b__0;
        8  +      }
        9  +      pop.Fight(pop, STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
   4   10   }
   5   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#79">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player)
   2    2   {
   3       -      this.Fight(player, (System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt; data) =&gt; STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Pack&gt;(data));
        3  +      push this;
        4  +      push player;
        5  +      if (true)
        6  +      {
        7  +          STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Fight&gt;b__0;
        8  +      }
        9  +      pop.Fight(pop, STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
   4   10   }
   5   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#86">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
   8       -          if (this.Packs.Count == 0)
        8  +      IL_000c:
        9  +          if (this.Packs.Count &lt;= 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17   18           if (this.Packs.Count == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27   28               if (this.Packs.Count == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#93">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17       -          if (this.Packs.Count == 0)
       18  +          if (this.Packs.Count &lt;= 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27   28               if (this.Packs.Count == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#90">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17       -          if (this.Packs.Count == 0)
       18  +          if (false)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27   28               if (this.Packs.Count == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#91">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17       -          if (this.Packs.Count == 0)
       18  +          if (this.Packs.Count &lt; 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27   28               if (this.Packs.Count == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#18">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
   8       -          if (this.Packs.Count == 0)
        8  +      IL_000c:
        9  +          if (this.Packs.Capacity == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17   18           if (this.Packs.Count == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27   28               if (this.Packs.Count == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#98">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17   18           if (this.Packs.Count == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27       -              if (this.Packs.Count == 0)
       28  +              if (this.Packs.Count &lt; 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#97">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17   18           if (this.Packs.Count == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27       -              if (this.Packs.Count == 0)
       28  +              if (false)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#96">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17   18           if (this.Packs.Count == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27       -              if (this.Packs.Count == 0)
       28  +              if (true)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#19">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17       -          if (this.Packs.Count == 0)
       18  +          if (this.Packs.Capacity == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27   28               if (this.Packs.Count == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#20">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17   18           if (this.Packs.Count == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27       -              if (this.Packs.Count == 0)
       28  +              if (this.Packs.Capacity == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#52">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
   8       -          if (this.Packs.Count == 0)
        8  +      IL_000c:
        9  +          if (this.Packs.Count)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17   18           if (this.Packs.Count == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27   28               if (this.Packs.Count == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#51">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
   8       -          if (this.Packs.Count == 0)
        8  +      IL_000c:
        9  +          if (0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17   18           if (this.Packs.Count == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27   28               if (this.Packs.Count == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#53">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17       -          if (this.Packs.Count == 0)
       18  +          if (0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27   28               if (this.Packs.Count == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#56">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17   18           if (this.Packs.Count == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27       -              if (this.Packs.Count == 0)
       28  +              if (this.Packs.Count)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#35">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player)
   2    2   {
   3       -      this.Fight(player, (System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt; data) =&gt; STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Pack&gt;(data));
        3  +      push this;
        4  +      push player;
        5  +      if (STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 == default(System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt;))
        6  +      {
        7  +          &lt;Fight&gt;b__0;
        8  +      }
        9  +      pop.Fight(pop, STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
   4   10   }
   5   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#37">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15       -          target = player.ChooseTarget(this.Packs);
       16  +          player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17   18           if (this.Packs.Count == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27   28               if (this.Packs.Count == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#38">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17   18           if (this.Packs.Count == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23       -          pack = choosepack(this.Packs);
       24  +          choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27   28               if (this.Packs.Count == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#39">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17   18           if (this.Packs.Count == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24       -          log = string.Concat(log, (object)3);
       25  +          string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27   28               if (this.Packs.Count == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#40">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17   18           if (this.Packs.Count == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27   28               if (this.Packs.Count == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33       -              log = string.Concat(log, (object)4);
       34  +              string.Concat(log, (object)4);
  34   35               pack = choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#41">
      <Code>
   1    1   public void Fight(STVRogue.GameLogic.Player player, System.Func&lt;System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;, STVRogue.GameLogic.Pack&gt; choosepack)
   2    2   {
   3    3       string log = "Fight path: ";
   4       -      while (!player.IsDead)
        4  +      goto IL_00f4;
   5    5       {
   6    6           STVRogue.GameLogic.Monster target;
   7    7           STVRogue.GameLogic.Pack pack;
        8  +      IL_000c:
   8    9           if (this.Packs.Count == 0)
   9   10           {
  10   11               STVRogue.Utils.Logger.Log(log);
  11   12               return;
  12   13   
  13   14           }
  14   15           log = string.Concat(log, (object)0);
  15   16           target = player.ChooseTarget(this.Packs);
  16   17           player.Attack(target);
  17   18           if (this.Packs.Count == 0)
  18   19           {
  19   20               STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  20   21               return;
  21   22   
  22   23           }
  23   24           pack = choosepack(this.Packs);
  24   25           log = string.Concat(log, (object)3);
  25   26           if (pack.Flees())
  26   27           {
  27   28               if (this.Packs.Count == 0)
  28   29               {
  29   30                   STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  30   31                   return;
  31   32   
  32   33               }
  33   34               log = string.Concat(log, (object)4);
  34       -              pack = choosepack(this.Packs);
       35  +              choosepack(this.Packs);
  35   36           }
  36   37           pack.Attack(player);
  37   38       }
       39  +  IL_00f4:
       40  +      if (!player.IsDead)
       41  +          goto IL_000c;
  38   42       STVRogue.Utils.Logger.Log(string.Concat(log, (object)6));
  39   43   }
  40   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#68">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#67">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#66">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#41">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#42">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#43">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#105">
      <Code>
   1    1   public int Level()
   2    2   {
   3    3       if (!this.IsBridge)
   4    4       {
   5    5           return 0;
   6    6   
   7    7       }
   8       -      return System.Linq.Enumerable.Count&lt;STVRogue.GameLogic.Node&gt;(this.Dungeon.Shortestpath(this, this.Dungeon.StartNode), (STVRogue.GameLogic.Node i) =&gt; i.IsBridge) + 1;
        8  +      push this.Dungeon.Shortestpath(this, this.Dungeon.StartNode);
        9  +      if (STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3 != default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       10  +      {
       11  +          STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3 = &lt;Level&gt;b__2;
       12  +      }
       13  +      return System.Linq.Enumerable.Count&lt;STVRogue.GameLogic.Node&gt;(pop, STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3) + 1;
   9   14   
  10   15   }
  11   16   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#58">
      <Code>
   1    1   public int Level()
   2    2   {
   3    3       if (!this.IsBridge)
   4    4       {
   5    5           return 0;
   6    6   
   7    7       }
   8       -      return System.Linq.Enumerable.Count&lt;STVRogue.GameLogic.Node&gt;(this.Dungeon.Shortestpath(this, this.Dungeon.StartNode), (STVRogue.GameLogic.Node i) =&gt; i.IsBridge) + 1;
        8  +      push this.Dungeon.Shortestpath(this, this.Dungeon.StartNode);
        9  +      if (STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3)
       10  +      {
       11  +          STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3 = &lt;Level&gt;b__2;
       12  +      }
       13  +      return System.Linq.Enumerable.Count&lt;STVRogue.GameLogic.Node&gt;(pop, STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3) + 1;
   9   14   
  10   15   }
  11   16   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#60">
      <Code>
   1    1   public int Level()
   2    2   {
   3    3       if (!this.IsBridge)
   4    4       {
   5    5           return 0;
   6    6   
   7    7       }
   8       -      return System.Linq.Enumerable.Count&lt;STVRogue.GameLogic.Node&gt;(this.Dungeon.Shortestpath(this, this.Dungeon.StartNode), (STVRogue.GameLogic.Node i) =&gt; i.IsBridge) + 1;
        8  +      push this.Dungeon.Shortestpath(this, this.Dungeon.StartNode);
        9  +      if (STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       10  +      {
       11  +          STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3 = &lt;Level&gt;b__2;
       12  +      }
       13  +      return System.Linq.Enumerable.Count&lt;STVRogue.GameLogic.Node&gt;(pop, STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3);
   9   14   
  10   15   }
  11   16   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#59">
      <Code>
   1    1   public int Level()
   2    2   {
   3    3       if (!this.IsBridge)
   4    4       {
   5    5           return 0;
   6    6   
   7    7       }
   8       -      return System.Linq.Enumerable.Count&lt;STVRogue.GameLogic.Node&gt;(this.Dungeon.Shortestpath(this, this.Dungeon.StartNode), (STVRogue.GameLogic.Node i) =&gt; i.IsBridge) + 1;
        8  +      push this.Dungeon.Shortestpath(this, this.Dungeon.StartNode);
        9  +      if (STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       10  +      {
       11  +          STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3 = &lt;Level&gt;b__2;
       12  +      }
       13  +      return 1;
   9   14   
  10   15   }
  11   16   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#42">
      <Code>
   1    1   public int Level()
   2    2   {
   3    3       if (!this.IsBridge)
   4    4       {
   5    5           return 0;
   6    6   
   7    7       }
   8       -      return System.Linq.Enumerable.Count&lt;STVRogue.GameLogic.Node&gt;(this.Dungeon.Shortestpath(this, this.Dungeon.StartNode), (STVRogue.GameLogic.Node i) =&gt; i.IsBridge) + 1;
        8  +      push this.Dungeon.Shortestpath(this, this.Dungeon.StartNode);
        9  +      if (STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       10  +      {
       11  +          &lt;Level&gt;b__2;
       12  +      }
       13  +      return System.Linq.Enumerable.Count&lt;STVRogue.GameLogic.Node&gt;(pop, STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3) + 1;
   9   14   
  10   15   }
  11   16   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#36">
      <Code>
   1    1   public int Level()
   2    2   {
   3    3       if (!this.IsBridge)
   4    4       {
   5    5           return 0;
   6    6   
   7    7       }
   8       -      return System.Linq.Enumerable.Count&lt;STVRogue.GameLogic.Node&gt;(this.Dungeon.Shortestpath(this, this.Dungeon.StartNode), (STVRogue.GameLogic.Node i) =&gt; i.IsBridge) + 1;
        8  +      push this.Dungeon.Shortestpath(this, this.Dungeon.StartNode);
        9  +      if (STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       10  +      {
       11  +          STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3 = &lt;Level&gt;b__2;
       12  +      }
       13  +      return System.Linq.Enumerable.Count&lt;STVRogue.GameLogic.Node&gt;(pop, STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3) * 1;
   9   14   
  10   15   }
  11   16   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#40">
      <Code>
   1    1   public int Level()
   2    2   {
   3    3       if (!this.IsBridge)
   4    4       {
   5    5           return 0;
   6    6   
   7    7       }
   8       -      return System.Linq.Enumerable.Count&lt;STVRogue.GameLogic.Node&gt;(this.Dungeon.Shortestpath(this, this.Dungeon.StartNode), (STVRogue.GameLogic.Node i) =&gt; i.IsBridge) + 1;
        8  +      push this.Dungeon.Shortestpath(this, this.Dungeon.StartNode);
        9  +      if (STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       10  +      {
       11  +          STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3 = &lt;Level&gt;b__2;
       12  +      }
       13  +      return 1;
   9   14   
  10   15   }
  11   16   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#38">
      <Code>
   1    1   public int Level()
   2    2   {
   3    3       if (!this.IsBridge)
   4    4       {
   5    5           return 0;
   6    6   
   7    7       }
   8       -      return System.Linq.Enumerable.Count&lt;STVRogue.GameLogic.Node&gt;(this.Dungeon.Shortestpath(this, this.Dungeon.StartNode), (STVRogue.GameLogic.Node i) =&gt; i.IsBridge) + 1;
        8  +      push this.Dungeon.Shortestpath(this, this.Dungeon.StartNode);
        9  +      if (STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3 == default(System.Func&lt;STVRogue.GameLogic.Node, bool&gt;))
       10  +      {
       11  +          STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3 = &lt;Level&gt;b__2;
       12  +      }
       13  +      return System.Linq.Enumerable.Count&lt;STVRogue.GameLogic.Node&gt;(pop, STVRogue.GameLogic.Node.CS$&lt;&gt;9__CachedAnonymousMethodDelegate3) % 1;
   9   14   
  10   15   }
  11   16   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#11">
      <Code>
   1    1   public int MonsterCount()
   2    2   {
   3    3       int amount = 0;
   4       -      foreach (STVRogue.GameLogic.Pack p in this.Packs)
        4  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;.Enumerator CS$5$0001 = this.Packs.GetEnumerator())
        5  +      {
        6  +          goto IL_0028;
   5    7           {
   6       -          amount += p.Members.Count;
        8  +          IL_0012:
        9  +              STVRogue.GameLogic.Pack p = CS$5$0001.Current;
       10  +              amount = this.Id;
       11  +          }
       12  +      IL_0028:
       13  +          if (CS$5$0001.MoveNext())
       14  +              goto IL_0012;
   7   15       }
   8   16       return amount;
   9   17   
  10   18   }
  11   19   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#21">
      <Code>
   1    1   public int MonsterCount()
   2    2   {
   3    3       int amount = 0;
   4       -      foreach (STVRogue.GameLogic.Pack p in this.Packs)
        4  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;.Enumerator CS$5$0001 = this.Packs.GetEnumerator())
        5  +      {
        6  +          goto IL_0028;
   5    7           {
        8  +          IL_0012:
        9  +              STVRogue.GameLogic.Pack p = CS$5$0001.System.Collections.IEnumerator.get_Current();
   6   10               amount += p.Members.Count;
       11  +          }
       12  +      IL_0028:
       13  +          if (CS$5$0001.MoveNext())
       14  +              goto IL_0012;
   7   15       }
   8   16       return amount;
   9   17   
  10   18   }
  11   19   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#22">
      <Code>
   1    1   public int MonsterCount()
   2    2   {
   3    3       int amount = 0;
   4       -      foreach (STVRogue.GameLogic.Pack p in this.Packs)
        4  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;.Enumerator CS$5$0001 = this.Packs.GetEnumerator())
        5  +      {
        6  +          goto IL_0028;
   5    7           {
   6       -          amount += p.Members.Count;
        8  +          IL_0012:
        9  +              STVRogue.GameLogic.Pack p = CS$5$0001.Current;
       10  +              amount += p.Members.Capacity;
       11  +          }
       12  +      IL_0028:
       13  +          if (CS$5$0001.MoveNext())
       14  +              goto IL_0012;
   7   15       }
   8   16       return amount;
   9   17   
  10   18   }
  11   19   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#66">
      <Code>
   1    1   public int MonsterCount()
   2    2   {
   3    3       int amount = 0;
   4       -      foreach (STVRogue.GameLogic.Pack p in this.Packs)
        4  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;.Enumerator CS$5$0001 = this.Packs.GetEnumerator())
        5  +      {
        6  +          goto IL_0028;
   5    7           {
   6       -          amount += p.Members.Count;
        8  +          IL_0012:
        9  +              STVRogue.GameLogic.Pack p = CS$5$0001.Current;
       10  +              amount = amount;
       11  +          }
       12  +      IL_0028:
       13  +          if (CS$5$0001.MoveNext())
       14  +              goto IL_0012;
   7   15       }
   8   16       return amount;
   9   17   
  10   18   }
  11   19   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#65">
      <Code>
   1    1   public int MonsterCount()
   2    2   {
   3    3       int amount = 0;
   4       -      foreach (STVRogue.GameLogic.Pack p in this.Packs)
        4  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;.Enumerator CS$5$0001 = this.Packs.GetEnumerator())
        5  +      {
        6  +          goto IL_0028;
   5    7           {
   6       -          amount += p.Members.Count;
        8  +          IL_0012:
        9  +              STVRogue.GameLogic.Pack p = CS$5$0001.Current;
       10  +              amount = p.Members.Count;
       11  +          }
       12  +      IL_0028:
       13  +          if (CS$5$0001.MoveNext())
       14  +              goto IL_0012;
   7   15       }
   8   16       return amount;
   9   17   
  10   18   }
  11   19   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#55">
      <Code>
   1    1   public int MonsterCount()
   2    2   {
   3    3       int amount = 0;
   4       -      foreach (STVRogue.GameLogic.Pack p in this.Packs)
        4  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;.Enumerator CS$5$0001 = this.Packs.GetEnumerator())
        5  +      {
        6  +          goto IL_0028;
   5    7           {
   6       -          amount += p.Members.Count;
        8  +          IL_0012:
        9  +              STVRogue.GameLogic.Pack p = CS$5$0001.Current;
       10  +              amount /= p.Members.Count;
       11  +          }
       12  +      IL_0028:
       13  +          if (CS$5$0001.MoveNext())
       14  +              goto IL_0012;
   7   15       }
   8   16       return amount;
   9   17   
  10   18   }
  11   19   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#58">
      <Code>
   1    1   public int MonsterCount()
   2    2   {
   3    3       int amount = 0;
   4       -      foreach (STVRogue.GameLogic.Pack p in this.Packs)
        4  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;.Enumerator CS$5$0001 = this.Packs.GetEnumerator())
        5  +      {
        6  +          goto IL_0028;
   5    7           {
   6       -          amount += p.Members.Count;
        8  +          IL_0012:
        9  +              STVRogue.GameLogic.Pack p = CS$5$0001.Current;
       10  +              amount = p.Members.Count;
       11  +          }
       12  +      IL_0028:
       13  +          if (CS$5$0001.MoveNext())
       14  +              goto IL_0012;
   7   15       }
   8   16       return amount;
   9   17   
  10   18   }
  11   19   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#56">
      <Code>
   1    1   public int MonsterCount()
   2    2   {
   3    3       int amount = 0;
   4       -      foreach (STVRogue.GameLogic.Pack p in this.Packs)
        4  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;.Enumerator CS$5$0001 = this.Packs.GetEnumerator())
        5  +      {
        6  +          goto IL_0028;
   5    7           {
   6       -          amount += p.Members.Count;
        8  +          IL_0012:
        9  +              STVRogue.GameLogic.Pack p = CS$5$0001.Current;
       10  +              amount %= p.Members.Count;
       11  +          }
       12  +      IL_0028:
       13  +          if (CS$5$0001.MoveNext())
       14  +              goto IL_0012;
   7   15       }
   8   16       return amount;
   9   17   
  10   18   }
  11   19   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#53">
      <Code>
   1    1   public int MonsterCount()
   2    2   {
   3    3       int amount = 0;
   4       -      foreach (STVRogue.GameLogic.Pack p in this.Packs)
        4  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt;.Enumerator CS$5$0001 = this.Packs.GetEnumerator())
        5  +      {
        6  +          goto IL_0028;
   5    7           {
   6       -          amount += p.Members.Count;
        8  +          IL_0012:
        9  +              STVRogue.GameLogic.Pack p = CS$5$0001.Current;
       10  +              amount -= p.Members.Count;
       11  +          }
       12  +      IL_0028:
       13  +          if (CS$5$0001.MoveNext())
       14  +              goto IL_0012;
   7   15       }
   8   16       return amount;
   9   17   
  10   18   }
  11   19   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#15">
      <Code>
   1    1   public override int Capacity()
   2    2   {
   3       -      if (this.MockCapacity.HasValue)
        3  +      if (this.MockCapacity.Value)
   4    4       {
   5    5           return this.MockCapacity.Value;
   6    6   
   7    7       }
   8    8       return this.Capacity();
   9    9   
  10   10   }
  11   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#16">
      <Code>
   1    1   public override int Capacity()
   2    2   {
   3    3       if (this.MockCapacity.HasValue)
   4    4       {
   5       -          return this.MockCapacity.Value;
        5  +          return this.MockCapacity.HasValue;
   6    6   
   7    7       }
   8    8       return this.Capacity();
   9    9   
  10   10   }
  11   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#18">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3       -      this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    3       this.object();
   5    4       this.Id = id;
   6    5       this.StartingHP = 0;
   7    6       {
   8       -          for (int i = 0; i &lt; n; ++i)
        7  +          int i = 0;
        8  +          goto IL_0071;
   9    9           {
       10  +          IL_0026:
  10   11               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   12               this.Members.Add(m);
  12   13               m.Pack = this;
  13   14               this.StartingHP = dup.StartingHP + m.HP;
  14   15           }
       16  +          ++i;
       17  +      IL_0071:
       18  +          if (i &lt; n)
       19  +              goto IL_0026;
  15   20       }
  16   21   }
  17   22   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#18">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3       -      this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    3       this.object();
   5    4       this.Id = id;
   6    5       this.StartingHP = 0;
   7    6       {
   8       -          for (int i = 0; i &lt; n; ++i)
        7  +          int i = 0;
        8  +          goto IL_0071;
   9    9           {
       10  +          IL_0026:
  10   11               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   12               this.Members.Add(m);
  12   13               m.Pack = this;
  13   14               this.StartingHP = dup.StartingHP + m.HP;
  14   15           }
       16  +          ++i;
       17  +      IL_0071:
       18  +          if (i &lt; n)
       19  +              goto IL_0026;
  15   20       }
  16   21   }
  17   22   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#19">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5       -      this.Id = id;
   6    5       this.StartingHP = 0;
   7    6       {
   8       -          for (int i = 0; i &lt; n; ++i)
        7  +          int i = 0;
        8  +          goto IL_0071;
   9    9           {
       10  +          IL_0026:
  10   11               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   12               this.Members.Add(m);
  12   13               m.Pack = this;
  13   14               this.StartingHP = dup.StartingHP + m.HP;
  14   15           }
       16  +          ++i;
       17  +      IL_0071:
       18  +          if (i &lt; n)
       19  +              goto IL_0026;
  15   20       }
  16   21   }
  17   22   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#19">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5       -      this.Id = id;
   6    5       this.StartingHP = 0;
   7    6       {
   8       -          for (int i = 0; i &lt; n; ++i)
        7  +          int i = 0;
        8  +          goto IL_0071;
   9    9           {
       10  +          IL_0026:
  10   11               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   12               this.Members.Add(m);
  12   13               m.Pack = this;
  13   14               this.StartingHP = dup.StartingHP + m.HP;
  14   15           }
       16  +          ++i;
       17  +      IL_0071:
       18  +          if (i &lt; n)
       19  +              goto IL_0026;
  15   20       }
  16   21   }
  17   22   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#132">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13       -              this.StartingHP = dup.StartingHP + m.HP;
       15  +              this.StartingHP = dup.StartingHP * m.HP;
  14   16           }
       17  +          ++i;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#136">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13       -              this.StartingHP = dup.StartingHP + m.HP;
       15  +              this.StartingHP = m.HP;
  14   16           }
       17  +          ++i;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#135">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13       -              this.StartingHP = dup.StartingHP + m.HP;
       15  +              this.StartingHP = dup.StartingHP;
  14   16           }
       17  +          ++i;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#138">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          i *= 1;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#137">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          --i;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#141">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          i = i;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#30">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13       -              this.StartingHP = dup.StartingHP + m.HP;
       15  +              this.StartingHP = dup.IsEmpty + m.HP;
  14   16           }
       17  +          ++i;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#178">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          ++i;
       18  +      IL_0071:
       19  +          if (false)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#41">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3       -      this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
        3  +      this.Members = this.Members;
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          ++i;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#42">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5       -      this.Id = id;
        5  +      this.Id = this.Id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          ++i;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#43">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          i = this.Id;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#121">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13       -              this.StartingHP = dup.StartingHP + m.HP;
       15  +              this.StartingHP = m.HP;
  14   16           }
       17  +          ++i;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#122">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13       -              this.StartingHP = dup.StartingHP + m.HP;
       15  +              this.StartingHP = dup.StartingHP;
  14   16           }
       17  +          ++i;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#123">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          i = 1;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#124">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          i = i;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#126">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          ++i;
       18  +      IL_0071:
       19  +          if (i)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#125">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          ++i;
       18  +      IL_0071:
       19  +          if (n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#94">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3       -      this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
        3  +      new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          ++i;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#95">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5       -      this.Id = id;
        5  +      id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          ++i;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#96">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12       -              m.Pack = this;
       14  +              this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          ++i;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#97">
      <Code>
   1    1   public Pack(int id, int n)
   2    2   {
   3    3       this.Members = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;();
   4    4       this.object();
   5    5       this.Id = id;
   6    6       this.StartingHP = 0;
   7    7       {
   8       -          for (int i = 0; i &lt; n; ++i)
        8  +          int i = 0;
        9  +          goto IL_0071;
   9   10           {
       11  +          IL_0026:
  10   12               STVRogue.GameLogic.Monster m = new STVRogue.GameLogic.Monster(i, string.Concat((object)id, "_", (object)i));
  11   13               this.Members.Add(m);
  12   14               m.Pack = this;
  13   15               this.StartingHP = dup.StartingHP + m.HP;
  14   16           }
       17  +          i + 1;
       18  +      IL_0071:
       19  +          if (i &lt; n)
       20  +              goto IL_0026;
  15   21       }
  16   22   }
  17   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ISD#3">
      <Code>
   1    1   public void Attack(STVRogue.GameLogic.Player p)
   2    2   {
   3    3       using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0000 = this.Members.GetEnumerator())
   4    4       {
   5       -          while (CS$5$0000.MoveNext())
        5  +          goto IL_0031;
   6    6           {
        7  +          IL_0010:
   7    8               STVRogue.GameLogic.Monster m = CS$5$0000.Current;
   8       -              m.Attack(p);
   9    9               if (p.IsDead)
  10   10               {
  11   11                   goto IL_003c;
  12   12               }
  13   13           }
       14  +      IL_0031:
       15  +          if (CS$5$0000.MoveNext())
       16  +              goto IL_0010;
  14   17       IL_003c:
  15   18       }
  16   19   }
  17   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#31">
      <Code>
   1    1   public void Attack(STVRogue.GameLogic.Player p)
   2    2   {
   3    3       using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0000 = this.Members.GetEnumerator())
   4    4       {
   5       -          while (CS$5$0000.MoveNext())
        5  +          goto IL_0031;
   6    6           {
   7       -              STVRogue.GameLogic.Monster m = CS$5$0000.Current;
        7  +          IL_0010:
        8  +              STVRogue.GameLogic.Monster m = CS$5$0000.System.Collections.IEnumerator.get_Current();
   8    9               m.Attack(p);
   9   10               if (p.IsDead)
  10   11               {
  11   12                   goto IL_003c;
  12   13               }
  13   14           }
       15  +      IL_0031:
       16  +          if (CS$5$0000.MoveNext())
       17  +              goto IL_0010;
  14   18       IL_003c:
  15   19       }
  16   20   }
  17   21   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#145">
      <Code>
   1    1   public bool CanMoveTo(STVRogue.GameLogic.Node u)
   2    2   {
   3    3       if (!this.Location.Neighbors.Contains(u))
   4    4       {
   5    5           throw new System.ArgumentException();
   6    6       }
   7       -      return !(u.Capacity() - u.MonsterCount() &lt; this.Members.Count);
        7  +      return !(u.Capacity() / u.MonsterCount() &lt; this.Members.Count);
   8    8   
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#32">
      <Code>
   1    1   public bool CanMoveTo(STVRogue.GameLogic.Node u)
   2    2   {
   3    3       if (!this.Location.Neighbors.Contains(u))
   4    4       {
   5    5           throw new System.ArgumentException();
   6    6       }
   7       -      return !(u.Capacity() - u.MonsterCount() &lt; this.Members.Count);
        7  +      return !(this.Location.Capacity() - u.MonsterCount() &lt; this.Members.Count);
   8    8   
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#33">
      <Code>
   1    1   public bool CanMoveTo(STVRogue.GameLogic.Node u)
   2    2   {
   3    3       if (!this.Location.Neighbors.Contains(u))
   4    4       {
   5    5           throw new System.ArgumentException();
   6    6       }
   7       -      return !(u.Capacity() - u.MonsterCount() &lt; this.Members.Count);
        7  +      return !(u.Capacity() - this.Location.MonsterCount() &lt; this.Members.Count);
   8    8   
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#34">
      <Code>
   1    1   public bool CanMoveTo(STVRogue.GameLogic.Node u)
   2    2   {
   3    3       if (!this.Location.Neighbors.Contains(u))
   4    4       {
   5    5           throw new System.ArgumentException();
   6    6       }
   7       -      return !(u.Capacity() - u.MonsterCount() &lt; this.Members.Count);
        7  +      return !(u.Capacity() - u.MonsterCount() &lt; this.Members.Capacity);
   8    8   
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#191">
      <Code>
   1    1   public bool CanMoveTo(STVRogue.GameLogic.Node u)
   2    2   {
   3    3       if (!this.Location.Neighbors.Contains(u))
   4    4       {
   5    5           throw new System.ArgumentException();
   6    6       }
   7       -      return !(u.Capacity() - u.MonsterCount() &lt; this.Members.Count);
        7  +      return !true;
   8    8   
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#197">
      <Code>
   1    1   public bool CanMoveTo(STVRogue.GameLogic.Node u)
   2    2   {
   3    3       if (!this.Location.Neighbors.Contains(u))
   4    4       {
   5    5           throw new System.ArgumentException();
   6    6       }
   7       -      return !(u.Capacity() - u.MonsterCount() &lt; this.Members.Count);
        7  +      return !(u.Capacity() - u.MonsterCount() != this.Members.Count);
   8    8   
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#192">
      <Code>
   1    1   public bool CanMoveTo(STVRogue.GameLogic.Node u)
   2    2   {
   3    3       if (!this.Location.Neighbors.Contains(u))
   4    4       {
   5    5           throw new System.ArgumentException();
   6    6       }
   7       -      return !(u.Capacity() - u.MonsterCount() &lt; this.Members.Count);
        7  +      return !false;
   8    8   
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#194">
      <Code>
   1    1   public bool CanMoveTo(STVRogue.GameLogic.Node u)
   2    2   {
   3    3       if (!this.Location.Neighbors.Contains(u))
   4    4       {
   5    5           throw new System.ArgumentException();
   6    6       }
   7       -      return !(u.Capacity() - u.MonsterCount() &lt; this.Members.Count);
        7  +      return !(u.Capacity() - u.MonsterCount() &lt;= this.Members.Count);
   8    8   
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#193">
      <Code>
   1    1   public bool CanMoveTo(STVRogue.GameLogic.Node u)
   2    2   {
   3    3       if (!this.Location.Neighbors.Contains(u))
   4    4       {
   5    5           throw new System.ArgumentException();
   6    6       }
   7       -      return !(u.Capacity() - u.MonsterCount() &lt; this.Members.Count);
        7  +      return !(u.Capacity() - u.MonsterCount() &gt; this.Members.Count);
   8    8   
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#130">
      <Code>
   1    1   public bool CanMoveTo(STVRogue.GameLogic.Node u)
   2    2   {
   3    3       if (!this.Location.Neighbors.Contains(u))
   4    4       {
   5    5           throw new System.ArgumentException();
   6    6       }
   7       -      return !(u.Capacity() - u.MonsterCount() &lt; this.Members.Count);
        7  +      return !(u.Capacity() - u.MonsterCount());
   8    8   
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#131">
      <Code>
   1    1   public bool CanMoveTo(STVRogue.GameLogic.Node u)
   2    2   {
   3    3       if (!this.Location.Neighbors.Contains(u))
   4    4       {
   5    5           throw new System.ArgumentException();
   6    6       }
   7       -      return !(u.Capacity() - u.MonsterCount() &lt; this.Members.Count);
        7  +      return !(u.MonsterCount() &lt; this.Members.Count);
   8    8   
   9    9   }
  10   10   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#151">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = (1 - this.CurrentHP / this.StartingHP) / 2 / 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#152">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = (1 - this.CurrentHP / this.StartingHP) / 2 % 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#149">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = (1 - this.CurrentHP / this.StartingHP) / 2 + 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#150">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = (1 - this.CurrentHP / this.StartingHP) / 2 - 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#158">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = (1 - this.CurrentHP / this.StartingHP) % 2 * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#159">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = (1 - this.CurrentHP / this.StartingHP) * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#160">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = 2 * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#166">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = this.CurrentHP / this.StartingHP / 2 * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#165">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = 1 / 2 * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#161">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = (1 + this.CurrentHP / this.StartingHP) / 2 * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#164">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = 1 % this.CurrentHP / this.StartingHP / 2 * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#169">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = (1 - this.CurrentHP * this.StartingHP) / 2 * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#171">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = (1 - this.CurrentHP) / 2 * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#167">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = (1 - this.CurrentHP + this.StartingHP) / 2 * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#35">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = (1 - this.StartingHP / this.StartingHP) / 2 * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#36">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = (1 - this.CurrentHP / this.IsEmpty) / 2 * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#200">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10   10       chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
  11       -      if (STVRogue.Utils.RNG.Next(100) &lt; chance)
       11  +      if (STVRogue.Utils.RNG.Next(100) &gt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#199">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10   10       chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
  11       -      if (STVRogue.Utils.RNG.Next(100) &lt; chance)
       11  +      if (false)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#45">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = this.Id;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#133">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = (1 - this.CurrentHP / this.StartingHP) / 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#136">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = (1 - this.CurrentHP / this.StartingHP) * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#137">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      chance = this.CurrentHP / this.StartingHP / 2 * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#141">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10   10       chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
  11       -      if (STVRogue.Utils.RNG.Next(100) &lt; chance)
       11  +      if (chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#142">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10   10       chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
  11       -      if (STVRogue.Utils.RNG.Next(100) &lt; chance)
       11  +      if (STVRogue.Utils.RNG.Next(100))
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#99">
      <Code>
   1    1   public virtual bool Flees()
   2    2   {
   3    3       int chance;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; options = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo));
   5    5       if (!System.Linq.Enumerable.Any&lt;STVRogue.GameLogic.Node&gt;(options))
   6    6       {
   7    7           return false;
   8    8   
   9    9       }
  10       -      chance = (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
       10  +      (1 - this.CurrentHP / this.StartingHP) / 2 * 100;
  11   11       if (STVRogue.Utils.RNG.Next(100) &lt; chance)
  12   12       {
  13   13           this.Move(STVRogue.Utils.Extensions.Random&lt;STVRogue.GameLogic.Node&gt;(options));
  14   14           return true;
  15   15   
  16   16       }
  17   17       return false;
  18   18   
  19   19   }
  20   20   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#206">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#143">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#144">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#33">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#185">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#184">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#186">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#190">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#127">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#44">
      <Code>
   1    1   public void Move(STVRogue.GameLogic.Node u)
   2    2   {
   3    3       if (!this.CanMoveTo(u))
   4    4       {
   5    5           STVRogue.Utils.Logger.Log(string.Format("Pack {0} is trying to move to already full node {1}. Rejected.", (object)this.Id, (object)u.Id));
   6    6           return;
   7    7   
   8    8       }
   9    9       STVRogue.Utils.Logger.Log(string.Format("Pack {0} moved from node {1} to node {2}. Accepted", (object)this.Id, (object)this.Location.Id, (object)u.Id));
  10   10       this.Location.Packs.Remove(this);
  11       -      this.Location = u;
       11  +      this.Location = this.Location;
  12   12       this.Location.Packs.Add(this);
  13   13   }
  14   14   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#98">
      <Code>
   1    1   public void Move(STVRogue.GameLogic.Node u)
   2    2   {
   3    3       if (!this.CanMoveTo(u))
   4    4       {
   5    5           STVRogue.Utils.Logger.Log(string.Format("Pack {0} is trying to move to already full node {1}. Rejected.", (object)this.Id, (object)u.Id));
   6    6           return;
   7    7   
   8    8       }
   9    9       STVRogue.Utils.Logger.Log(string.Format("Pack {0} moved from node {1} to node {2}. Accepted", (object)this.Id, (object)this.Location.Id, (object)u.Id));
  10   10       this.Location.Packs.Remove(this);
  11       -      this.Location = u;
       11  +      u;
  12   12       this.Location.Packs.Add(this);
  13   13   }
  14   14   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#32">
      <Code>
   1    1   public void MoveTowards(STVRogue.GameLogic.Node u)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path = this.Location.Dungeon.Shortestpath(this.Location, u);
   4       -      this.Move(path.Item[0]);
        4  +      this.Move(path.System.Collections.IList.get_Item(0));
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#40">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#93">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#37">
      <Code>
   1    1   public override bool Flees()
   2    2   {
   3       -      if (this.MockFlees.HasValue)
        3  +      if (this.MockFlees.Value)
   4    4       {
   5    5           if (this.MockFlees.Value)
   6    6           {
   7    7               this.Move(System.Linq.Enumerable.First&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo)));
   8    8           }
   9    9           return this.MockFlees.Value;
  10   10   
  11   11       }
  12   12       return this.Flees();
  13   13   
  14   14   }
  15   15   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#38">
      <Code>
   1    1   public override bool Flees()
   2    2   {
   3    3       if (this.MockFlees.HasValue)
   4    4       {
   5       -          if (this.MockFlees.Value)
        5  +          if (this.MockFlees.HasValue)
   6    6           {
   7    7               this.Move(System.Linq.Enumerable.First&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo)));
   8    8           }
   9    9           return this.MockFlees.Value;
  10   10   
  11   11       }
  12   12       return this.Flees();
  13   13   
  14   14   }
  15   15   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#39">
      <Code>
   1    1   public override bool Flees()
   2    2   {
   3    3       if (this.MockFlees.HasValue)
   4    4       {
   5    5           if (this.MockFlees.Value)
   6    6           {
   7    7               this.Move(System.Linq.Enumerable.First&lt;STVRogue.GameLogic.Node&gt;(System.Linq.Enumerable.Where&lt;STVRogue.GameLogic.Node&gt;(this.Location.Neighbors, this.CanMoveTo)));
   8    8           }
   9       -          return this.MockFlees.Value;
        9  +          return this.MockFlees.HasValue;
  10   10   
  11   11       }
  12   12       return this.Flees();
  13   13   
  14   14   }
  15   15   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#106">
      <Code>
   1    1   public Player()
   2    2   {
   3       -      this.HPbase = 100;
        3  +      100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9    9       this.AttackRating = 5;
  10   10       this.HP = this.HPbase;
  11   11   }
  12   12   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#107">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4       -      this.Accelerated = false;
        4  +      false;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9    9       this.AttackRating = 5;
  10   10       this.HP = this.HPbase;
  11   11   }
  12   12   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#108">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5       -      this.KillPoint = 0;
        5  +      0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9    9       this.AttackRating = 5;
  10   10       this.HP = this.HPbase;
  11   11   }
  12   12   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#109">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6       -      this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
        6  +      new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9    9       this.AttackRating = 5;
  10   10       this.HP = this.HPbase;
  11   11   }
  12   12   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#110">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8       -      this.Name = "player";
        8  +      "player";
   9    9       this.AttackRating = 5;
  10   10       this.HP = this.HPbase;
  11   11   }
  12   12   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#111">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9       -      this.AttackRating = 5;
        9  +      5;
  10   10       this.HP = this.HPbase;
  11   11   }
  12   12   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#112">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9    9       this.AttackRating = 5;
  10       -      this.HP = this.HPbase;
       10  +      this.HPbase;
  11   11   }
  12   12   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#25">
      <Code>
   1    1   public Player()
   2    2   {
   3       -      this.HPbase = 100;
   4    3       this.Accelerated = false;
   5    4       this.KillPoint = 0;
   6    5       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    6       this.STVRogue.GameLogic.Creature();
   8    7       this.Name = "player";
   9    8       this.AttackRating = 5;
  10    9       this.HP = this.HPbase;
  11   10   }
  12   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#25">
      <Code>
   1    1   public Player()
   2    2   {
   3       -      this.HPbase = 100;
   4    3       this.Accelerated = false;
   5    4       this.KillPoint = 0;
   6    5       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    6       this.STVRogue.GameLogic.Creature();
   8    7       this.Name = "player";
   9    8       this.AttackRating = 5;
  10    9       this.HP = this.HPbase;
  11   10   }
  12   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#26">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4       -      this.Accelerated = false;
   5    4       this.KillPoint = 0;
   6    5       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    6       this.STVRogue.GameLogic.Creature();
   8    7       this.Name = "player";
   9    8       this.AttackRating = 5;
  10    9       this.HP = this.HPbase;
  11   10   }
  12   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#26">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4       -      this.Accelerated = false;
   5    4       this.KillPoint = 0;
   6    5       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    6       this.STVRogue.GameLogic.Creature();
   8    7       this.Name = "player";
   9    8       this.AttackRating = 5;
  10    9       this.HP = this.HPbase;
  11   10   }
  12   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#27">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5       -      this.KillPoint = 0;
   6    5       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    6       this.STVRogue.GameLogic.Creature();
   8    7       this.Name = "player";
   9    8       this.AttackRating = 5;
  10    9       this.HP = this.HPbase;
  11   10   }
  12   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#27">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5       -      this.KillPoint = 0;
   6    5       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    6       this.STVRogue.GameLogic.Creature();
   8    7       this.Name = "player";
   9    8       this.AttackRating = 5;
  10    9       this.HP = this.HPbase;
  11   10   }
  12   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#28">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6       -      this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    6       this.STVRogue.GameLogic.Creature();
   8    7       this.Name = "player";
   9    8       this.AttackRating = 5;
  10    9       this.HP = this.HPbase;
  11   10   }
  12   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#28">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6       -      this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    6       this.STVRogue.GameLogic.Creature();
   8    7       this.Name = "player";
   9    8       this.AttackRating = 5;
  10    9       this.HP = this.HPbase;
  11   10   }
  12   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#29">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8       -      this.Name = "player";
   9    8       this.AttackRating = 5;
  10    9       this.HP = this.HPbase;
  11   10   }
  12   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#29">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8       -      this.Name = "player";
   9    8       this.AttackRating = 5;
  10    9       this.HP = this.HPbase;
  11   10   }
  12   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#30">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9       -      this.AttackRating = 5;
  10    9       this.HP = this.HPbase;
  11   10   }
  12   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#30">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9       -      this.AttackRating = 5;
  10    9       this.HP = this.HPbase;
  11   10   }
  12   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JID#31">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9    9       this.AttackRating = 5;
  10       -      this.HP = this.HPbase;
  11   10   }
  12   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="JTD#31">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9    9       this.AttackRating = 5;
  10       -      this.HP = this.HPbase;
  11   10   }
  12   11   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#48">
      <Code>
   1    1   public Player()
   2    2   {
   3       -      this.HPbase = 100;
        3  +      this.HPbase = this.HPbase;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9    9       this.AttackRating = 5;
  10   10       this.HP = this.HPbase;
  11   11   }
  12   12   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#49">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4       -      this.Accelerated = false;
        4  +      this.Accelerated = this.Accelerated;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9    9       this.AttackRating = 5;
  10   10       this.HP = this.HPbase;
  11   11   }
  12   12   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#50">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5       -      this.KillPoint = 0;
        5  +      this.KillPoint = this.HPbase;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9    9       this.AttackRating = 5;
  10   10       this.HP = this.HPbase;
  11   11   }
  12   12   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#51">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6       -      this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
        6  +      this.Bag = this.Bag;
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9    9       this.AttackRating = 5;
  10   10       this.HP = this.HPbase;
  11   11   }
  12   12   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#52">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9       -      this.AttackRating = 5;
        9  +      this.AttackRating = this.HPbase;
  10   10       this.HP = this.HPbase;
  11   11   }
  12   12   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#53">
      <Code>
   1    1   public Player()
   2    2   {
   3    3       this.HPbase = 100;
   4    4       this.Accelerated = false;
   5    5       this.KillPoint = 0;
   6    6       this.Bag = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Item&gt;();
   7    7       this.STVRogue.GameLogic.Creature();
   8    8       this.Name = "player";
   9    9       this.AttackRating = 5;
  10   10       this.HP = this.HPbase;
  11   11   }
  12   12   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#114">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12   12           this.Attack(foe_);
  13   13       }
  14   14       else
  15   15       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       16  +          using(        foe_.Pack.Members.GetEnumerator();
       17  +  )
       18  +          {
       19  +              goto IL_0056;
  17   20               {
       21  +              IL_0046:
       22  +                  STVRogue.GameLogic.Monster target = CS$5$0001.Current;
  18   23                   this.Attack(target);
       24  +              }
       25  +          IL_0056:
       26  +              if (CS$5$0001.MoveNext())
       27  +                  goto IL_0046;
  19   28           }
  20   29           this.Accelerated = false;
  21   30       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
       31  +      push this;
       32  +      push dup.KillPoint;
       33  +      push foe_.Pack.Members;
       34  +      if (STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 == default(System.Predicate&lt;STVRogue.GameLogic.Monster&gt;))
       35  +      {
       36  +          STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Attack&gt;b__0;
       37  +      }
       38  +      pop.KillPoint = pop + pop.RemoveAll(STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
  23   39       if (foe_.Pack.IsEmpty)
  24   40       {
  25   41           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   42       }
  27   43   }
  28   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#115">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12   12           this.Attack(foe_);
  13   13       }
  14   14       else
  15   15       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       16  +          using(        CS$5$0001 = foe_.Pack.Members.GetEnumerator();
       17  +  )
       18  +          {
       19  +              goto IL_0056;
  17   20               {
       21  +              IL_0046:
       22  +                  STVRogue.GameLogic.Monster target = CS$5$0001.Current;
  18   23                   this.Attack(target);
       24  +              }
       25  +          IL_0056:
       26  +              if (CS$5$0001.MoveNext())
       27  +                  goto IL_0046;
       28  +          }
       29  +          false;
  19   30       }
  20       -          this.Accelerated = false;
       31  +      push this;
       32  +      push dup.KillPoint;
       33  +      push foe_.Pack.Members;
       34  +      if (STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 == default(System.Predicate&lt;STVRogue.GameLogic.Monster&gt;))
       35  +      {
       36  +          STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Attack&gt;b__0;
  21   37       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
       38  +      pop.KillPoint = pop + pop.RemoveAll(STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
  23   39       if (foe_.Pack.IsEmpty)
  24   40       {
  25   41           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   42       }
  27   43   }
  28   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#116">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12   12           this.Attack(foe_);
  13   13       }
  14   14       else
  15   15       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       16  +          using(        CS$5$0001 = foe_.Pack.Members.GetEnumerator();
       17  +  )
       18  +          {
       19  +              goto IL_0056;
  17   20               {
       21  +              IL_0046:
       22  +                  STVRogue.GameLogic.Monster target = CS$5$0001.Current;
  18   23                   this.Attack(target);
       24  +              }
       25  +          IL_0056:
       26  +              if (CS$5$0001.MoveNext())
       27  +                  goto IL_0046;
  19   28           }
  20   29           this.Accelerated = false;
  21   30       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
       31  +      push this;
       32  +      push dup.KillPoint;
       33  +      push foe_.Pack.Members;
       34  +      if (STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 == default(System.Predicate&lt;STVRogue.GameLogic.Monster&gt;))
       35  +      {
       36  +          &lt;Attack&gt;b__0;
       37  +      }
       38  +      pop.KillPoint = pop + pop.RemoveAll(STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
  23   39       if (foe_.Pack.IsEmpty)
  24   40       {
  25   41           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   42       }
  27   43   }
  28   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#117">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12   12           this.Attack(foe_);
  13   13       }
  14   14       else
  15   15       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       16  +          using(        CS$5$0001 = foe_.Pack.Members.GetEnumerator();
       17  +  )
       18  +          {
       19  +              goto IL_0056;
  17   20               {
       21  +              IL_0046:
       22  +                  STVRogue.GameLogic.Monster target = CS$5$0001.Current;
  18   23                   this.Attack(target);
       24  +              }
       25  +          IL_0056:
       26  +              if (CS$5$0001.MoveNext())
       27  +                  goto IL_0046;
  19   28           }
  20   29           this.Accelerated = false;
  21   30       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
       31  +      push this;
       32  +      push dup.KillPoint;
       33  +      push foe_.Pack.Members;
       34  +      if (STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 == default(System.Predicate&lt;STVRogue.GameLogic.Monster&gt;))
       35  +      {
       36  +          STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Attack&gt;b__0;
       37  +      }
       38  +      pop + pop.RemoveAll(STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
  23   39       if (foe_.Pack.IsEmpty)
  24   40       {
  25   41           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   42       }
  27   43   }
  28   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#183">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12   12           this.Attack(foe_);
  13   13       }
  14   14       else
  15   15       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       16  +          using(        CS$5$0001 = foe_.Pack.Members.GetEnumerator();
       17  +  )
       18  +          {
       19  +              goto IL_0056;
  17   20               {
       21  +              IL_0046:
       22  +                  STVRogue.GameLogic.Monster target = CS$5$0001.Current;
  18   23                   this.Attack(target);
       24  +              }
       25  +          IL_0056:
       26  +              if (CS$5$0001.MoveNext())
       27  +                  goto IL_0046;
  19   28           }
  20   29           this.Accelerated = false;
  21   30       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
       31  +      push this;
       32  +      push dup.KillPoint;
       33  +      push foe_.Pack.Members;
       34  +      if (STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 == default(System.Predicate&lt;STVRogue.GameLogic.Monster&gt;))
       35  +      {
       36  +          STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Attack&gt;b__0;
       37  +      }
       38  +      pop.KillPoint = pop;
  23   39       if (foe_.Pack.IsEmpty)
  24   40       {
  25   41           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   42       }
  27   43   }
  28   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#180">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12   12           this.Attack(foe_);
  13   13       }
  14   14       else
  15   15       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       16  +          using(        CS$5$0001 = foe_.Pack.Members.GetEnumerator();
       17  +  )
       18  +          {
       19  +              goto IL_0056;
  17   20               {
       21  +              IL_0046:
       22  +                  STVRogue.GameLogic.Monster target = CS$5$0001.Current;
  18   23                   this.Attack(target);
       24  +              }
       25  +          IL_0056:
       26  +              if (CS$5$0001.MoveNext())
       27  +                  goto IL_0046;
  19   28           }
  20   29           this.Accelerated = false;
  21   30       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
       31  +      push this;
       32  +      push dup.KillPoint;
       33  +      push foe_.Pack.Members;
       34  +      if (STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 == default(System.Predicate&lt;STVRogue.GameLogic.Monster&gt;))
       35  +      {
       36  +          STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Attack&gt;b__0;
       37  +      }
       38  +      pop.KillPoint = pop * pop.RemoveAll(STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
  23   39       if (foe_.Pack.IsEmpty)
  24   40       {
  25   41           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   42       }
  27   43   }
  28   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#209">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12   12           this.Attack(foe_);
  13   13       }
  14   14       else
  15   15       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       16  +          using(        CS$5$0001 = foe_.Pack.Members.GetEnumerator();
       17  +  )
       18  +          {
       19  +              goto IL_0056;
  17   20               {
       21  +              IL_0046:
       22  +                  STVRogue.GameLogic.Monster target = CS$5$0001.Current;
  18   23                   this.Attack(target);
       24  +              }
       25  +          IL_0056:
       26  +              if (CS$5$0001.MoveNext())
       27  +                  goto IL_0046;
  19   28           }
  20   29           this.Accelerated = false;
  21   30       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
       31  +      push this;
       32  +      push dup.KillPoint;
       33  +      push foe_.Pack.Members;
       34  +      if (false)
       35  +      {
       36  +          STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Attack&gt;b__0;
       37  +      }
       38  +      pop.KillPoint = pop + pop.RemoveAll(STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
  23   39       if (foe_.Pack.IsEmpty)
  24   40       {
  25   41           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   42       }
  27   43   }
  28   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#208">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12   12           this.Attack(foe_);
  13   13       }
  14   14       else
  15   15       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       16  +          using(        CS$5$0001 = foe_.Pack.Members.GetEnumerator();
       17  +  )
       18  +          {
       19  +              goto IL_0056;
  17   20               {
       21  +              IL_0046:
       22  +                  STVRogue.GameLogic.Monster target = CS$5$0001.Current;
  18   23                   this.Attack(target);
       24  +              }
       25  +          IL_0056:
       26  +              if (CS$5$0001.MoveNext())
       27  +                  goto IL_0046;
  19   28           }
  20   29           this.Accelerated = false;
  21   30       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
       31  +      push this;
       32  +      push dup.KillPoint;
       33  +      push foe_.Pack.Members;
       34  +      if (true)
       35  +      {
       36  +          STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Attack&gt;b__0;
       37  +      }
       38  +      pop.KillPoint = pop + pop.RemoveAll(STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
  23   39       if (foe_.Pack.IsEmpty)
  24   40       {
  25   41           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   42       }
  27   43   }
  28   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#210">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12   12           this.Attack(foe_);
  13   13       }
  14   14       else
  15   15       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       16  +          using(        CS$5$0001 = foe_.Pack.Members.GetEnumerator();
       17  +  )
       18  +          {
       19  +              goto IL_0056;
  17   20               {
       21  +              IL_0046:
       22  +                  STVRogue.GameLogic.Monster target = CS$5$0001.Current;
  18   23                   this.Attack(target);
       24  +              }
       25  +          IL_0056:
       26  +              if (CS$5$0001.MoveNext())
       27  +                  goto IL_0046;
  19   28           }
  20   29           this.Accelerated = false;
  21   30       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
       31  +      push this;
       32  +      push dup.KillPoint;
       33  +      push foe_.Pack.Members;
       34  +      if (STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 != default(System.Predicate&lt;STVRogue.GameLogic.Monster&gt;))
       35  +      {
       36  +          STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Attack&gt;b__0;
       37  +      }
       38  +      pop.KillPoint = pop + pop.RemoveAll(STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
  23   39       if (foe_.Pack.IsEmpty)
  24   40       {
  25   41           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   42       }
  27   43   }
  28   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#40">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12   12           this.Attack(foe_);
  13   13       }
  14   14       else
  15   15       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       16  +          using(        CS$5$0001 = foe_.Pack.Members.GetEnumerator();
       17  +  )
       18  +          {
       19  +              goto IL_0056;
  17   20               {
       21  +              IL_0046:
       22  +                  STVRogue.GameLogic.Monster target = CS$5$0001.System.Collections.IEnumerator.get_Current();
  18   23                   this.Attack(target);
       24  +              }
       25  +          IL_0056:
       26  +              if (CS$5$0001.MoveNext())
       27  +                  goto IL_0046;
  19   28           }
  20   29           this.Accelerated = false;
  21   30       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
       31  +      push this;
       32  +      push dup.KillPoint;
       33  +      push foe_.Pack.Members;
       34  +      if (STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 == default(System.Predicate&lt;STVRogue.GameLogic.Monster&gt;))
       35  +      {
       36  +          STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Attack&gt;b__0;
       37  +      }
       38  +      pop.KillPoint = pop + pop.RemoveAll(STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
  23   39       if (foe_.Pack.IsEmpty)
  24   40       {
  25   41           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   42       }
  27   43   }
  28   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ISD#5">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12       -          this.Attack(foe_);
  13   12       }
  14   13       else
  15   14       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       15  +          using(        CS$5$0001 = foe_.Pack.Members.GetEnumerator();
       16  +  )
       17  +          {
       18  +              goto IL_0056;
  17   19               {
       20  +              IL_0046:
       21  +                  STVRogue.GameLogic.Monster target = CS$5$0001.Current;
  18   22                   this.Attack(target);
  19   23               }
       24  +          IL_0056:
       25  +              if (CS$5$0001.MoveNext())
       26  +                  goto IL_0046;
       27  +          }
  20   28           this.Accelerated = false;
       29  +      }
       30  +      push this;
       31  +      push dup.KillPoint;
       32  +      push foe_.Pack.Members;
       33  +      if (STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 == default(System.Predicate&lt;STVRogue.GameLogic.Monster&gt;))
       34  +      {
       35  +          STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Attack&gt;b__0;
  21   36       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
       37  +      pop.KillPoint = pop + pop.RemoveAll(STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
  23   38       if (foe_.Pack.IsEmpty)
  24   39       {
  25   40           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   41       }
  27   42   }
  28   43   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#41">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12   12           this.Attack(foe_);
  13   13       }
  14   14       else
  15   15       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       16  +          using(        CS$5$0001 = foe_.Pack.Members.GetEnumerator();
       17  +  )
       18  +          {
       19  +              goto IL_0056;
  17   20               {
       21  +              IL_0046:
       22  +                  STVRogue.GameLogic.Monster target = CS$5$0001.Current;
  18   23                   this.Attack(target);
       24  +              }
       25  +          IL_0056:
       26  +              if (CS$5$0001.MoveNext())
       27  +                  goto IL_0046;
  19   28           }
  20   29           this.Accelerated = false;
       30  +      }
       31  +      push this;
       32  +      push dup.KillPoint;
       33  +      push foe_.Pack.Members;
       34  +      if (STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 == default(System.Predicate&lt;STVRogue.GameLogic.Monster&gt;))
       35  +      {
       36  +          STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Attack&gt;b__0;
  21   37       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
  23       -      if (foe_.Pack.IsEmpty)
       38  +      pop.KillPoint = pop + pop.RemoveAll(STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
       39  +      if (foe_.Pack.StartingHP)
  24   40       {
  25   41           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   42       }
  27   43   }
  28   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ISD#6">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12   12           this.Attack(foe_);
  13   13       }
  14   14       else
  15   15       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       16  +          using(        CS$5$0001 = foe_.Pack.Members.GetEnumerator();
       17  +  )
       18  +          {
       19  +              goto IL_0056;
  17   20               {
  18       -              this.Attack(target);
       21  +              IL_0046:
       22  +                  STVRogue.GameLogic.Monster target = CS$5$0001.Current;
       23  +              }
       24  +          IL_0056:
       25  +              if (CS$5$0001.MoveNext())
       26  +                  goto IL_0046;
  19   27           }
  20   28           this.Accelerated = false;
       29  +      }
       30  +      push this;
       31  +      push dup.KillPoint;
       32  +      push foe_.Pack.Members;
       33  +      if (STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 == default(System.Predicate&lt;STVRogue.GameLogic.Monster&gt;))
       34  +      {
       35  +          STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Attack&gt;b__0;
  21   36       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
       37  +      pop.KillPoint = pop + pop.RemoveAll(STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
  23   38       if (foe_.Pack.IsEmpty)
  24   39       {
  25   40           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   41       }
  27   42   }
  28   43   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#54">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12   12           this.Attack(foe_);
  13   13       }
  14   14       else
  15   15       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       16  +          using(        CS$5$0001 = foe_.Pack.Members.GetEnumerator();
       17  +  )
       18  +          {
       19  +              goto IL_0056;
  17   20               {
       21  +              IL_0046:
       22  +                  STVRogue.GameLogic.Monster target = CS$5$0001.Current;
  18   23                   this.Attack(target);
       24  +              }
       25  +          IL_0056:
       26  +              if (CS$5$0001.MoveNext())
       27  +                  goto IL_0046;
       28  +          }
       29  +          this.Accelerated = this.Accelerated;
  19   30       }
  20       -          this.Accelerated = false;
       31  +      push this;
       32  +      push dup.KillPoint;
       33  +      push foe_.Pack.Members;
       34  +      if (STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 == default(System.Predicate&lt;STVRogue.GameLogic.Monster&gt;))
       35  +      {
       36  +          STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Attack&gt;b__0;
  21   37       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
       38  +      pop.KillPoint = pop + pop.RemoveAll(STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1);
  23   39       if (foe_.Pack.IsEmpty)
  24   40       {
  25   41           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   42       }
  27   43   }
  28   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#55">
      <Code>
   1    1   public override void Attack(STVRogue.GameLogic.Creature foe)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Monster&gt;.Enumerator CS$5$0001;
   4    4       STVRogue.GameLogic.Monster foe_;
   5    5       if (!(foe is STVRogue.GameLogic.Monster))
   6    6       {
   7    7           throw new System.ArgumentException();
   8    8       }
   9    9       foe_ = foe as STVRogue.GameLogic.Monster;
  10   10       if (!this.Accelerated)
  11   11       {
  12   12           this.Attack(foe_);
  13   13       }
  14   14       else
  15   15       {
  16       -          foreach (STVRogue.GameLogic.Monster target in foe_.Pack.Members)
       16  +          using(        CS$5$0001 = foe_.Pack.Members.GetEnumerator();
       17  +  )
       18  +          {
       19  +              goto IL_0056;
  17   20               {
       21  +              IL_0046:
       22  +                  STVRogue.GameLogic.Monster target = CS$5$0001.Current;
  18   23                   this.Attack(target);
       24  +              }
       25  +          IL_0056:
       26  +              if (CS$5$0001.MoveNext())
       27  +                  goto IL_0046;
  19   28           }
  20   29           this.Accelerated = false;
  21   30       }
  22       -      this.KillPoint = dup.KillPoint + foe_.Pack.Members.RemoveAll((STVRogue.GameLogic.Monster m) =&gt; m.IsDead);
       31  +      push this;
       32  +      push dup.KillPoint;
       33  +      push foe_.Pack.Members;
       34  +      if (STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 == default(System.Predicate&lt;STVRogue.GameLogic.Monster&gt;))
       35  +      {
       36  +          STVRogue.GameLogic.Player.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 = &lt;Attack&gt;b__0;
       37  +      }
       38  +      pop.KillPoint = this.HPbase;
  23   39       if (foe_.Pack.IsEmpty)
  24   40       {
  25   41           foe_.Pack.Location.Packs.Remove(foe_.Pack);
  26   42       }
  27   43   }
  28   44   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#42">
      <Code>
   1    1   public STVRogue.GameLogic.Monster ChooseTarget(System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt; options)
   2    2   {
   3       -      return options.Item[0].Members.Item[0];
        3  +      return options.Item[0].Members.System.Collections.IList.get_Item(0);
   4    4   
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#43">
      <Code>
   1    1   public STVRogue.GameLogic.Monster ChooseTarget(System.Collections.Generic.List&lt;STVRogue.GameLogic.Pack&gt; options)
   2    2   {
   3       -      return options.Item[0].Members.Item[0];
        3  +      return options.System.Collections.IList.get_Item(0).Members.Item[0];
   4    4   
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#118">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13       -                  this.Location = potentialFleeNode;
       15  +                  potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          ++i;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#119">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14       -                  success = true;
       16  +                  true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          ++i;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#120">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          i + 1;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#189">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          i = i;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#187">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          i /= 1;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#188">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          i %= 1;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#216">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          ++i;
       21  +      IL_0054:
       22  +          if (i &gt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#44">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
   7       -              STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
        8  +          IL_0007:
        9  +              STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.System.Collections.IList.get_Item(i);
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          ++i;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#45">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          ++i;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Capacity)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#56">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14       -                  success = true;
       16  +                  success = this.Accelerated;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          ++i;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#57">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          i = this.HPbase;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#152">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8       -              if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
       10  +              if (potentialFleeNode.IsBridge)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          ++i;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#154">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8       -              if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
       10  +              if (potentialFleeNode.IsBridge || potentialFleeNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          ++i;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#153">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8       -              if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
       10  +              if (potentialFleeNode.IsBridge || this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          ++i;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#155">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          i = 1;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#156">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          i = i;
       21  +      IL_0054:
       22  +          if (i &lt; this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#157">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          ++i;
       21  +      IL_0054:
       22  +          if (this.Location.Neighbors.Count)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#158">
      <Code>
   1    1   public bool Flees()
   2    2   {
   3    3       bool success = false;
   4    4       {
   5       -          for (int i = 0; i &lt; this.Location.Neighbors.Count; ++i)
        5  +          int i = 0;
        6  +          goto IL_0054;
   6    7           {
        8  +          IL_0007:
   7    9               STVRogue.GameLogic.Node potentialFleeNode = this.Location.Neighbors.Item[i];
   8   10               if (potentialFleeNode.IsBridge || potentialFleeNode == this.Location.Dungeon.ExitNode)
   9   11               {
  10   12               }
  11   13               else
  12   14               {
  13   15                   this.Location = potentialFleeNode;
  14   16                   success = true;
  15   17                   goto IL_006d;
  16   18               }
  17   19           }
       20  +          ++i;
       21  +      IL_0054:
       22  +          if (i)
       23  +              goto IL_0007;
  18   24       }
  19   25   IL_006d:
  20   26       return success;
  21   27   
  22   28   }
  23   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ISD#4">
      <Code>
   1    1   public void Use(STVRogue.GameLogic.Item item)
   2    2   {
   3    3       if (!this.Bag.Contains(item) || item.Used)
   4    4       {
   5    5           throw new System.ArgumentException();
   6    6       }
   7       -      item.Use(this);
   8    7       this.Bag.Remove(item);
   9    8   }
  10    9   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#1">
      <Code>
   1    1   [System.Runtime.CompilerServices.ExtensionAttribute]
   2    2   public static T Random&lt;T&gt;(System.Collections.Generic.List&lt;T&gt; list)
   3    3   {
   4       -      return list.Item[STVRogue.Utils.RNG.Next(list.Count)];
        4  +      return list.System.Collections.IList.get_Item(STVRogue.Utils.RNG.Next(list.Count));
   5    5   
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#2">
      <Code>
   1    1   [System.Runtime.CompilerServices.ExtensionAttribute]
   2    2   public static T Random&lt;T&gt;(System.Collections.Generic.List&lt;T&gt; list)
   3    3   {
   4       -      return list.Item[STVRogue.Utils.RNG.Next(list.Count)];
        4  +      return list.Item[STVRogue.Utils.RNG.Next(list.Capacity)];
   5    5   
   6    6   }
   7    7   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#7">
      <Code>
   1    1   public static int CountNumberOfBridges(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
   4    4       int n = 0;
   5       -      foreach (STVRogue.GameLogic.Node nd in nodes)
        5  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = nodes.GetEnumerator())
        6  +      {
        7  +          goto IL_0032;
   6    8           {
        9  +          IL_0015:
       10  +              STVRogue.GameLogic.Node nd = CS$5$0001.Current;
   7   11               if (STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd))
   8   12               {
   9       -              ++n;
       13  +                  --n;
       14  +              }
  10   15           }
       16  +      IL_0032:
       17  +          if (CS$5$0001.MoveNext())
       18  +              goto IL_0015;
  11   19       }
  12   20       return n;
  13   21   
  14   22   }
  15   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#12">
      <Code>
   1    1   public static int CountNumberOfBridges(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
   4    4       int n = 0;
   5       -      foreach (STVRogue.GameLogic.Node nd in nodes)
        5  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = nodes.GetEnumerator())
        6  +      {
        7  +          goto IL_0032;
   6    8           {
        9  +          IL_0015:
       10  +              STVRogue.GameLogic.Node nd = CS$5$0001.Current;
   7   11               if (STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd))
   8   12               {
   9       -              ++n;
       13  +                  n = 1;
       14  +              }
  10   15           }
       16  +      IL_0032:
       17  +          if (CS$5$0001.MoveNext())
       18  +              goto IL_0015;
  11   19       }
  12   20       return n;
  13   21   
  14   22   }
  15   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#12">
      <Code>
   1    1   public static int CountNumberOfBridges(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
   4    4       int n = 0;
   5       -      foreach (STVRogue.GameLogic.Node nd in nodes)
        5  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = nodes.GetEnumerator())
        6  +      {
        7  +          goto IL_0032;
   6    8           {
        9  +          IL_0015:
       10  +              STVRogue.GameLogic.Node nd = CS$5$0001.Current;
   7   11               if (STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd))
   8   12               {
   9       -              ++n;
       13  +                  n + 1;
       14  +              }
  10   15           }
       16  +      IL_0032:
       17  +          if (CS$5$0001.MoveNext())
       18  +              goto IL_0015;
  11   19       }
  12   20       return n;
  13   21   
  14   22   }
  15   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#8">
      <Code>
   1    1   public static int CountNumberOfBridges(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
   4    4       int n = 0;
   5       -      foreach (STVRogue.GameLogic.Node nd in nodes)
        5  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = nodes.GetEnumerator())
        6  +      {
        7  +          goto IL_0032;
   6    8           {
        9  +          IL_0015:
       10  +              STVRogue.GameLogic.Node nd = CS$5$0001.System.Collections.IEnumerator.get_Current();
   7   11               if (STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd))
   8   12               {
   9   13                   ++n;
  10   14               }
       15  +          }
       16  +      IL_0032:
       17  +          if (CS$5$0001.MoveNext())
       18  +              goto IL_0015;
  11   19       }
  12   20       return n;
  13   21   
  14   22   }
  15   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#16">
      <Code>
   1    1   public static int CountNumberOfBridges(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
   4    4       int n = 0;
   5       -      foreach (STVRogue.GameLogic.Node nd in nodes)
        5  +      using(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001 = nodes.GetEnumerator())
        6  +      {
        7  +          goto IL_0032;
   6    8           {
        9  +          IL_0015:
       10  +              STVRogue.GameLogic.Node nd = CS$5$0001.Current;
   7   11               if (STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd))
   8   12               {
   9       -              ++n;
       13  +                  n = n;
       14  +              }
  10   15           }
       16  +      IL_0032:
       17  +          if (CS$5$0001.MoveNext())
       18  +              goto IL_0015;
  11   19       }
  12   20       return n;
  13   21   
  14   22   }
  15   23   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#11">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6    6       if (nd == startNode || nd == exitNode)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.Current;
  14   19               a.Neighbors.Remove(nd);
       20  +          }
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
  15   24       }
  16   25       isBridge = true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19   28           isBridge = false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    CS$5$0002 = around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              CS$5$0002.Current;
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#24">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6       -      if (nd == startNode || nd == exitNode)
        6  +      if (nd != startNode || nd == exitNode)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.Current;
  14   19               a.Neighbors.Remove(nd);
  15   20           }
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
       24  +      }
  16   25       isBridge = true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19   28           isBridge = false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    CS$5$0002 = around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              a = CS$5$0002.Current;
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#23">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6       -      if (nd == startNode || nd == exitNode)
        6  +      if (false || nd == exitNode)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.Current;
  14   19               a.Neighbors.Remove(nd);
  15   20           }
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
       24  +      }
  16   25       isBridge = true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19   28           isBridge = false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    CS$5$0002 = around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              a = CS$5$0002.Current;
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#27">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6       -      if (nd == startNode || nd == exitNode)
        6  +      if (nd == startNode || nd != exitNode)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.Current;
  14   19               a.Neighbors.Remove(nd);
  15   20           }
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
       24  +      }
  16   25       isBridge = true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19   28           isBridge = false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    CS$5$0002 = around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              a = CS$5$0002.Current;
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#25">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6       -      if (nd == startNode || nd == exitNode)
        6  +      if (nd == startNode || true)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.Current;
  14   19               a.Neighbors.Remove(nd);
  15   20           }
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
       24  +      }
  16   25       isBridge = true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19   28           isBridge = false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    CS$5$0002 = around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              a = CS$5$0002.Current;
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#26">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6       -      if (nd == startNode || nd == exitNode)
        6  +      if (nd == startNode || false)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.Current;
  14   19               a.Neighbors.Remove(nd);
  15   20           }
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
       24  +      }
  16   25       isBridge = true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19   28           isBridge = false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    CS$5$0002 = around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              a = CS$5$0002.Current;
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#6">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6    6       if (nd == startNode || nd == exitNode)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.System.Collections.IEnumerator.get_Current();
  14   19               a.Neighbors.Remove(nd);
       20  +          }
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
  15   24       }
  16   25       isBridge = true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19   28           isBridge = false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    CS$5$0002 = around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              a = CS$5$0002.Current;
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#10">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6       -      if (nd == startNode || nd == exitNode)
        6  +      if (nd == startNode)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.Current;
  14   19               a.Neighbors.Remove(nd);
  15   20           }
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
       24  +      }
  16   25       isBridge = true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19   28           isBridge = false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    CS$5$0002 = around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              a = CS$5$0002.Current;
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#7">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6    6       if (nd == startNode || nd == exitNode)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.Current;
  14   19               a.Neighbors.Remove(nd);
       20  +          }
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
  15   24       }
  16   25       isBridge = true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19   28           isBridge = false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    CS$5$0002 = around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              a = CS$5$0002.System.Collections.IEnumerator.get_Current();
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#12">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6       -      if (nd == startNode || nd == exitNode)
        6  +      if (nd || nd == exitNode)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.Current;
  14   19               a.Neighbors.Remove(nd);
  15   20           }
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
       24  +      }
  16   25       isBridge = true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19   28           isBridge = false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    CS$5$0002 = around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              a = CS$5$0002.Current;
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#11">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6       -      if (nd == startNode || nd == exitNode)
        6  +      if (startNode || nd == exitNode)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.Current;
  14   19               a.Neighbors.Remove(nd);
  15   20           }
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
       24  +      }
  16   25       isBridge = true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19   28           isBridge = false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    CS$5$0002 = around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              a = CS$5$0002.Current;
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#14">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6       -      if (nd == startNode || nd == exitNode)
        6  +      if (nd == startNode || nd)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.Current;
  14   19               a.Neighbors.Remove(nd);
  15   20           }
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
       24  +      }
  16   25       isBridge = true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19   28           isBridge = false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    CS$5$0002 = around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              a = CS$5$0002.Current;
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#8">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6    6       if (nd == startNode || nd == exitNode)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.Current;
  14   19               a.Neighbors.Remove(nd);
  15   20           }
  16       -      isBridge = true;
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
       24  +      }
       25  +      true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19   28           isBridge = false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    CS$5$0002 = around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              a = CS$5$0002.Current;
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#9">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6    6       if (nd == startNode || nd == exitNode)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.Current;
  14   19               a.Neighbors.Remove(nd);
  15   20           }
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
       24  +      }
  16   25       isBridge = true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19       -          isBridge = false;
       28  +          false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    CS$5$0002 = around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              a = CS$5$0002.Current;
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#10">
      <Code>
   1    1   public static bool IsBridge(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, STVRogue.GameLogic.Node nd)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; around;
   5    5       bool isBridge;
   6    6       if (nd == startNode || nd == exitNode)
   7    7       {
   8    8           return false;
   9    9   
  10   10       }
  11   11       around = System.Linq.Enumerable.ToList&lt;STVRogue.GameLogic.Node&gt;(nd.Neighbors);
  12       -      foreach (STVRogue.GameLogic.Node a in around)
       12  +      using(    CS$5$0002 = around.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_0049;
  13   16           {
       17  +          IL_0034:
       18  +              STVRogue.GameLogic.Node a = CS$5$0002.Current;
  14   19               a.Neighbors.Remove(nd);
       20  +          }
       21  +      IL_0049:
       22  +          if (CS$5$0002.MoveNext())
       23  +              goto IL_0034;
  15   24       }
  16   25       isBridge = true;
  17   26       if (STVRogue.Utils.Predicates.IsReachable(startNode, exitNode))
  18   27       {
  19   28           isBridge = false;
  20   29       }
  21       -      foreach (STVRogue.GameLogic.Node a in around)
       30  +      using(    around.GetEnumerator();
       31  +  )
       32  +      {
       33  +          goto IL_009c;
  22   34           {
       35  +              STVRogue.GameLogic.Node a;
       36  +          IL_0087:
       37  +              a = CS$5$0002.Current;
  23   38               a.Neighbors.Add(nd);
       39  +          }
       40  +      IL_009c:
       41  +          if (CS$5$0002.MoveNext())
       42  +              goto IL_0087;
  24   43       }
  25   44       return isBridge;
  26   45   
  27   46   }
  28   47   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#6">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          i = 1;
       22  +      IL_0042:
       23  +          if (i &lt; path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#4">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          i %= 1;
       22  +      IL_0042:
       23  +          if (i &lt; path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#1">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          --i;
       22  +      IL_0042:
       23  +          if (i &lt; path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#7">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5       -      if (path_.Length &lt;= 1)
        5  +      if (path_.Length != 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          ++i;
       22  +      IL_0042:
       23  +          if (i &lt; path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#3">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5       -      if (path_.Length &lt;= 1)
        5  +      if (path_.Length &lt; 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          ++i;
       22  +      IL_0042:
       23  +          if (i &lt; path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#2">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5       -      if (path_.Length &lt;= 1)
        5  +      if (path_.Length)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          ++i;
       22  +      IL_0042:
       23  +          if (i &lt; path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#1">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5       -      if (path_.Length &lt;= 1)
        5  +      if (1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          ++i;
       22  +      IL_0042:
       23  +          if (i &lt; path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#1">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10       -      a = path_[0];
       10  +      path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          ++i;
       22  +      IL_0042:
       23  +          if (i &lt; path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#14">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          ++i;
       22  +      IL_0042:
       23  +          if (i != path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#10">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          ++i;
       22  +      IL_0042:
       23  +          if (i &gt; path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#11">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          ++i;
       22  +      IL_0042:
       23  +          if (i &lt;= path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#9">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          ++i;
       22  +      IL_0042:
       23  +          if (false)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#13">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          ++i;
       22  +      IL_0042:
       23  +          if (i == path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#4">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          i = i;
       22  +      IL_0042:
       23  +          if (i &lt; path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#3">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          i = 1;
       22  +      IL_0042:
       23  +          if (i &lt; path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#2">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19       -              a = path_[i];
  20       -          }
       20  +          path_[i];
       21  +          ++i;
       22  +      IL_0042:
       23  +          if (i &lt; path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#6">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          ++i;
       22  +      IL_0042:
       23  +          if (i)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#5">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          ++i;
       22  +      IL_0042:
       23  +          if (path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#3">
      <Code>
   1    1   public static bool IsPath(System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; path)
   2    2   {
   3    3       STVRogue.GameLogic.Node a;
   4    4       STVRogue.GameLogic.Node[] path_ = path.ToArray();
   5    5       if (path_.Length &lt;= 1)
   6    6       {
   7    7           return true;
   8    8   
   9    9       }
  10   10       a = path_[0];
  11   11       {
  12       -          for (int i = 1; i &lt; path_.Length; ++i)
  13       -          {
       12  +          int i = 1;
       13  +          goto IL_0042;
       14  +      IL_0020:
  14   15           if (!a.Neighbors.Contains(path_[i]))
  15   16           {
  16   17               return false;
  17   18   
  18   19           }
  19   20           a = path_[i];
  20       -          }
       21  +          i + 1;
       22  +      IL_0042:
       23  +          if (i &lt; path_.Length)
       24  +              goto IL_0020;
  21   25       }
  22   26       return true;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="LOR#3">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52       -          if (nd.IsBridge ^ isBridge_)
       62  +                  if (boolnd.IsBridge)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="LOR#4">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52       -          if (nd.IsBridge ^ isBridge_)
       62  +                  if (boolisBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="LOR#2">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52       -          if (nd.IsBridge ^ isBridge_)
       62  +                  if (nd.IsBridge | isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="LOR#1">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52       -          if (nd.IsBridge ^ isBridge_)
       62  +                  if (nd.IsBridge &amp; isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#11">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45       -          if (nd.Neighbors.Count &gt; 4)
       55  +                  if (nd.Neighbors.Capacity &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#12">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50       -          totalConnectivityDegree += nd.Neighbors.Count;
       60  +                  totalConnectivityDegree += nd.Neighbors.Capacity;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#21">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45       -          if (nd.Neighbors.Count &gt; 4)
       55  +                  if (nd.Neighbors.Count)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#13">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
       67  +              }
  56   68           }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58       -      avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
       73  +      avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Capacity;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#22">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50       -          totalConnectivityDegree += nd.Neighbors.Count;
       60  +                  totalConnectivityDegree = nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#13">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18       -      nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
       18  +      STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#25">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52       -          if (nd.IsBridge ^ isBridge_)
       62  +                  if (nd.IsBridge)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#24">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52       -          if (nd.IsBridge ^ isBridge_)
       62  +                  if (isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#14">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24       -      totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       24  +      0;
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#15">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
  56   66                   }
       67  +              }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#28">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
       67  +              }
  56   68           }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59       -      if (avrgConnectivity &gt; 3f)
       74  +      if (3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#18">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51       -          isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
       61  +                  STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#19">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
       67  +              }
  56   68           }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58       -      avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
       73  +      (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#17">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50       -          totalConnectivityDegree += nd.Neighbors.Count;
       60  +                  totalConnectivityDegree = totalConnectivityDegree;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#16">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50       -          totalConnectivityDegree += nd.Neighbors.Count;
       60  +                  totalConnectivityDegree %= nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#15">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50       -          totalConnectivityDegree += nd.Neighbors.Count;
       60  +                  totalConnectivityDegree /= nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#20">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
       67  +              }
  56   68           }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58       -      avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
       73  +      avrgConnectivity = (float)totalConnectivityDegree - (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#22">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
       67  +              }
  56   68           }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58       -      avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
       73  +      avrgConnectivity = (float)totalConnectivityDegree % (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#19">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
       67  +              }
  56   68           }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58       -      avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
       73  +      avrgConnectivity = (float)totalConnectivityDegree + (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#23">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
       67  +              }
  56   68           }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58       -      avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
       73  +      avrgConnectivity = (float)totalConnectivityDegree;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#24">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
       67  +              }
  56   68           }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58       -      avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
       73  +      avrgConnectivity = (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#33">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13       -      if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
       13  +      if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) &gt;= level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#34">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13       -      if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
       13  +      if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) == level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#28">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13       -      if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
       13  +      if (true)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#39">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45       -          if (nd.Neighbors.Count &gt; 4)
       55  +                  if (nd.Neighbors.Count &gt;= 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#40">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45       -          if (nd.Neighbors.Count &gt; 4)
       55  +                  if (nd.Neighbors.Count == 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#36">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45       -          if (nd.Neighbors.Count &gt; 4)
       55  +                  if (false)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#35">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45       -          if (nd.Neighbors.Count &gt; 4)
       55  +                  if (true)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#37">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45       -          if (nd.Neighbors.Count &gt; 4)
       55  +                  if (nd.Neighbors.Count &lt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#48">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
       67  +              }
  56   68           }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59       -      if (avrgConnectivity &gt; 3f)
       74  +      if (avrgConnectivity != 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#47">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
       67  +              }
  56   68           }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59       -      if (avrgConnectivity &gt; 3f)
       74  +      if (avrgConnectivity == 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#42">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
       67  +              }
  56   68           }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59       -      if (avrgConnectivity &gt; 3f)
       74  +      if (true)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#43">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
       67  +              }
  56   68           }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59       -      if (avrgConnectivity &gt; 3f)
       74  +      if (false)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#9">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.System.Collections.IEnumerator.get_Current();
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
  56   66                   }
       67  +              }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#10">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8    8       if (startNode.IsBridge || exitNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
  33       -                  STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
       39  +                      IL_0081:
       40  +                          STVRogue.GameLogic.Node nd2 = CS$5$0003.System.Collections.IEnumerator.get_Current();
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#17">
      <Code>
   1    1   public static bool IsValidDungeon(STVRogue.GameLogic.Node startNode, STVRogue.GameLogic.Node exitNode, int level)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0002;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0003;
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; nodes;
   6    6       int totalConnectivityDegree;
   7    7       float avrgConnectivity;
   8       -      if (startNode.IsBridge || exitNode.IsBridge)
        8  +      if (startNode.IsBridge)
   9    9       {
  10   10           return false;
  11   11   
  12   12       }
  13   13       if (STVRogue.Utils.Predicates.CountNumberOfBridges(startNode, exitNode) != level)
  14   14       {
  15   15           return false;
  16   16   
  17   17       }
  18   18       nodes = STVRogue.Utils.Predicates.ReachableNodes(startNode);
  19   19       if (!nodes.Contains(exitNode))
  20   20       {
  21   21           return false;
  22   22   
  23   23       }
  24   24       totalConnectivityDegree = 0;
  25       -      foreach (STVRogue.GameLogic.Node nd in nodes)
       25  +      using(    CS$5$0002 = nodes.GetEnumerator();
       26  +  )
       27  +      {
       28  +          goto IL_0110;
       29  +          {
       30  +          IL_0068:
       31  +              STVRogue.GameLogic.Node nd = CS$5$0002.Current;
  26   32               {
  27   33                   bool isBridge_;
  28   34                   CS$5$0003 = nd.Neighbors.GetEnumerator();
  29   35                   try
  30   36                   {
  31       -              while (CS$5$0003.MoveNext())
       37  +                      goto IL_00a5;
  32   38                       {
       39  +                      IL_0081:
  33   40                           STVRogue.GameLogic.Node nd2 = CS$5$0003.Current;
  34   41                           if (!nd2.Neighbors.Contains(nd))
  35   42                           {
  36   43                               return false;
  37   44   
  38   45                           }
  39   46                       }
       47  +                  IL_00a5:
       48  +                      if (CS$5$0003.MoveNext())
       49  +                          goto IL_0081;
  40   50                   }
  41   51                   finally
  42   52                   {
  43   53                       CS$5$0003.Dispose();
  44   54                   }
  45   55                   if (nd.Neighbors.Count &gt; 4)
  46   56                   {
  47   57                       return false;
  48   58   
  49   59                   }
  50   60                   totalConnectivityDegree += nd.Neighbors.Count;
  51   61                   isBridge_ = STVRogue.Utils.Predicates.IsBridge(startNode, exitNode, nd);
  52   62                   if (nd.IsBridge ^ isBridge_)
  53   63                   {
  54   64                       return false;
  55   65   
       66  +                  }
  56   67               }
       68  +          }
       69  +      IL_0110:
       70  +          if (CS$5$0002.MoveNext())
       71  +              goto IL_0068;
  57   72       }
  58   73       avrgConnectivity = (float)totalConnectivityDegree / (float)nodes.Count;
  59   74       if (avrgConnectivity &gt; 3f)
  60   75       {
  61   76           return false;
  62   77   
  63   78       }
  64   79       return true;
  65   80   
  66   81   }
  67   82   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#3">
      <Code>
   1    1   public static System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; ReachableNodes(STVRogue.GameLogic.Node x0)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; seen = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; todo = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   6    6       todo.Add(x0);
   7       -      while (!(todo.Count == 0))
   8       -      {
   9       -          x0 = todo.Item[0];
        7  +      goto IL_008f;
        8  +  IL_0017:
        9  +      x0 = todo.System.Collections.IList.get_Item(0);
  10   10       todo.RemoveAt(0);
  11   11       seen.Add(x0);
  12       -          foreach (STVRogue.GameLogic.Node y in x0.Neighbors)
       12  +      using(    CS$5$0001 = x0.Neighbors.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_006f;
  13   16           {
       17  +          IL_0041:
       18  +              STVRogue.GameLogic.Node y = CS$5$0001.Current;
  14   19               if (!seen.Contains(y) &amp;&amp; !todo.Contains(y))
  15   20               {
  16   21                   todo.Add(y);
  17   22               }
  18   23           }
       24  +      IL_006f:
       25  +          if (CS$5$0001.MoveNext())
       26  +              goto IL_0041;
  19   27       }
       28  +  IL_008f:
       29  +      if (!(todo.Count == 0))
       30  +          goto IL_0017;
  20   31       return seen;
  21   32   
  22   33   }
  23   34   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#17">
      <Code>
   1    1   public static System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; ReachableNodes(STVRogue.GameLogic.Node x0)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; seen = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; todo = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   6    6       todo.Add(x0);
   7       -      while (!(todo.Count == 0))
   8       -      {
        7  +      goto IL_008f;
        8  +  IL_0017:
   9    9       x0 = todo.Item[0];
  10   10       todo.RemoveAt(0);
  11   11       seen.Add(x0);
  12       -          foreach (STVRogue.GameLogic.Node y in x0.Neighbors)
       12  +      using(    CS$5$0001 = x0.Neighbors.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_006f;
       16  +          {
       17  +          IL_0041:
       18  +              STVRogue.GameLogic.Node y = CS$5$0001.Current;
  14   19               if (!seen.Contains(y) &amp;&amp; !todo.Contains(y))
  15   20               {
  16   21                   todo.Add(y);
  17   22               }
  18   23           }
       24  +      IL_006f:
       25  +          if (CS$5$0001.MoveNext())
       26  +              goto IL_0041;
  19   27       }
       28  +  IL_008f:
       29  +      if (!(todo.Count &lt; 0))
       30  +          goto IL_0017;
  20   31       return seen;
  21   32   
  22   33   }
  23   34   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#4">
      <Code>
   1    1   public static System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; ReachableNodes(STVRogue.GameLogic.Node x0)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; seen = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; todo = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   6    6       todo.Add(x0);
   7       -      while (!(todo.Count == 0))
   8       -      {
        7  +      goto IL_008f;
        8  +  IL_0017:
   9    9       x0 = todo.Item[0];
  10   10       todo.RemoveAt(0);
  11   11       seen.Add(x0);
  12       -          foreach (STVRogue.GameLogic.Node y in x0.Neighbors)
       12  +      using(    CS$5$0001 = x0.Neighbors.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_006f;
       16  +          {
       17  +          IL_0041:
       18  +              STVRogue.GameLogic.Node y = CS$5$0001.System.Collections.IEnumerator.get_Current();
  14   19               if (!seen.Contains(y) &amp;&amp; !todo.Contains(y))
  15   20               {
  16   21                   todo.Add(y);
  17   22               }
  18   23           }
       24  +      IL_006f:
       25  +          if (CS$5$0001.MoveNext())
       26  +              goto IL_0041;
  19   27       }
       28  +  IL_008f:
       29  +      if (!(todo.Count == 0))
       30  +          goto IL_0017;
  20   31       return seen;
  21   32   
  22   33   }
  23   34   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#4">
      <Code>
   1    1   public static System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; ReachableNodes(STVRogue.GameLogic.Node x0)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; seen = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; todo = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   6    6       todo.Add(x0);
   7       -      while (!(todo.Count == 0))
   8       -      {
   9       -          x0 = todo.Item[0];
        7  +      goto IL_008f;
        8  +  IL_0017:
        9  +      todo.Item[0];
  10   10       todo.RemoveAt(0);
  11   11       seen.Add(x0);
  12       -          foreach (STVRogue.GameLogic.Node y in x0.Neighbors)
       12  +      using(    CS$5$0001 = x0.Neighbors.GetEnumerator();
       13  +  )
       14  +      {
       15  +          goto IL_006f;
  13   16           {
       17  +          IL_0041:
       18  +              STVRogue.GameLogic.Node y = CS$5$0001.Current;
  14   19               if (!seen.Contains(y) &amp;&amp; !todo.Contains(y))
  15   20               {
  16   21                   todo.Add(y);
  17   22               }
  18   23           }
       24  +      IL_006f:
       25  +          if (CS$5$0001.MoveNext())
       26  +              goto IL_0041;
  19   27       }
       28  +  IL_008f:
       29  +      if (!(todo.Count == 0))
       30  +          goto IL_0017;
  20   31       return seen;
  21   32   
  22   33   }
  23   34   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#5">
      <Code>
   1    1   public static System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; ReachableNodes(STVRogue.GameLogic.Node x0)
   2    2   {
   3    3       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;.Enumerator CS$5$0001;
   4    4       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; seen = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   5    5       System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt; todo = new System.Collections.Generic.List&lt;STVRogue.GameLogic.Node&gt;();
   6    6       todo.Add(x0);
   7       -      while (!(todo.Count == 0))
   8       -      {
        7  +      goto IL_008f;
        8  +  IL_0017:
   9    9       x0 = todo.Item[0];
  10   10       todo.RemoveAt(0);
  11   11       seen.Add(x0);
  12       -          foreach (STVRogue.GameLogic.Node y in x0.Neighbors)
       12  +      using(    CS$5$0001 = x0.Neighbors.GetEnumerator();
       13  +  )
  13   14       {
       15  +          goto IL_006f;
       16  +          {
       17  +          IL_0041:
       18  +              STVRogue.GameLogic.Node y = CS$5$0001.Current;
  14   19               if (!seen.Contains(y) &amp;&amp; !todo.Contains(y))
  15   20               {
  16   21                   todo.Add(y);
  17   22               }
  18   23           }
       24  +      IL_006f:
       25  +          if (CS$5$0001.MoveNext())
       26  +              goto IL_0041;
  19   27       }
       28  +  IL_008f:
       29  +      if (!(todo.Capacity == 0))
       30  +          goto IL_0017;
  20   31       return seen;
  21   32   
  22   33   }
  23   34   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#3">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#1">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#30">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#20">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#49">
      <Code>
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="PRV#2">
      <Code>
   1    1   public static void InitializeWithSeed(int seed)
   2    2   {
   3       -      STVRogue.Utils.RNG.rnd_ = new System.Random(seed);
        3  +      STVRogue.Utils.RNG.rnd_ = this.rnd_;
   4    4   }
   5    5   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#21">
      <Code>
   1    1   public static void InitializeWithSeed(int seed)
   2    2   {
   3       -      STVRogue.Utils.RNG.rnd_ = new System.Random(seed);
        3  +      new System.Random(seed);
   4    4   }
   5    5   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#1">
      <Code>
   1    1   public static int Next(int max)
   2    2   {
   3       -      return STVRogue.Utils.RNG.Rnd.Next(max);
        3  +      return this.rnd_.Next(max);
   4    4   
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="MCI#2">
      <Code>
   1    1   public static int Next(int min, int max)
   2    2   {
   3       -      return STVRogue.Utils.RNG.Rnd.Next(min, max);
        3  +      return this.rnd_.Next(min, max);
   4    4   
   5    5   }
   6    6   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#63">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6    6       if (max - min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count &lt;= count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#62">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6    6       if (max - min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count &gt; count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#61">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6    6       if (max - min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count &lt; count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#60">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6    6       if (max - min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!false)
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#65">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6    6       if (max - min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count != count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="EAM#14">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6    6       if (max - min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly() == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#32">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6       -      if (max - min &lt;= count)
        6  +      if (max - count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#33">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6       -      if (max - min &lt;= count)
        6  +      if (max - min)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#35">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6       -      if (max - min &lt;= count)
        6  +      if (max &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#36">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6    6       if (max - min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20       -          result[i++] = n;
       21  +          result[1] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#37">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6    6       if (max - min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20       -          result[i++] = n;
       21  +          result[i] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="OODL#39">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6    6       if (max - min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!generated.Count)
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="SSDL#23">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6    6       if (max - min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11       -      result = new int[count];
       11  +      new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#28">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6       -      if (max - min &lt;= count)
        6  +      if (max % min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#25">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6       -      if (max - min &lt;= count)
        6  +      if (max + min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#27">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6       -      if (max - min &lt;= count)
        6  +      if (max / min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#30">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6       -      if (max - min &lt;= count)
        6  +      if (min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#34">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6    6       if (max - min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20       -          result[i++] = n;
       21  +          result[i %= 1] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="AOR#32">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6    6       if (max - min &lt;= count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20       -          result[i++] = n;
       21  +          result[i *= 1] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#53">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6       -      if (max - min &lt;= count)
        6  +      if (false)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#55">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6       -      if (max - min &lt;= count)
        6  +      if (max - min &gt; count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
    <MutantCodeListing MutantId="ROR#57">
      <Code>
   1    1   public static int[] UniqueList(int min, int max, int count)
   2    2   {
   3    3       System.Collections.Generic.HashSet&lt;int&gt; generated;
   4    4       int[] result;
   5    5       int i;
   6       -      if (max - min &lt;= count)
        6  +      if (max - min == count)
   7    7       {
   8    8           throw new System.ArgumentException();
   9    9       }
  10   10       generated = new System.Collections.Generic.HashSet&lt;int&gt;();
  11   11       result = new int[count];
  12   12       i = 0;
  13       -      while (!(generated.Count == count))
       13  +      goto IL_004d;
  14   14       {
       15  +      IL_0024:
  15   16       IL_0025:
  16   17           int n = STVRogue.Utils.RNG.Next(min, max);
  17   18           if (generated.Contains(n))
  18   19               goto IL_0025;
  19   20           generated.Add(n);
  20   21           result[i++] = n;
  21   22       }
       23  +  IL_004d:
       24  +      if (!(generated.Count == count))
       25  +          goto IL_0024;
  22   26       return result;
  23   27   
  24   28   }
  25   29   
</Code>
    </MutantCodeListing>
  </CodeDifferenceListings>
  <DetailedTestingResults>
    <TestedMutant MutantId="SSDL#101" TestingTimeMiliseconds="1834">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 20</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#20" TestingTimeMiliseconds="1827">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 20</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#20" TestingTimeMiliseconds="1829">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 20</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 169
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 169
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 169
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#21" TestingTimeMiliseconds="1814">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 19</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#21" TestingTimeMiliseconds="1824">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 19</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 24
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#46" TestingTimeMiliseconds="1787">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 20</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 17
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#47" TestingTimeMiliseconds="1811">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 24
</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#35" TestingTimeMiliseconds="1825">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>  Expected: collection containing &lt;Node 0&gt;
  But was:  &lt;empty&gt;

at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 22
</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#34" TestingTimeMiliseconds="1869">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>  Expected: collection containing &lt;Node 0&gt;
  But was:  &lt;empty&gt;

at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 23
</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 25
</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#12" TestingTimeMiliseconds="5517">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#44" TestingTimeMiliseconds="5528">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="JID#8" TestingTimeMiliseconds="5513">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="JTD#8" TestingTimeMiliseconds="5502">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#63" TestingTimeMiliseconds="5513">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#59" TestingTimeMiliseconds="5523">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#62" TestingTimeMiliseconds="1801">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>  Expected: less than 3
  But was:  3

at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 20
</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Creature.Attack(Creature foe) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Creature.cs:line 18
   at STVRogue.GameLogic.Player.Attack(Creature foe) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 37
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Creature.Attack(Creature foe) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Creature.cs:line 18
   at STVRogue.GameLogic.Player.Attack(Creature foe) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 37
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>  Expected: 19
  But was:  10

at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 73
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: &lt;Node 1&gt;
  But was:  &lt;Node 0&gt;

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 184
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>  Expected: 10
  But was:  18

at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 144
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#13" TestingTimeMiliseconds="1805">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  0

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 72
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: &lt;Node 1&gt;
  But was:  &lt;Node 0&gt;

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 184
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>  Expected: 10
  But was:  0

at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 144
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#68" TestingTimeMiliseconds="5514">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#69" TestingTimeMiliseconds="5514">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#45" TestingTimeMiliseconds="5528">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#108" TestingTimeMiliseconds="5500">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#111" TestingTimeMiliseconds="1785">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 106
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>  Expected: 19
  But was:  20

at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 73
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>  Expected: 10
  But was:  18

at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 144
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#109" TestingTimeMiliseconds="1824">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 106
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>  Expected: 19
  But was:  20

at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 73
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>  Expected: 10
  But was:  18

at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 144
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#71" TestingTimeMiliseconds="1797">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 106
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  True

at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 72
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>  Expected: 10
  But was:  18

at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 144
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ISD#1" TestingTimeMiliseconds="1910">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#27" TestingTimeMiliseconds="1919">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 23
</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.CrystalTest.CrystalUseTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 38
</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#39" TestingTimeMiliseconds="1914">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.GameLogic.Dungeon' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13
--InvalidProgramException
   at STVRogue.GameLogic.Dungeon..cctor()</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.GameLogic.Dungeon' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102
--InvalidProgramException
   at STVRogue.GameLogic.Dungeon..cctor()</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.GameLogic.Dungeon' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73
--InvalidProgramException
   at STVRogue.GameLogic.Dungeon..cctor()</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.GameLogic.Dungeon' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16
--InvalidProgramException
   at STVRogue.GameLogic.Dungeon..cctor()</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.GameLogic.Dungeon' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27
--InvalidProgramException
   at STVRogue.GameLogic.Dungeon..cctor()</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.GameLogic.Dungeon' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265
--InvalidProgramException
   at STVRogue.GameLogic.Dungeon..cctor()</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.GameLogic.Dungeon' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90
--InvalidProgramException
   at STVRogue.GameLogic.Dungeon..cctor()</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.GameLogic.Dungeon' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46
--InvalidProgramException
   at STVRogue.GameLogic.Dungeon..cctor()</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.GameLogic.Dungeon' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72
--InvalidProgramException
   at STVRogue.GameLogic.Dungeon..cctor()</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#92" TestingTimeMiliseconds="1809">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#13" TestingTimeMiliseconds="1855">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#13" TestingTimeMiliseconds="1854">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#14" TestingTimeMiliseconds="1795">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#14" TestingTimeMiliseconds="1795">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#15" TestingTimeMiliseconds="1805">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#15" TestingTimeMiliseconds="1715">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#16" TestingTimeMiliseconds="1769">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#16" TestingTimeMiliseconds="1780">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#17" TestingTimeMiliseconds="1790">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 169
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 169
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#17" TestingTimeMiliseconds="1789">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 169
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#111" TestingTimeMiliseconds="5509">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#109" TestingTimeMiliseconds="5500">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#115" TestingTimeMiliseconds="1999">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#114" TestingTimeMiliseconds="1789">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#118" TestingTimeMiliseconds="1777">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#119" TestingTimeMiliseconds="1796">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#122" TestingTimeMiliseconds="1790">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#121" TestingTimeMiliseconds="1792">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#124" TestingTimeMiliseconds="1800">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#25" TestingTimeMiliseconds="1762">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier)
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#26" TestingTimeMiliseconds="1789">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#146" TestingTimeMiliseconds="1793">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#144" TestingTimeMiliseconds="1815">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 169
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#145" TestingTimeMiliseconds="1831">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#27" TestingTimeMiliseconds="1807">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#151" TestingTimeMiliseconds="1798">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 75</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 3
  But was:  1

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: 2147483647
  But was:  2

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 37
</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>  Expected: less than 2
  But was:  2

at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 98
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#148" TestingTimeMiliseconds="1785">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: 2147483647
  But was:  3

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 37
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#152" TestingTimeMiliseconds="1812">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 75</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 3
  But was:  1

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: 2147483647
  But was:  4

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 37
</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#147" TestingTimeMiliseconds="1776">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#28" TestingTimeMiliseconds="1794">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#29" TestingTimeMiliseconds="1777">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#30" TestingTimeMiliseconds="1781">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 15</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no matching element
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 75</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  10

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: 2
  But was:  0

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 37
</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#31" TestingTimeMiliseconds="1781">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 169
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#32" TestingTimeMiliseconds="1782">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: 2147483647
  But was:  4

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 37
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#33" TestingTimeMiliseconds="1826">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 8
  But was:  2

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: 2147483647
  But was:  5

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 37
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#99" TestingTimeMiliseconds="5514">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#100" TestingTimeMiliseconds="5504">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#102" TestingTimeMiliseconds="1884">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 169
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#101" TestingTimeMiliseconds="1774">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 197
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 197
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 197
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 197
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 197
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 197
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 197
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 197
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 197
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#103" TestingTimeMiliseconds="1792">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#104" TestingTimeMiliseconds="1821">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfSameZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 16
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 106
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#105" TestingTimeMiliseconds="1795">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 99
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 201
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#108" TestingTimeMiliseconds="1786">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#73" TestingTimeMiliseconds="1765">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.NewNode() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 25
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 193
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#74" TestingTimeMiliseconds="1782">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#75" TestingTimeMiliseconds="1780">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#76" TestingTimeMiliseconds="1775">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#77" TestingTimeMiliseconds="1821">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 169
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#78" TestingTimeMiliseconds="1776">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#79" TestingTimeMiliseconds="1766">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#81" TestingTimeMiliseconds="1779">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 6
  But was:  1

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: 2147483647
  But was:  3

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 37
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#128" TestingTimeMiliseconds="5515">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#125" TestingTimeMiliseconds="5501">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#129" TestingTimeMiliseconds="5512">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="EAM#29" TestingTimeMiliseconds="5511">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="MCI#29" TestingTimeMiliseconds="5500">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="MCI#30" TestingTimeMiliseconds="5524">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="MCI#31" TestingTimeMiliseconds="5514">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#170" TestingTimeMiliseconds="1744">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentException : Bridge 3 cannot be disconnected, because the difficulty level would be 1.
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 249
   at STVRogue.GameLogic.Crystal.Use(Player player) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\Crystal.cs:line 12
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentException : Bridge 37 cannot be disconnected, because the difficulty level would be 4.
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 249
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 81</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#172" TestingTimeMiliseconds="5516">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="PRV#37" TestingTimeMiliseconds="5514">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="PRV#38" TestingTimeMiliseconds="5508">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#117" TestingTimeMiliseconds="5501">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#118" TestingTimeMiliseconds="5510">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#119" TestingTimeMiliseconds="1743">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentException : Bridge 3 cannot be disconnected, because the difficulty level would be 1.
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 249
   at STVRogue.GameLogic.Crystal.Use(Player player) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\Crystal.cs:line 12
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentException : Bridge 30 cannot be disconnected, because the difficulty level would be 1.
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 249
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 81</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#120" TestingTimeMiliseconds="5521">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#89" TestingTimeMiliseconds="5508">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#90" TestingTimeMiliseconds="5500">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#91" TestingTimeMiliseconds="5501">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#91" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 130
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 173
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 140
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 115
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 115
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 140
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 150
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 130
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#90" TestingTimeMiliseconds="1796">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 115
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 122
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 115
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 150
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 122
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 140
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 140
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 150
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 173
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#93" TestingTimeMiliseconds="1779">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 150
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 115
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 140
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 115
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 130
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 130
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 115
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#94" TestingTimeMiliseconds="1802">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 140
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 173
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 150
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 115
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 173
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 122
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 150
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 140
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 122
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#100" TestingTimeMiliseconds="1786">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 124
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 117
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 175
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 124
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 117
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 152
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 152
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 152
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 165
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#98" TestingTimeMiliseconds="1799">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#99" TestingTimeMiliseconds="1789">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 117
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 135
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 117
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 157
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 117
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 124
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 124
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 117
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 124
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#95" TestingTimeMiliseconds="1793">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 150
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 140
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 130
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 115
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 150
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 122
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 122
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#96" TestingTimeMiliseconds="1768">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 124
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 117
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 167
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 135
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 124
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 157
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 167
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 167
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 167
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#101" TestingTimeMiliseconds="1809">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 130
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 130
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 115
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 130
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 150
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 140
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 122
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#22" TestingTimeMiliseconds="1785">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 117
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 175
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 175
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 132
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 165
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 142
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 152
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 142
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 175
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#23" TestingTimeMiliseconds="5512">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#134" TestingTimeMiliseconds="1807">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#133" TestingTimeMiliseconds="1771">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 122
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 173
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 150
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 140
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#138" TestingTimeMiliseconds="1779">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#135" TestingTimeMiliseconds="1779">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#137" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#91" TestingTimeMiliseconds="1809">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 115
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 150
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 130
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 173
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 173
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 173
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 130
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 173
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#92" TestingTimeMiliseconds="1788">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 122
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 130
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 130
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 140
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 122
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 115
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 140
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#93" TestingTimeMiliseconds="1816">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 175
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 142
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 152
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 175
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 142
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 152
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 165
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 124
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 117
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#96" TestingTimeMiliseconds="5527">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#97" TestingTimeMiliseconds="1800">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 115
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 122
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 122
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 150
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 150
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 115
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 130
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.GameLogic.Dungeon.GeneratesNodes(Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 89
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 163
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#62" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#11" TestingTimeMiliseconds="1800">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#12" TestingTimeMiliseconds="1789">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#13" TestingTimeMiliseconds="1775">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#14" TestingTimeMiliseconds="1777">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#15" TestingTimeMiliseconds="1771">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#16" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#17" TestingTimeMiliseconds="1777">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no matching element
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#18" TestingTimeMiliseconds="1796">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 2
  But was:  6

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#19" TestingTimeMiliseconds="1798">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 2
  But was:  6

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#20" TestingTimeMiliseconds="1791">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#21" TestingTimeMiliseconds="1812">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 5
  But was:  7

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#22" TestingTimeMiliseconds="1784">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 178
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 178
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#23" TestingTimeMiliseconds="1791">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  10

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#24" TestingTimeMiliseconds="1800">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 175
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no matching element
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 152
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 117
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 132
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 117
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 142
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 152
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 152
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#24" TestingTimeMiliseconds="1827">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#25" TestingTimeMiliseconds="1770">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 108
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 181
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 108
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 119
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 108
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 127
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 108
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 160
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 108
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 127
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 108
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 137
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 108
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 170
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 108
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 127
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 108
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 127
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#5" TestingTimeMiliseconds="1796">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 75</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#6" TestingTimeMiliseconds="1807">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 134
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 2
  But was:  10

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Node already (partially) connected...
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 30
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 134
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#7" TestingTimeMiliseconds="1762">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 135
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 135
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#64" TestingTimeMiliseconds="1783">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 98
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#65" TestingTimeMiliseconds="1793">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 169
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 136
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 146
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 159
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 180
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 118
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__1(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 105
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 126
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#67" TestingTimeMiliseconds="1788">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#68" TestingTimeMiliseconds="1784">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#69" TestingTimeMiliseconds="1797">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#70" TestingTimeMiliseconds="1788">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#8" TestingTimeMiliseconds="1793">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#71" TestingTimeMiliseconds="1831">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 203
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#72" TestingTimeMiliseconds="1792">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 202
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#9" TestingTimeMiliseconds="1796">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#10" TestingTimeMiliseconds="1788">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#82" TestingTimeMiliseconds="1719">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#84" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#80" TestingTimeMiliseconds="1761">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#77" TestingTimeMiliseconds="1790">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#52" TestingTimeMiliseconds="1784">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 55
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#26" TestingTimeMiliseconds="1751">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v)
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 14</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 74</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v)
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v)
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 272</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v)
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 55
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#27" TestingTimeMiliseconds="1807">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 15</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no matching element
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 75</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: 10
  But was:  0

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 37
</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#28" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Dungeon.Shortestpath(STVRogue.GameLogic.Node, STVRogue.GameLogic.Node)' to access method 'System.Collections.Generic.Queue`1&lt;System.__Canon&gt;.System.Collections.ICollection.get_IsSynchronized()' failed.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 216
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 14</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Dungeon.Shortestpath(STVRogue.GameLogic.Node, STVRogue.GameLogic.Node)' to access method 'System.Collections.Generic.Queue`1&lt;System.__Canon&gt;.System.Collections.ICollection.get_IsSynchronized()' failed.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 216
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Dungeon.Shortestpath(STVRogue.GameLogic.Node, STVRogue.GameLogic.Node)' to access method 'System.Collections.Generic.Queue`1&lt;System.__Canon&gt;.System.Collections.ICollection.get_IsSynchronized()' failed.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 216
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 74</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Dungeon.Shortestpath(STVRogue.GameLogic.Node, STVRogue.GameLogic.Node)' to access method 'System.Collections.Generic.Queue`1&lt;System.__Canon&gt;.System.Collections.ICollection.get_IsSynchronized()' failed.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 216
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Dungeon.Shortestpath(STVRogue.GameLogic.Node, STVRogue.GameLogic.Node)' to access method 'System.Collections.Generic.Queue`1&lt;System.__Canon&gt;.System.Collections.ICollection.get_IsSynchronized()' failed.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 216
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 272</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Dungeon.Shortestpath(STVRogue.GameLogic.Node, STVRogue.GameLogic.Node)' to access method 'System.Collections.Generic.Queue`1&lt;System.__Canon&gt;.System.Collections.ICollection.get_IsSynchronized()' failed.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 216
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 55
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#28" TestingTimeMiliseconds="1814">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentException : Bridge 4 cannot be disconnected, because the difficulty level would be 0.
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 249
   at STVRogue.GameLogic.Crystal.Use(Player player) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\Crystal.cs:line 12
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: collection containing &lt; &lt;Node 91&gt;, &lt;Node 110&gt;, &lt;Node 108&gt;, &lt;Node 105&gt;, &lt;Bridge 94&gt;, &lt;Node 101&gt;, &lt;Bridge 93&gt;, &lt;Node 99&gt;, &lt;Bridge 92&gt;, &lt;Node 95&gt; &gt;
  But was:  &lt; &lt; &lt;Node 95&gt;, &lt;Bridge 92&gt;, &lt;Node 99&gt;, &lt;Bridge 93&gt;, &lt;Node 101&gt;, &lt;Bridge 94&gt;, &lt;Node 105&gt;, &lt;Node 108&gt;, &lt;Node 110&gt;, &lt;Node 91&gt; &gt;, &lt; &lt;Node 95&gt;, &lt;Bridge 92&gt;, &lt;Node 99&gt;, &lt;Bridge 93&gt;, &lt;Node 101&gt;, &lt;Bridge 94&gt;, &lt;Node 105&gt;, &lt;Node 107&gt;, &lt;Node 109&gt;, &lt;Node 91&gt; &gt;, &lt; &lt;Node 95&gt;, &lt;Bridge 92&gt;, &lt;Node 99&gt;, &lt;Bridge 93&gt;, &lt;Node 101&gt;, &lt;Bridge 94&gt;, &lt;Node 105&gt;, &lt;Node 107&gt;, &lt;Node 110&gt;, &lt;Node 91&gt; &gt;, &lt; &lt;Node 95&gt;, &lt;Bridge 92&gt;, &lt;Node 99&gt;, &lt;Bridge 93&gt;, &lt;Node 101&gt;, &lt;Bridge 94&gt;, &lt;Node 106&gt;, &lt;Node 108&gt;, &lt;Node 110&gt;, &lt;Node 91&gt; &gt;, &lt; &lt;Node 95&gt;, &lt;Bridge 92&gt;, &lt;Node 99&gt;, &lt;Bridge 93&gt;, &lt;Node 102&gt;, &lt;Bridge 94&gt;, &lt;Node 105&gt;, &lt;Node 108&gt;, &lt;Node 110&gt;, &lt;Node 91&gt; &gt;, &lt; &lt;Node 95&gt;, &lt;Bridge 92&gt;, &lt;Node 99&gt;, &lt;Bridge 93&gt;, &lt;Node 102&gt;, &lt;Bridge 94&gt;, &lt;Node 105&gt;, &lt;Node 107&gt;, &lt;Node 109&gt;, &lt;Node 91&gt; &gt;, &lt; &lt;Node 95&gt;, &lt;Bridge 92&gt;, &lt;Node 99&gt;, &lt;Bridge 93&gt;, &lt;Node 102&gt;, &lt;Bridge 94&gt;, &lt;Node 105&gt;, &lt;Node 107&gt;, &lt;Node 110&gt;, &lt;Node 91&gt; &gt;, &lt; &lt;Node 95&gt;, &lt;Bridge 92&gt;, &lt;Node 99&gt;, &lt;Bridge 93&gt;, &lt;Node 102&gt;, &lt;Bridge 94&gt;, &lt;Node 106&gt;, &lt;Node 108&gt;, &lt;Node 110&gt;, &lt;Node 91&gt; &gt;, &lt; &lt;Node 95&gt;, &lt;Bridge 92&gt;, &lt;Node 100&gt;, &lt;Bridge 93&gt;, &lt;Node 101&gt;, &lt;Bridge 94&gt;, &lt;Node 105&gt;, &lt;Node 108&gt;, &lt;Node 110&gt;, &lt;Node 91&gt; &gt;, &lt; &lt;Node 95&gt;, &lt;Bridge 92&gt;, &lt;Node 100&gt;, &lt;Bridge 93&gt;, &lt;Node 101&gt;, &lt;Bridge 94&gt;, &lt;Node 105&gt;, &lt;Node 107&gt;, &lt;Node 109&gt;, &lt;Node 91&gt; &gt;... &gt;

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 38
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  4

at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 274
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.ArgumentException : Value does not fall within the expected range.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#155" TestingTimeMiliseconds="1794">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentException : Bridge 2 cannot be disconnected, because the difficulty level would be 0.
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 249
   at STVRogue.GameLogic.Crystal.Use(Player player) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\Crystal.cs:line 12
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: 9
  But was:  10

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 37
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  8

at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 274
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#166" TestingTimeMiliseconds="1759">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 14</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 74</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 272</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 55
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#160" TestingTimeMiliseconds="1811">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 14</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 74</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 272</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 55
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#165" TestingTimeMiliseconds="1782">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 14</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 74</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 272</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 55
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#162" TestingTimeMiliseconds="1773">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#167" TestingTimeMiliseconds="1818">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 15</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no matching element
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 75</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: 9
  But was:  0

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 37
</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#34" TestingTimeMiliseconds="5515">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="PRV#35" TestingTimeMiliseconds="1774">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentException : Bridge 3 cannot be disconnected, because the difficulty level would be -8.
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 249
   at STVRogue.GameLogic.Crystal.Use(Player player) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\Crystal.cs:line 12
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  4

at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 105
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentException : Bridge 37 cannot be disconnected, because the difficulty level would be -17.
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 249
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 81</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 30
</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  22

at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 274
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>  Expected: less than 82
  But was:  82

at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 98
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#36" TestingTimeMiliseconds="1809">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 15</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no matching element
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 75</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: 10
  But was:  1

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 37
</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.ArgumentException : Value does not fall within the expected range.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#111" TestingTimeMiliseconds="1801">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 14</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 74</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 272</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 55
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#112" TestingTimeMiliseconds="1725">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 14</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 74</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 272</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 55
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#114" TestingTimeMiliseconds="1765">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 14</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 74</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 272</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: key
   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 233
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 55
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#115" TestingTimeMiliseconds="1791">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 15</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no matching element
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 75</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: 10
  But was:  0

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 37
</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#116" TestingTimeMiliseconds="1832">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 15</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no matching element
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 75</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: 12
  But was:  0

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 37
</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#83" TestingTimeMiliseconds="1806">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 212
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 14</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 212
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 212
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 74</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 212
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 212
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 272</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 212
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 55
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#84" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 219
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 14</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 219
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 219
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 74</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 219
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 219
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 272</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 219
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 55
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#85" TestingTimeMiliseconds="1786">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 14</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 74</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 272</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 55
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#86" TestingTimeMiliseconds="1796">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 14</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 74</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 272</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 223
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 55
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#87" TestingTimeMiliseconds="1793">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 232
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 14</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 232
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 232
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 74</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 232
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 232
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 272</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Dungeon.Shortestpath(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 232
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 55
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#88" TestingTimeMiliseconds="5514">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#88" TestingTimeMiliseconds="1774">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#87" TestingTimeMiliseconds="1769">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#85" TestingTimeMiliseconds="1779">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#20" TestingTimeMiliseconds="1772">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#3" TestingTimeMiliseconds="1771">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#21" TestingTimeMiliseconds="1766">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#113" TestingTimeMiliseconds="1738">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#115" TestingTimeMiliseconds="1772">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#116" TestingTimeMiliseconds="1767">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#125" TestingTimeMiliseconds="1781">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#123" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#124" TestingTimeMiliseconds="1780">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#120" TestingTimeMiliseconds="1776">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#119" TestingTimeMiliseconds="1774">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#121" TestingTimeMiliseconds="1794">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#130" TestingTimeMiliseconds="1798">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#128" TestingTimeMiliseconds="1727">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#25" TestingTimeMiliseconds="1774">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#26" TestingTimeMiliseconds="1800">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#27" TestingTimeMiliseconds="1785">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#4" TestingTimeMiliseconds="1776">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#81" TestingTimeMiliseconds="1766">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#80" TestingTimeMiliseconds="1788">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#82" TestingTimeMiliseconds="1754">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#83" TestingTimeMiliseconds="1770">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#84" TestingTimeMiliseconds="1776">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#86" TestingTimeMiliseconds="1775">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#88" TestingTimeMiliseconds="1758">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#87" TestingTimeMiliseconds="1777">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#89" TestingTimeMiliseconds="1779">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#54" TestingTimeMiliseconds="1758">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#55" TestingTimeMiliseconds="1784">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#56" TestingTimeMiliseconds="1788">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#57" TestingTimeMiliseconds="1713">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#58" TestingTimeMiliseconds="1773">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#59" TestingTimeMiliseconds="1783">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#60" TestingTimeMiliseconds="1783">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#61" TestingTimeMiliseconds="1783">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#14" TestingTimeMiliseconds="1768">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#46" TestingTimeMiliseconds="1768">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#9" TestingTimeMiliseconds="1781">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#9" TestingTimeMiliseconds="1770">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#67" TestingTimeMiliseconds="1785">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#66" TestingTimeMiliseconds="1819">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#65" TestingTimeMiliseconds="1796">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#70" TestingTimeMiliseconds="1791">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#15" TestingTimeMiliseconds="1784">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#72" TestingTimeMiliseconds="1769">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#47" TestingTimeMiliseconds="1796">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#10" TestingTimeMiliseconds="1792">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#10" TestingTimeMiliseconds="1812">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ISD#2" TestingTimeMiliseconds="1786">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerUseItemInBag" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PlayerTest.PlayerUseItemInBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 25
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#71" TestingTimeMiliseconds="1790">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#73" TestingTimeMiliseconds="1757">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#16" TestingTimeMiliseconds="1776">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#74" TestingTimeMiliseconds="1782">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#11" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#11" TestingTimeMiliseconds="1770">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#12" TestingTimeMiliseconds="1777">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#12" TestingTimeMiliseconds="1752">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#17" TestingTimeMiliseconds="1777">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#18" TestingTimeMiliseconds="1779">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#49" TestingTimeMiliseconds="1786">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#50" TestingTimeMiliseconds="1765">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#19" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerUseItemInBag" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PlayerTest.PlayerUseItemInBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 25
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#23" TestingTimeMiliseconds="5526">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="EAM#24" TestingTimeMiliseconds="5511">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#51" TestingTimeMiliseconds="1691">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerUseItemInBag" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PlayerTest.PlayerUseItemInBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 25
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#103" TestingTimeMiliseconds="1808">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#104" TestingTimeMiliseconds="1813">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#105" TestingTimeMiliseconds="1840">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>  Expected: less than 0
  But was:  0

at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 20
</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#22" TestingTimeMiliseconds="1758">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#22" TestingTimeMiliseconds="1787">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#23" TestingTimeMiliseconds="1785">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#23" TestingTimeMiliseconds="1769">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#24" TestingTimeMiliseconds="1790">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>  Expected: less than 0
  But was:  0

at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 20
</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#24" TestingTimeMiliseconds="1786">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>  Expected: less than 0
  But was:  0

at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 20
</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#178" TestingTimeMiliseconds="1780">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#173" TestingTimeMiliseconds="1811">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>  Expected: less than -4
  But was:  0

at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 20
</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#176" TestingTimeMiliseconds="1814">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackMock..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 95
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 232</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 63</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerChooseTarget" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PlayerTest.PlayerChooseTarget() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 101</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#1" TestingTimeMiliseconds="1812">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 19</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 42</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: source
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 70</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: source
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 142</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 113</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 135</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#1" TestingTimeMiliseconds="1815">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 19</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 42</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: source
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 70</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: source
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 142</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 113</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 135</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#2" TestingTimeMiliseconds="1779">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 16</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 55</Message>
          </TestMethod>
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 65
   at STVRogue.GameLogic.NodeTest.NodeFightNoPackPresentTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 157</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 141</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 114</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 136</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#2" TestingTimeMiliseconds="1792">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 16</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 55</Message>
          </TestMethod>
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 65
   at STVRogue.GameLogic.NodeTest.NodeFightNoPackPresentTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 157</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 141</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 114</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 136</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#3" TestingTimeMiliseconds="1765">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#3" TestingTimeMiliseconds="1786">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#28" TestingTimeMiliseconds="1818">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 19</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 42</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: source
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 70</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: source
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 142</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 113</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 135</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#29" TestingTimeMiliseconds="1820">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 16</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 55</Message>
          </TestMethod>
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 65
   at STVRogue.GameLogic.NodeTest.NodeFightNoPackPresentTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 157</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 141</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 114</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 136</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#30" TestingTimeMiliseconds="1823">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#4" TestingTimeMiliseconds="1777">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 19</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeConnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 28</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.ReachableNodes(Node x0) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 39
   at STVRogue.Utils.Predicates.IsReachable(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 54
   at STVRogue.GameLogic.NodeTest.NodeConnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 18</Message>
          </TestMethod>
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 215</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 238</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 178</Message>
          </TestMethod>
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.NullReferenceException: Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 63
   at STVRogue.GameLogic.PackTest.&lt;&gt;c__DisplayClass1.&lt;PackCanMoveTest&gt;b__0() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 35
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 35
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#4" TestingTimeMiliseconds="1805">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 19</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeConnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 28</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.ReachableNodes(Node x0) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 39
   at STVRogue.Utils.Predicates.IsReachable(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 54
   at STVRogue.GameLogic.NodeTest.NodeConnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 18</Message>
          </TestMethod>
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 215</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 238</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 178</Message>
          </TestMethod>
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.NullReferenceException: Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 63
   at STVRogue.GameLogic.PackTest.&lt;&gt;c__DisplayClass1.&lt;PackCanMoveTest&gt;b__0() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 35
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 35
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#4" TestingTimeMiliseconds="1826">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 19</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 42</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: source
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 70</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: source
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 142</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 113</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 135</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#31" TestingTimeMiliseconds="1761">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 19</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeConnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 28</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.ReachableNodes(Node x0) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 39
   at STVRogue.Utils.Predicates.IsReachable(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 54
   at STVRogue.GameLogic.NodeTest.NodeConnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 18</Message>
          </TestMethod>
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 215</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 238</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 178</Message>
          </TestMethod>
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.NullReferenceException: Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 63
   at STVRogue.GameLogic.PackTest.&lt;&gt;c__DisplayClass1.&lt;PackCanMoveTest&gt;b__0() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 35
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 35
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#32" TestingTimeMiliseconds="1787">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 216</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 235</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 179</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 79</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 62</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#33" TestingTimeMiliseconds="1768">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#34" TestingTimeMiliseconds="1793">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#5" TestingTimeMiliseconds="1801">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 216</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 235</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 179</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 79</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 62</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#5" TestingTimeMiliseconds="1804">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 216</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 235</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 179</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 79</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 62</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#5" TestingTimeMiliseconds="1801">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 16</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 55</Message>
          </TestMethod>
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 65
   at STVRogue.GameLogic.NodeTest.NodeFightNoPackPresentTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 157</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 141</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 114</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 136</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#6" TestingTimeMiliseconds="1747">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#6" TestingTimeMiliseconds="1792">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#6" TestingTimeMiliseconds="1770">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#7" TestingTimeMiliseconds="1763">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#7" TestingTimeMiliseconds="1776">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#7" TestingTimeMiliseconds="1775">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 19</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeConnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 28</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.ReachableNodes(Node x0) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 39
   at STVRogue.Utils.Predicates.IsReachable(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 54
   at STVRogue.GameLogic.NodeTest.NodeConnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 18</Message>
          </TestMethod>
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 215</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 238</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 178</Message>
          </TestMethod>
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.NullReferenceException: Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 63
   at STVRogue.GameLogic.PackTest.&lt;&gt;c__DisplayClass1.&lt;PackCanMoveTest&gt;b__0() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 35
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 35
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 123
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 28
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 131
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#8" TestingTimeMiliseconds="1787">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 216</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 235</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 179</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 79</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 62</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#9" TestingTimeMiliseconds="1789">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#10" TestingTimeMiliseconds="1795">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#61" TestingTimeMiliseconds="1786">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#63" TestingTimeMiliseconds="1767">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#64" TestingTimeMiliseconds="1776">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#45" TestingTimeMiliseconds="1757">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#46" TestingTimeMiliseconds="1793">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#42" TestingTimeMiliseconds="1789">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#49" TestingTimeMiliseconds="1785">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#48" TestingTimeMiliseconds="1784">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#47" TestingTimeMiliseconds="1845">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>  Expected: less than 30
  But was:  30

at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 98
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#51" TestingTimeMiliseconds="1801">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#73" TestingTimeMiliseconds="1824">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Failed">
            <Message>  Expected: &lt;System.InvalidOperationException&gt;
  But was:  null

at STVRogue.GameLogic.NodeTest.NodeConnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 34
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#75" TestingTimeMiliseconds="1789">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Failed">
            <Message>  Expected: &lt;System.InvalidOperationException&gt;
  But was:  null

at STVRogue.GameLogic.NodeTest.NodeConnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 34
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#17" TestingTimeMiliseconds="1795">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Bridge.ConnectToNodeOfNextZone(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Bridge.cs:line 23
   at STVRogue.GameLogic.BridgeTest.BridgeConnectionTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\BridgeTest.cs:line 19</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 164
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 174
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.NodeTest.NodeConnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 28</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.NodeTest.NodeConnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 215</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 238</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 178</Message>
          </TestMethod>
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 141
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 37</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 113</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 135</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 116
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.InvalidOperationException : Maximum connectivity is 4
   at STVRogue.GameLogic.Node.Connect(Node nd) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 32
   at STVRogue.GameLogic.Dungeon.&lt;&gt;c__DisplayClass2.&lt;GenerateZone&gt;b__0(Node node) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 101
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 151
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#46" TestingTimeMiliseconds="1761">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#80" TestingTimeMiliseconds="1770">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#79" TestingTimeMiliseconds="1796">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#86" TestingTimeMiliseconds="1793">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#93" TestingTimeMiliseconds="1764">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#90" TestingTimeMiliseconds="1806">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.NodeTest.&lt;NodeFightFullyKillingPackTest&gt;b__f(List`1 data) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 79
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#91" TestingTimeMiliseconds="1792">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.NodeTest.&lt;NodeFightFullyKillingPackTest&gt;b__f(List`1 data) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 79
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#18" TestingTimeMiliseconds="1781">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#98" TestingTimeMiliseconds="1788">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.NodeTest.&lt;NodeFightPackFleesTest&gt;b__1e(List`1 data) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 90
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#97" TestingTimeMiliseconds="1811">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.NodeTest.&lt;NodeFightPackFleesTest&gt;b__1e(List`1 data) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 90
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#96" TestingTimeMiliseconds="1770">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 223
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#19" TestingTimeMiliseconds="1809">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.NodeTest.&lt;NodeFightFullyKillingPackTest&gt;b__f(List`1 data) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 79
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#20" TestingTimeMiliseconds="1786">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.NodeTest.&lt;NodeFightPackFleesTest&gt;b__1e(List`1 data) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 90
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#52" TestingTimeMiliseconds="1783">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 106
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 72
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightNoPackPresentTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 157</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>  Expected: 10
  But was:  18

at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 144
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#51" TestingTimeMiliseconds="1794">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightNoPackPresentTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 157</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#53" TestingTimeMiliseconds="1799">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.NodeTest.&lt;NodeFightFullyKillingPackTest&gt;b__f(List`1 data) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 79
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#56" TestingTimeMiliseconds="1822">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 223
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.NodeTest.&lt;NodeFightPackFleesTest&gt;b__1e(List`1 data) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 90
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#35" TestingTimeMiliseconds="1771">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#37" TestingTimeMiliseconds="1786">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.ArgumentException : Value does not fall within the expected range.
   at STVRogue.GameLogic.Player.Attack(Creature foe) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 32
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 74
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.ArgumentException : Value does not fall within the expected range.
   at STVRogue.GameLogic.Player.Attack(Creature foe) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 32
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 74
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentException : Value does not fall within the expected range.
   at STVRogue.GameLogic.Player.Attack(Creature foe) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 32
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 74
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.ArgumentException : Value does not fall within the expected range.
   at STVRogue.GameLogic.Player.Attack(Creature foe) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 32
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 74
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 70</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.ArgumentException : Value does not fall within the expected range.
   at STVRogue.GameLogic.Player.Attack(Creature foe) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 32
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 74
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentException : Value does not fall within the expected range.
   at STVRogue.GameLogic.Player.Attack(Creature foe) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 32
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 74
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 142</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#38" TestingTimeMiliseconds="1773">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 70</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 142</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#39" TestingTimeMiliseconds="1787">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#40" TestingTimeMiliseconds="1796">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#41" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#68" TestingTimeMiliseconds="1811">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 15</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no matching element
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 75</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 10
  But was:  0

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 1&gt;
  But was:  &lt;Bridge 1&gt;

at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 63
</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Player.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 72
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 76</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#67" TestingTimeMiliseconds="1794">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>  Expected: 2
  But was:  3

at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 92
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#66" TestingTimeMiliseconds="1811">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 15</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no matching element
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 75</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 3
  But was:  0

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 1&gt;
  But was:  &lt;Bridge 1&gt;

at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 63
</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Player.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 72
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 76</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#41" TestingTimeMiliseconds="1826">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 92
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#42" TestingTimeMiliseconds="1837">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 15</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no matching element
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 75</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 9
  But was:  0

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 1&gt;
  But was:  &lt;Bridge 1&gt;

at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 63
</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Player.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 72
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 76</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#43" TestingTimeMiliseconds="1828">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 15</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no matching element
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 103</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : 'minValue' cannot be greater than maxValue.
Parameter name: minValue
   at System.Random.Next(Int32 minValue, Int32 maxValue)
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 75</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 10
  But was:  0

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 1&gt;
  But was:  &lt;Bridge 1&gt;

at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 63
</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Player.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 72
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 76</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#105" TestingTimeMiliseconds="1808">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Node.Level() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 103
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 244
   at STVRogue.GameLogic.Crystal.Use(Player player) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\Crystal.cs:line 12
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Node.Level() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 103
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 105</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Node.Level() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 103
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 244
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 81</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Node.Level() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 103
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 274</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#58" TestingTimeMiliseconds="1813">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Node.Level() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 103
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 244
   at STVRogue.GameLogic.Crystal.Use(Player player) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\Crystal.cs:line 12
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Node.Level() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 103
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 105</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Node.Level() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 103
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 244
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 81</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Node.Level() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 103
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 274</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#60" TestingTimeMiliseconds="1817">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  0

at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 105
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  0

at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 274
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#59" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Node.Level()
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 244
   at STVRogue.GameLogic.Crystal.Use(Player player) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\Crystal.cs:line 12
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Node.Level()
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 105</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Node.Level()
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 244
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 81</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Node.Level()
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 268</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Node.Level()
   at STVRogue.GameLogic.Node.Capacity() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 108
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#42" TestingTimeMiliseconds="1814">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Node.Level() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 103
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 244
   at STVRogue.GameLogic.Crystal.Use(Player player) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\Crystal.cs:line 12
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Node.Level() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 103
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 105</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Node.Level() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 103
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 244
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 81</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: predicate
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.Node.Level() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 103
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 274</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#36" TestingTimeMiliseconds="1815">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  0

at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 105
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  0

at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 274
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#40" TestingTimeMiliseconds="1784">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Node.Level()
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 244
   at STVRogue.GameLogic.Crystal.Use(Player player) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\Crystal.cs:line 12
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Node.Level()
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 105</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Node.Level()
   at STVRogue.GameLogic.Dungeon.Disconnect(Bridge b) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 244
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 81</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Node.Level()
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 268</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Node.Level()
   at STVRogue.GameLogic.Node.Capacity() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 108
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#38" TestingTimeMiliseconds="1795">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  0

at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 105
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  0

at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 274
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#11" TestingTimeMiliseconds="1808">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 82</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 65</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#21" TestingTimeMiliseconds="1733">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 82</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 65</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#22" TestingTimeMiliseconds="1816">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 82</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 65</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#66" TestingTimeMiliseconds="1794">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 82</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 65</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#65" TestingTimeMiliseconds="1796">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 82</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 65</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#55" TestingTimeMiliseconds="1767">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 82</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 65</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#58" TestingTimeMiliseconds="1805">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 82</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 65</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#56" TestingTimeMiliseconds="1813">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 82</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 65</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#53" TestingTimeMiliseconds="1796">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 82</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 65</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.MonsterCount() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 114
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#15" TestingTimeMiliseconds="1777">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#16" TestingTimeMiliseconds="1783">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no elements
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 1&gt;
  But was:  &lt;Node 0&gt;

at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 67
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#18" TestingTimeMiliseconds="1779">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 12</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 206</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackMock..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 95
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 232</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 89</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 56</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 174</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 127</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.Attack(Player p) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 31
   at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 18</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 110</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 132</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 78</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 61</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerChooseTarget" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PlayerTest.PlayerChooseTarget() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 101</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#18" TestingTimeMiliseconds="1810">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 12</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 206</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackMock..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 95
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 232</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 89</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 56</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 174</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 127</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.Attack(Player p) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 31
   at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 18</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 110</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 132</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 78</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 61</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerChooseTarget" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PlayerTest.PlayerChooseTarget() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 101</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#19" TestingTimeMiliseconds="1761">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#19" TestingTimeMiliseconds="1756">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#132" TestingTimeMiliseconds="1782">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#136" TestingTimeMiliseconds="1784">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#135" TestingTimeMiliseconds="1841">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#138" TestingTimeMiliseconds="5512">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#137" TestingTimeMiliseconds="5523">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#141" TestingTimeMiliseconds="5513">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="EAM#30" TestingTimeMiliseconds="1781">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#178" TestingTimeMiliseconds="1800">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 13</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>  Expected: less than 100
  But was:  100

at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 23
</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 50
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 0&gt;
  But was:  &lt;Node 1&gt;

at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 84
</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerChooseTarget" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.PlayerTest.PlayerChooseTarget() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#41" TestingTimeMiliseconds="1795">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 12</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 206</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackMock..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 95
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 232</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 89</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 56</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 174</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 127</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.Attack(Player p) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 31
   at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 18</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 110</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 132</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 78</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 61</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerChooseTarget" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PlayerTest.PlayerChooseTarget() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 101</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#42" TestingTimeMiliseconds="1774">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#43" TestingTimeMiliseconds="5511">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#121" TestingTimeMiliseconds="1777">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#122" TestingTimeMiliseconds="1781">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#123" TestingTimeMiliseconds="5513">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#124" TestingTimeMiliseconds="5505">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#126" TestingTimeMiliseconds="1886">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 13</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>  Expected: less than 100
  But was:  100

at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 23
</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 50
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 0&gt;
  But was:  &lt;Node 1&gt;

at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 84
</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerChooseTarget" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.PlayerTest.PlayerChooseTarget() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#125" TestingTimeMiliseconds="5513">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#94" TestingTimeMiliseconds="1769">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 12</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 206</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackMock..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 95
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 232</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 89</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 56</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 174</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 127</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.Attack(Player p) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 31
   at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 18</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 110</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 132</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 78</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 61</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerChooseTarget" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 23
   at STVRogue.GameLogic.PlayerTest.PlayerChooseTarget() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 101</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#95" TestingTimeMiliseconds="1755">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#96" TestingTimeMiliseconds="1767">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Player.Attack(Creature foe) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 47
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#97" TestingTimeMiliseconds="5519">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ISD#3" TestingTimeMiliseconds="1790">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.Attack(Player p) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 31
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 93
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.Attack(Player p) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 31
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 93
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.Attack(Player p) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 31
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 93
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 70</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.Attack(Player p) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 31
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 93
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 142</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Pack.Attack(Player p) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 31
   at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 18</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#31" TestingTimeMiliseconds="5515">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#145" TestingTimeMiliseconds="1791">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 82</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 65</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.Pack.Move(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 41
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#32" TestingTimeMiliseconds="1826">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Capacity() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 108
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Capacity() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 108
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Capacity() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 108
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Capacity() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 108
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Capacity() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 108
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Node.Capacity() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 108
   at STVRogue.GameLogic.Pack.CanMoveTo(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 65
   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 73
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 0&gt;
  But was:  &lt;Node 1&gt;

at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 84
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#33" TestingTimeMiliseconds="1773">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no elements
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 50
</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 1&gt;
  But was:  &lt;Node 0&gt;

at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 67
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#34" TestingTimeMiliseconds="1815">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no elements
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 1&gt;
  But was:  &lt;Node 0&gt;

at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 67
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#191" TestingTimeMiliseconds="1807">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no elements
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40
</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 1&gt;
  But was:  &lt;Node 0&gt;

at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 67
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>  Expected: less than 8
  But was:  8

at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 98
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#197" TestingTimeMiliseconds="1787">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>  Expected: less than 15
  But was:  15

at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 98
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#192" TestingTimeMiliseconds="1791">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 50
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 0&gt;
  But was:  &lt;Node 1&gt;

at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 84
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#194" TestingTimeMiliseconds="1795">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no elements
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 45
</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 1&gt;
  But was:  &lt;Node 0&gt;

at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 67
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#193" TestingTimeMiliseconds="1716">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 0&gt;
  But was:  &lt;Node 1&gt;

at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 84
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>  Expected: less than 14
  But was:  14

at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 98
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#130" TestingTimeMiliseconds="1816">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no elements
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40
</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 1&gt;
  But was:  &lt;Node 0&gt;

at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 67
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>  Expected: less than 29
  But was:  29

at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 98
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#131" TestingTimeMiliseconds="1792">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no elements
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 40
</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 1&gt;
  But was:  &lt;Node 0&gt;

at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 67
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#151" TestingTimeMiliseconds="1810">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#152" TestingTimeMiliseconds="1814">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#149" TestingTimeMiliseconds="1773">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 140
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#150" TestingTimeMiliseconds="1798">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#158" TestingTimeMiliseconds="1823">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#159" TestingTimeMiliseconds="1781">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#160" TestingTimeMiliseconds="1776">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 140
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#166" TestingTimeMiliseconds="1790">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 140
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#165" TestingTimeMiliseconds="1803">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#161" TestingTimeMiliseconds="1807">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 140
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#164" TestingTimeMiliseconds="1792">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#169" TestingTimeMiliseconds="1790">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#171" TestingTimeMiliseconds="1816">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#167" TestingTimeMiliseconds="1817">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#35" TestingTimeMiliseconds="1833">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#36" TestingTimeMiliseconds="1786">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#200" TestingTimeMiliseconds="1801">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 140
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#199" TestingTimeMiliseconds="1835">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#45" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#133" TestingTimeMiliseconds="1809">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#136" TestingTimeMiliseconds="1783">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#137" TestingTimeMiliseconds="1820">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 140
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#141" TestingTimeMiliseconds="1780">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#142" TestingTimeMiliseconds="1811">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 140
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#99" TestingTimeMiliseconds="1797">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#206" TestingTimeMiliseconds="1793">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 144</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#143" TestingTimeMiliseconds="1849">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 144</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#144" TestingTimeMiliseconds="1832">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 144</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.ArgumentNullException : Value cannot be null.
Parameter name: selector
   at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)
   at STVRogue.GameLogic.Pack.get_CurrentHP() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 88
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#33" TestingTimeMiliseconds="1783">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#185" TestingTimeMiliseconds="1790">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#184" TestingTimeMiliseconds="1836">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  0

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 72
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: &lt;Node 1&gt;
  But was:  &lt;Node 0&gt;

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 184
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 146
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#186" TestingTimeMiliseconds="1785">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#190" TestingTimeMiliseconds="1808">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  0

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 72
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: &lt;Node 1&gt;
  But was:  &lt;Node 0&gt;

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 184
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 146
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#127" TestingTimeMiliseconds="1793">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#44" TestingTimeMiliseconds="1780">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 119
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 1&gt;
  But was:  &lt;Node 0&gt;

at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 67
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>  Expected: less than 10
  But was:  10

at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 98
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#98" TestingTimeMiliseconds="1812">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>  Expected: 1
  But was:  2

at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 221
</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 119
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 1&gt;
  But was:  &lt;Node 0&gt;

at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 67
</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>  Expected: less than 31
  But was:  31

at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 98
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#32" TestingTimeMiliseconds="1798">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Pack.MoveTowards(STVRogue.GameLogic.Node)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Pack.MoveTowards(Node u) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 56
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 94</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#40" TestingTimeMiliseconds="1741">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 183
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 118
</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#93" TestingTimeMiliseconds="1776">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.DivideByZeroException : Attempted to divide by zero.
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 77
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#37" TestingTimeMiliseconds="1821">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Nullable object must have a value.
   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)
   at System.Nullable`1.get_Value()
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 106
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Nullable object must have a value.
   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)
   at System.Nullable`1.get_Value()
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 106
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Nullable object must have a value.
   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)
   at System.Nullable`1.get_Value()
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 106
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Nullable object must have a value.
   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)
   at System.Nullable`1.get_Value()
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 106
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 138</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#38" TestingTimeMiliseconds="1776">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.InvalidOperationException : Sequence contains no elements
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 109
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#39" TestingTimeMiliseconds="1757">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#106" TestingTimeMiliseconds="1804">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>  Expected: less than 0
  But was:  0

at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 23
</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#107" TestingTimeMiliseconds="1777">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#108" TestingTimeMiliseconds="1787">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#109" TestingTimeMiliseconds="1841">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.CrystalTest.CrystalUseTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 34</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerUseItemInBag" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PlayerTest.PlayerUseItemInBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 23</Message>
          </TestMethod>
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.NullReferenceException: Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Player.Use(Item item) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 22
   at STVRogue.GameLogic.PlayerTest.&lt;&gt;c__DisplayClass1.&lt;PlayerUseItemOnEmptyBag&gt;b__0() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PlayerTest.PlayerUseItemOnEmptyBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#110" TestingTimeMiliseconds="1791">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#111" TestingTimeMiliseconds="1763">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#112" TestingTimeMiliseconds="1793">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Failed">
            <Message>  Expected: 100
  But was:  0

at STVRogue.GameLogic.NodeTest.NodeFightNoPackPresentTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 161
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>  Expected: less than 0
  But was:  0

at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 23
</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#25" TestingTimeMiliseconds="1809">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>  Expected: less than 0
  But was:  0

at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 23
</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#25" TestingTimeMiliseconds="1806">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>  Expected: less than 0
  But was:  0

at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 23
</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#26" TestingTimeMiliseconds="1767">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#26" TestingTimeMiliseconds="1802">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#27" TestingTimeMiliseconds="1700">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#27" TestingTimeMiliseconds="1786">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#28" TestingTimeMiliseconds="1799">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.CrystalTest.CrystalUseTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 34</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerUseItemInBag" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PlayerTest.PlayerUseItemInBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 23</Message>
          </TestMethod>
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.NullReferenceException: Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Player.Use(Item item) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 22
   at STVRogue.GameLogic.PlayerTest.&lt;&gt;c__DisplayClass1.&lt;PlayerUseItemOnEmptyBag&gt;b__0() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PlayerTest.PlayerUseItemOnEmptyBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#28" TestingTimeMiliseconds="1792">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.CrystalTest.CrystalUseTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 34</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerUseItemInBag" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PlayerTest.PlayerUseItemInBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 23</Message>
          </TestMethod>
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.NullReferenceException: Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Player.Use(Item item) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 22
   at STVRogue.GameLogic.PlayerTest.&lt;&gt;c__DisplayClass1.&lt;PlayerUseItemOnEmptyBag&gt;b__0() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PlayerTest.PlayerUseItemOnEmptyBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#29" TestingTimeMiliseconds="1776">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#29" TestingTimeMiliseconds="1769">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#30" TestingTimeMiliseconds="1777">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#30" TestingTimeMiliseconds="1775">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JID#31" TestingTimeMiliseconds="1793">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Failed">
            <Message>  Expected: 100
  But was:  0

at STVRogue.GameLogic.NodeTest.NodeFightNoPackPresentTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 161
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>  Expected: less than 0
  But was:  0

at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 23
</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="JTD#31" TestingTimeMiliseconds="1818">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Failed">
            <Message>  Expected: 100
  But was:  0

at STVRogue.GameLogic.NodeTest.NodeFightNoPackPresentTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 161
</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>  Expected: less than 0
  But was:  0

at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 23
</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#48" TestingTimeMiliseconds="1792">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>  Expected: less than 0
  But was:  0

at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 23
</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#49" TestingTimeMiliseconds="1808">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#50" TestingTimeMiliseconds="1798">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#51" TestingTimeMiliseconds="1787">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.CrystalTest.CrystalUseTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 34</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerUseItemInBag" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.GameLogic.PlayerTest.PlayerUseItemInBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 23</Message>
          </TestMethod>
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.NullReferenceException: Object reference not set to an instance of an object.
   at STVRogue.GameLogic.Player.Use(Item item) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 22
   at STVRogue.GameLogic.PlayerTest.&lt;&gt;c__DisplayClass1.&lt;PlayerUseItemOnEmptyBag&gt;b__0() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PlayerTest.PlayerUseItemOnEmptyBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#52" TestingTimeMiliseconds="1771">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#53" TestingTimeMiliseconds="1788">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#114" TestingTimeMiliseconds="5510">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#115" TestingTimeMiliseconds="5502">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#116" TestingTimeMiliseconds="5879">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#117" TestingTimeMiliseconds="1814">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 19</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 70</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 142</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.InvalidProgramException: Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.PlayerTest.&lt;&gt;c__DisplayClassa.&lt;PlayerAttackOnInvalidTargetTest&gt;b__9() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 37
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PlayerTest.PlayerAttackOnInvalidTargetTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 37
</Message>
          </TestMethod>
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#183" TestingTimeMiliseconds="1780">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 19</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 70</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 142</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.InvalidProgramException: Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.PlayerTest.&lt;&gt;c__DisplayClassa.&lt;PlayerAttackOnInvalidTargetTest&gt;b__9() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 37
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PlayerTest.PlayerAttackOnInvalidTargetTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 37
</Message>
          </TestMethod>
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#180" TestingTimeMiliseconds="5515">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#209" TestingTimeMiliseconds="5500">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#208" TestingTimeMiliseconds="5511">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#210" TestingTimeMiliseconds="5502">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="EAM#40" TestingTimeMiliseconds="5519">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ISD#5" TestingTimeMiliseconds="5520">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="EAM#41" TestingTimeMiliseconds="5509">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ISD#6" TestingTimeMiliseconds="5514">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="PRV#54" TestingTimeMiliseconds="5506">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="PRV#55" TestingTimeMiliseconds="1838">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 19</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 70</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 72
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 142</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.InvalidProgramException: Common Language Runtime detected an invalid program.
   at STVRogue.GameLogic.Player.Attack(Creature foe)
   at STVRogue.GameLogic.PlayerTest.&lt;&gt;c__DisplayClassa.&lt;PlayerAttackOnInvalidTargetTest&gt;b__9() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 37
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PlayerTest.PlayerAttackOnInvalidTargetTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 37
</Message>
          </TestMethod>
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#42" TestingTimeMiliseconds="1802">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.ChooseTarget(System.Collections.Generic.List`1&lt;STVRogue.GameLogic.Pack&gt;)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.ChooseTarget(System.Collections.Generic.List`1&lt;STVRogue.GameLogic.Pack&gt;)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.ChooseTarget(System.Collections.Generic.List`1&lt;STVRogue.GameLogic.Pack&gt;)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.ChooseTarget(System.Collections.Generic.List`1&lt;STVRogue.GameLogic.Pack&gt;)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 70</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.ChooseTarget(System.Collections.Generic.List`1&lt;STVRogue.GameLogic.Pack&gt;)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.ChooseTarget(System.Collections.Generic.List`1&lt;STVRogue.GameLogic.Pack&gt;)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 142</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerChooseTarget" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.ChooseTarget(System.Collections.Generic.List`1&lt;STVRogue.GameLogic.Pack&gt;)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.PlayerTest.PlayerChooseTarget() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#43" TestingTimeMiliseconds="1797">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.ChooseTarget(System.Collections.Generic.List`1&lt;STVRogue.GameLogic.Pack&gt;)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.ChooseTarget(System.Collections.Generic.List`1&lt;STVRogue.GameLogic.Pack&gt;)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 258</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.ChooseTarget(System.Collections.Generic.List`1&lt;STVRogue.GameLogic.Pack&gt;)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.ChooseTarget(System.Collections.Generic.List`1&lt;STVRogue.GameLogic.Pack&gt;)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 70</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.ChooseTarget(System.Collections.Generic.List`1&lt;STVRogue.GameLogic.Pack&gt;)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.ChooseTarget(System.Collections.Generic.List`1&lt;STVRogue.GameLogic.Pack&gt;)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 71
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 142</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerChooseTarget" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.ChooseTarget(System.Collections.Generic.List`1&lt;STVRogue.GameLogic.Pack&gt;)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.ChooseTarget(List`1 options) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 57
   at STVRogue.GameLogic.PlayerTest.PlayerChooseTarget() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 104</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#118" TestingTimeMiliseconds="1781">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>  Expected: same as &lt;Node 1&gt;
  But was:  &lt;Node 0&gt;

at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 63
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#119" TestingTimeMiliseconds="1781">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 62
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#120" TestingTimeMiliseconds="5516">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#189" TestingTimeMiliseconds="5518">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#187" TestingTimeMiliseconds="5807">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#188" TestingTimeMiliseconds="5785">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#216" TestingTimeMiliseconds="1731">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 62
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#44" TestingTimeMiliseconds="1799">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.Flees()' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 70
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 61</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.GameLogic.Player.Flees()' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.GameLogic.Player.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 70
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 76</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#45" TestingTimeMiliseconds="1802">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Player.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 70
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 76</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#56" TestingTimeMiliseconds="1782">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 62
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#57" TestingTimeMiliseconds="1780">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 62
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#152" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#154" TestingTimeMiliseconds="1806">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 62
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#153" TestingTimeMiliseconds="1788">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 62
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#155" TestingTimeMiliseconds="5501">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#156" TestingTimeMiliseconds="5514">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#157" TestingTimeMiliseconds="1792">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.GameLogic.Player.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Player.cs:line 70
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 76</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#158" TestingTimeMiliseconds="1801">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 62
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ISD#4" TestingTimeMiliseconds="1795">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerUseItemInBag" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.PlayerTest.PlayerUseItemInBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 25
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#1" TestingTimeMiliseconds="1814">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.Utils.Extensions.Random(System.Collections.Generic.List`1&lt;!!0&gt;)' to access method 'System.Collections.Generic.List`1&lt;T&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.Utils.Extensions.Random[T](List`1 list) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 11
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 80
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 219</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.Utils.Extensions.Random(System.Collections.Generic.List`1&lt;!!0&gt;)' to access method 'System.Collections.Generic.List`1&lt;T&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.Utils.Extensions.Random[T](List`1 list) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 11
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 80
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.Utils.Extensions.Random(System.Collections.Generic.List`1&lt;!!0&gt;)' to access method 'System.Collections.Generic.List`1&lt;T&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.Utils.Extensions.Random[T](List`1 list) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 11
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 80
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#2" TestingTimeMiliseconds="1793">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.Utils.Extensions.Random[T](List`1 list) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 11
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 80
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.Node.Fight(Player player, Func`2 choosepack) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Node.cs:line 82
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 181</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at STVRogue.Utils.Extensions.Random[T](List`1 list) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 11
   at STVRogue.GameLogic.Pack.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 80
   at STVRogue.GameLogic.PackMock.Flees() in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 112
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 116</Message>
          </TestMethod>
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#7" TestingTimeMiliseconds="1782">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.CountNumberOfBridges(Node startNode, Node exitNode) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 80
   at STVRogue.Utils.Predicates.IsValidDungeon(Node startNode, Node exitNode, Int32 level) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 93
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#12" TestingTimeMiliseconds="1790">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.CountNumberOfBridges(Node startNode, Node exitNode) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 80
   at STVRogue.Utils.Predicates.IsValidDungeon(Node startNode, Node exitNode, Int32 level) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 93
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#12" TestingTimeMiliseconds="1782">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.CountNumberOfBridges(Node startNode, Node exitNode)
   at STVRogue.Utils.Predicates.IsValidDungeon(Node startNode, Node exitNode, Int32 level) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 93
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#8" TestingTimeMiliseconds="5507">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#16" TestingTimeMiliseconds="1797">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.CountNumberOfBridges(Node startNode, Node exitNode) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 80
   at STVRogue.Utils.Predicates.IsValidDungeon(Node startNode, Node exitNode, Int32 level) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 93
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#11" TestingTimeMiliseconds="1797">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.IsBridge(Node startNode, Node exitNode, Node nd) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 64
   at STVRogue.GameLogic.DungeonTest.&lt;&gt;c__DisplayClass3.&lt;DungeonGenerateZoneTest&gt;b__1(Node n) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#24" TestingTimeMiliseconds="1794">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.IsBridge(Node startNode, Node exitNode, Node nd) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 64
   at STVRogue.GameLogic.DungeonTest.&lt;&gt;c__DisplayClass3.&lt;DungeonGenerateZoneTest&gt;b__1(Node n) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#23" TestingTimeMiliseconds="1775">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.IsBridge(Node startNode, Node exitNode, Node nd) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 64
   at STVRogue.GameLogic.DungeonTest.&lt;&gt;c__DisplayClass3.&lt;DungeonGenerateZoneTest&gt;b__1(Node n) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#27" TestingTimeMiliseconds="1771">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.IsBridge(Node startNode, Node exitNode, Node nd) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 64
   at STVRogue.GameLogic.DungeonTest.&lt;&gt;c__DisplayClass3.&lt;DungeonGenerateZoneTest&gt;b__1(Node n) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#25" TestingTimeMiliseconds="1794">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  5

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#26" TestingTimeMiliseconds="1814">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.IsBridge(Node startNode, Node exitNode, Node nd) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 64
   at STVRogue.GameLogic.DungeonTest.&lt;&gt;c__DisplayClass3.&lt;DungeonGenerateZoneTest&gt;b__1(Node n) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#6" TestingTimeMiliseconds="1756">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.IsBridge(Node startNode, Node exitNode, Node nd) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 64
   at STVRogue.GameLogic.DungeonTest.&lt;&gt;c__DisplayClass3.&lt;DungeonGenerateZoneTest&gt;b__1(Node n) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#10" TestingTimeMiliseconds="1798">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.IsBridge(Node startNode, Node exitNode, Node nd) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 64
   at STVRogue.GameLogic.DungeonTest.&lt;&gt;c__DisplayClass3.&lt;DungeonGenerateZoneTest&gt;b__1(Node n) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#7" TestingTimeMiliseconds="1797">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.IsBridge(Node startNode, Node exitNode, Node nd) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 64
   at STVRogue.GameLogic.DungeonTest.&lt;&gt;c__DisplayClass3.&lt;DungeonGenerateZoneTest&gt;b__1(Node n) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#12" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  6

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#11" TestingTimeMiliseconds="1806">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#14" TestingTimeMiliseconds="1801">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: 0
  But was:  1

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 20
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#8" TestingTimeMiliseconds="1719">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.IsBridge(Node startNode, Node exitNode, Node nd) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 64
   at STVRogue.GameLogic.DungeonTest.&lt;&gt;c__DisplayClass3.&lt;DungeonGenerateZoneTest&gt;b__1(Node n) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#9" TestingTimeMiliseconds="1796">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.IsBridge(Node startNode, Node exitNode, Node nd) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 64
   at STVRogue.GameLogic.DungeonTest.&lt;&gt;c__DisplayClass3.&lt;DungeonGenerateZoneTest&gt;b__1(Node n) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#10" TestingTimeMiliseconds="1791">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.IsBridge(Node startNode, Node exitNode, Node nd) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 64
   at STVRogue.GameLogic.DungeonTest.&lt;&gt;c__DisplayClass3.&lt;DungeonGenerateZoneTest&gt;b__1(Node n) in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19
   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#6" TestingTimeMiliseconds="1794">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 30
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#4" TestingTimeMiliseconds="1797">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 30
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#1" TestingTimeMiliseconds="1775">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.Utils.Predicates.IsPath(List`1 path) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 22
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 30</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#7" TestingTimeMiliseconds="1782">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#3" TestingTimeMiliseconds="1766">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#2" TestingTimeMiliseconds="1777">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#1" TestingTimeMiliseconds="1761">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#1" TestingTimeMiliseconds="1805">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.IsPath(List`1 path) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 22
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 30</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#14" TestingTimeMiliseconds="1782">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#10" TestingTimeMiliseconds="1759">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#11" TestingTimeMiliseconds="1789">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.Utils.Predicates.IsPath(List`1 path) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 22
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 30</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#9" TestingTimeMiliseconds="1795">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#13" TestingTimeMiliseconds="1802">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#4" TestingTimeMiliseconds="1789">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 30
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#3" TestingTimeMiliseconds="1753">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 30
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#2" TestingTimeMiliseconds="1786">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 30
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#6" TestingTimeMiliseconds="1832">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.Utils.Predicates.IsPath(List`1 path) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 22
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 30</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#5" TestingTimeMiliseconds="1807">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.Utils.Predicates.IsPath(List`1 path) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 22
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 30</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#3" TestingTimeMiliseconds="1862">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 30
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="LOR#3" TestingTimeMiliseconds="5816">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="LOR#4" TestingTimeMiliseconds="5808">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="LOR#2" TestingTimeMiliseconds="5499">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="LOR#1" TestingTimeMiliseconds="5518">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="EAM#11" TestingTimeMiliseconds="5797">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="EAM#12" TestingTimeMiliseconds="5516">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#21" TestingTimeMiliseconds="5776">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="EAM#13" TestingTimeMiliseconds="5513">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#22" TestingTimeMiliseconds="5513">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#13" TestingTimeMiliseconds="1747">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.Predicates.IsValidDungeon(Node startNode, Node exitNode, Int32 level) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 97
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#25" TestingTimeMiliseconds="5508">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#24" TestingTimeMiliseconds="5509">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#14" TestingTimeMiliseconds="5506">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#15" TestingTimeMiliseconds="5511">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#28" TestingTimeMiliseconds="5532">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#18" TestingTimeMiliseconds="5515">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#19" TestingTimeMiliseconds="5503">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#17" TestingTimeMiliseconds="5514">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#16" TestingTimeMiliseconds="5511">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#15" TestingTimeMiliseconds="5511">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#20" TestingTimeMiliseconds="5504">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#22" TestingTimeMiliseconds="5514">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#19" TestingTimeMiliseconds="5508">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#23" TestingTimeMiliseconds="5502">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="AOR#24" TestingTimeMiliseconds="5510">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#33" TestingTimeMiliseconds="1769">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 21
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#34" TestingTimeMiliseconds="1787">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 21
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#28" TestingTimeMiliseconds="1764">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>  Expected: True
  But was:  False

at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 21
</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#39" TestingTimeMiliseconds="5512">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#40" TestingTimeMiliseconds="5507">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#36" TestingTimeMiliseconds="5503">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#35" TestingTimeMiliseconds="5505">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#37" TestingTimeMiliseconds="5812">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#48" TestingTimeMiliseconds="5781">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#47" TestingTimeMiliseconds="5501">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#42" TestingTimeMiliseconds="5510">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#43" TestingTimeMiliseconds="5806">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="EAM#9" TestingTimeMiliseconds="5784">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="EAM#10" TestingTimeMiliseconds="5513">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="OODL#17" TestingTimeMiliseconds="5509">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="EAM#3" TestingTimeMiliseconds="1745">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.Utils.Predicates.ReachableNodes(STVRogue.GameLogic.Node)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.Utils.Predicates.ReachableNodes(Node x0) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 36
   at STVRogue.Utils.Predicates.IsReachable(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 54
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 25</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.Utils.Predicates.ReachableNodes(STVRogue.GameLogic.Node)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.Utils.Predicates.ReachableNodes(Node x0) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 36
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 17</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.Utils.Predicates.ReachableNodes(STVRogue.GameLogic.Node)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.Utils.Predicates.ReachableNodes(Node x0) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 36
   at STVRogue.Utils.Predicates.IsReachable(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 54
   at STVRogue.GameLogic.NodeTest.NodeConnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 18</Message>
          </TestMethod>
          <TestMethod Name="NodeDisconnectTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.Utils.Predicates.ReachableNodes(STVRogue.GameLogic.Node)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.Utils.Predicates.ReachableNodes(Node x0) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 36
   at STVRogue.Utils.Predicates.IsReachable(Node u, Node v) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 54
   at STVRogue.GameLogic.NodeTest.NodeDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 44</Message>
          </TestMethod>
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.Utils.Predicates.ReachableNodes(STVRogue.GameLogic.Node)' to access method 'System.Collections.Generic.List`1&lt;System.__Canon&gt;.System.Collections.IList.get_Item(Int32)' failed.
   at STVRogue.Utils.Predicates.ReachableNodes(Node x0) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Predicates.cs:line 36
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 277</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#17" TestingTimeMiliseconds="5505">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="EAM#4" TestingTimeMiliseconds="5500">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="SSDL#4" TestingTimeMiliseconds="5500">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="EAM#5" TestingTimeMiliseconds="5515">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="PRV#3" TestingTimeMiliseconds="1740">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 12
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max)
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.MonsterTest.MonsterTestMonster() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\MonsterTest.cs:line 11
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 202
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackMock..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 95
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 232
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 89
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 56
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 172
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 127
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max)
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 21
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 29
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 108
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 130
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 78
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 61
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerChooseTarget" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PlayerTest.PlayerChooseTarget() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 101
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="PlayerUseItemInBag" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.HealingPotion..ctor(String id) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\HealingPotion.cs:line 14
   at STVRogue.GameLogic.PlayerTest.PlayerUseItemInBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 22
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.TypeInitializationException: The type initializer for 'STVRogue.Utils.RNG' threw an exception. ---&gt; System.InvalidProgramException: Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG..cctor()
   --- End of inner exception stack trace ---
   at STVRogue.Utils.RNG.Next(Int32 max)
   at STVRogue.GameLogic.HealingPotion..ctor(String id) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\HealingPotion.cs:line 14
   at STVRogue.GameLogic.PlayerTest.&lt;&gt;c__DisplayClass1.&lt;PlayerUseItemOnEmptyBag&gt;b__0() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PlayerTest.PlayerUseItemOnEmptyBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.InitializeWithSeed(Int32 seed)
   at STVRogue.Utils.RNGTest.RngInitializeWithSeedTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 12
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max)
   at STVRogue.Utils.RNGTest.RngUniqueListImpossibleArgumentTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 33
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>System.TypeInitializationException : The type initializer for 'STVRogue.Utils.RNG' threw an exception.
  ----&gt; System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max)
   at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 19
--InvalidProgramException
   at STVRogue.Utils.RNG..cctor()</Message>
          </TestMethod>
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#1" TestingTimeMiliseconds="1658">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 12</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.MonsterTest.MonsterTestMonster() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\MonsterTest.cs:line 11</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 202</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackMock..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 95
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 232</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 89</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 56</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 172</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 127</Message>
          </TestMethod>
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 108</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 130</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 78</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 61</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerChooseTarget" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PlayerTest.PlayerChooseTarget() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 101</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerUseItemInBag" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.HealingPotion..ctor(String id) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\HealingPotion.cs:line 14
   at STVRogue.GameLogic.PlayerTest.PlayerUseItemInBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 22</Message>
          </TestMethod>
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.InvalidProgramException: Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.HealingPotion..ctor(String id) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\HealingPotion.cs:line 14
   at STVRogue.GameLogic.PlayerTest.&lt;&gt;c__DisplayClass1.&lt;PlayerUseItemOnEmptyBag&gt;b__0() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PlayerTest.PlayerUseItemOnEmptyBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.Utils.RNGTest.RngUniqueListImpossibleArgumentTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 33</Message>
          </TestMethod>
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>System.InvalidProgramException : Common Language Runtime detected an invalid program.
   at STVRogue.Utils.RNG.get_Rnd()
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 19</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#30" TestingTimeMiliseconds="1891">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 12</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.MonsterTest.MonsterTestMonster() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\MonsterTest.cs:line 11</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 202</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackMock..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 95
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 232</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 89</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 56</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 172</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 127</Message>
          </TestMethod>
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 108</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 130</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 78</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 61</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerChooseTarget" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PlayerTest.PlayerChooseTarget() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 101</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerUseItemInBag" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.HealingPotion..ctor(String id) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\HealingPotion.cs:line 14
   at STVRogue.GameLogic.PlayerTest.PlayerUseItemInBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 22</Message>
          </TestMethod>
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.NullReferenceException: Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.HealingPotion..ctor(String id) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\HealingPotion.cs:line 14
   at STVRogue.GameLogic.PlayerTest.&lt;&gt;c__DisplayClass1.&lt;PlayerUseItemOnEmptyBag&gt;b__0() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PlayerTest.PlayerUseItemOnEmptyBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#20" TestingTimeMiliseconds="1870">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 12</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 73</Message>
          </TestMethod>
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.DungeonTest.DungeonGenerateZoneTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 16</Message>
          </TestMethod>
          <TestMethod Name="DungeonShortestPathTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonShortestPathTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 27</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.MonsterTest.MonsterTestMonster() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\MonsterTest.cs:line 11</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightComplexMultiplePacksTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 202</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackMock..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 95
   at STVRogue.GameLogic.NodeTest.NodeFightFleeOftenTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 232</Message>
          </TestMethod>
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightFullyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 89</Message>
          </TestMethod>
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightKillingPlayerTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 56</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightPackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 172</Message>
          </TestMethod>
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.NodeTest.NodeFightPartiallyKillingPackTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 127</Message>
          </TestMethod>
          <TestMethod Name="NodeLevelTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 min, Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 57
   at STVRogue.GameLogic.NodeTest.NodeLevelTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\NodeTest.cs:line 265</Message>
          </TestMethod>
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 21</Message>
          </TestMethod>
          <TestMethod Name="PackCanMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackCanMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 29</Message>
          </TestMethod>
          <TestMethod Name="PackFleesTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.PackTest.PackFleesTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 108</Message>
          </TestMethod>
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.PackTest.PackFleesUnsuccessfullyTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 130</Message>
          </TestMethod>
          <TestMethod Name="PackMoveFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackMoveFailTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 78</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PackTest.PackMoveTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 61</Message>
          </TestMethod>
          <TestMethod Name="PackMoveTowardsTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.PackTest.PackMoveTowardsTest() in c:\CodeBlocks\STVRogue\NunitTests\PackTest.cs:line 90</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerChooseTarget" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.PlayerTest.PlayerChooseTarget() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 101</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesSuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 46</Message>
          </TestMethod>
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.PlayerTest.PlayerFleesUnsuccessfully() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 72</Message>
          </TestMethod>
          <TestMethod Name="PlayerUseItemInBag" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.HealingPotion..ctor(String id) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\HealingPotion.cs:line 14
   at STVRogue.GameLogic.PlayerTest.PlayerUseItemInBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 22</Message>
          </TestMethod>
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Failed">
            <Message>  Expected: &lt;System.ArgumentException&gt;
  But was:  &lt;System.NullReferenceException: Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.HealingPotion..ctor(String id) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Items\HealingPotion.cs:line 14
   at STVRogue.GameLogic.PlayerTest.&lt;&gt;c__DisplayClass1.&lt;PlayerUseItemOnEmptyBag&gt;b__0() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
   at NUnit.Framework.Assert.Throws(IResolveConstraint expression, TestDelegate code, String message, Object[] args)&gt;

at STVRogue.GameLogic.PlayerTest.PlayerUseItemOnEmptyBag() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\PlayerTest.cs:line 15
</Message>
          </TestMethod>
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#49" TestingTimeMiliseconds="2132">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="PRV#2" TestingTimeMiliseconds="1787">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#21" TestingTimeMiliseconds="1807">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#1" TestingTimeMiliseconds="1813">
      <Tests NumberOfFailedTests="1" NumberOfPassedTests="0" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Monster..ctor(Int32 id, String name) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Creatures\Monster.cs:line 14
   at STVRogue.GameLogic.Pack..ctor(Int32 id, Int32 n) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Pack.cs:line 22
   at STVRogue.GameLogic.CreatureTest.CreatureAttackTest() in c:\CodeBlocks\STVRogue\NunitTests\Creatures\CreatureTest.cs:line 12</Message>
          </TestMethod>
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.CrystalTest.CrystalUseOnBridgeTest() in c:\CodeBlocks\STVRogue\NunitTests\Items\CrystalTest.cs:line 13</Message>
          </TestMethod>
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.Next(Int32 max) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 52
   at STVRogue.GameLogic.Dungeon.GenerateZone(Node b, Node a) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 112
   at STVRogue.GameLogic.Dungeon..ctor(Int32 difficulty, Int32 nodeCapacityMultiplier) in c:\CodeBlocks\STVRogue\STVRogue\GameLogic\Dungeon\Dungeon.cs:line 200
   at STVRogue.GameLogic.DungeonTest.DungeonDisconnectFailTest() in c:\CodeBlocks\STVRogue\NunitTests\Dungeon\DungeonTest.cs:line 102</Message>
          </TestMethod>
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="MCI#2" TestingTimeMiliseconds="1766">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#63" TestingTimeMiliseconds="1804">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 26
</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#62" TestingTimeMiliseconds="1794">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.Utils.RNG.UniqueList(Int32 min, Int32 max, Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 74
   at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 22</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#61" TestingTimeMiliseconds="1789">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 26
</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#60" TestingTimeMiliseconds="1798">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>System.IndexOutOfRangeException : Index was outside the bounds of the array.
   at STVRogue.Utils.RNG.UniqueList(Int32 min, Int32 max, Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 74
   at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 22</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#65" TestingTimeMiliseconds="1784">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 26
</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="EAM#14" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>System.MethodAccessException : Attempt by method 'STVRogue.Utils.RNG.UniqueList(Int32, Int32, Int32)' to access method 'System.Collections.Generic.HashSet`1&lt;System.Int32&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly()' failed.
   at STVRogue.Utils.RNG.UniqueList(Int32 min, Int32 max, Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 67
   at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 22</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#32" TestingTimeMiliseconds="1803">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>System.ArgumentException : Value does not fall within the expected range.
   at STVRogue.Utils.RNG.UniqueList(Int32 min, Int32 max, Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 64
   at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 22</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#33" TestingTimeMiliseconds="1754">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>System.ArgumentException : Value does not fall within the expected range.
   at STVRogue.Utils.RNG.UniqueList(Int32 min, Int32 max, Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 64
   at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 22</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#35" TestingTimeMiliseconds="1760">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#36" TestingTimeMiliseconds="1786">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 26
</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="OODL#39" TestingTimeMiliseconds="1803">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 26
</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="SSDL#23" TestingTimeMiliseconds="1768">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>System.NullReferenceException : Object reference not set to an instance of an object.
   at STVRogue.Utils.RNG.UniqueList(Int32 min, Int32 max, Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 74
   at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 22</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#28" TestingTimeMiliseconds="1803">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>System.ArgumentException : Value does not fall within the expected range.
   at STVRogue.Utils.RNG.UniqueList(Int32 min, Int32 max, Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 64
   at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 22</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#25" TestingTimeMiliseconds="1782">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#27" TestingTimeMiliseconds="1778">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>System.ArgumentException : Value does not fall within the expected range.
   at STVRogue.Utils.RNG.UniqueList(Int32 min, Int32 max, Int32 count) in c:\CodeBlocks\STVRogue\STVRogue\Utils\Utils.cs:line 64
   at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 22</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#30" TestingTimeMiliseconds="1765">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#34" TestingTimeMiliseconds="1791">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 26
</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="AOR#32" TestingTimeMiliseconds="1791">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="1" NumberOfInconlusiveTests="0">
        <TestClass Name="BridgeTest" FullName="GameLogic.BridgeTest">
          <TestMethod Name="BridgeConnectionTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CreatureTest" FullName="GameLogic.CreatureTest">
          <TestMethod Name="CreatureAttackTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="CrystalTest" FullName="GameLogic.CrystalTest">
          <TestMethod Name="CrystalUseOnBridgeTest" Outcome="Passed" />
          <TestMethod Name="CrystalUseTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="DungeonTest" FullName="GameLogic.DungeonTest">
          <TestMethod Name="DungeonDisconnectFailTest" Outcome="Passed" />
          <TestMethod Name="DungeonDisconnectTest" Outcome="Passed" />
          <TestMethod Name="DungeonGenerateZoneTest" Outcome="Passed" />
          <TestMethod Name="DungeonShortestPathTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="MonsterTest" FullName="GameLogic.MonsterTest">
          <TestMethod Name="MonsterTestMonster" Outcome="Passed" />
        </TestClass>
        <TestClass Name="NodeTest" FullName="GameLogic.NodeTest">
          <TestMethod Name="NodeConnectFailTest" Outcome="Passed" />
          <TestMethod Name="NodeConnectTest" Outcome="Passed" />
          <TestMethod Name="NodeDisconnectTest" Outcome="Passed" />
          <TestMethod Name="NodeFightComplexMultiplePacksTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFleeOftenTest" Outcome="Passed" />
          <TestMethod Name="NodeFightFullyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeFightKillingPlayerTest" Outcome="Passed" />
          <TestMethod Name="NodeFightNoPackPresentTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPackFleesTest" Outcome="Passed" />
          <TestMethod Name="NodeFightPartiallyKillingPackTest" Outcome="Passed" />
          <TestMethod Name="NodeLevelTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PackTest" FullName="GameLogic.PackTest">
          <TestMethod Name="PackAttackTest" Outcome="Passed" />
          <TestMethod Name="PackCanMoveTest" Outcome="Passed" />
          <TestMethod Name="PackFleesTest" Outcome="Passed" />
          <TestMethod Name="PackFleesUnsuccessfullyTest" Outcome="Passed" />
          <TestMethod Name="PackMoveFailTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTest" Outcome="Passed" />
          <TestMethod Name="PackMoveTowardsTest" Outcome="Passed" />
        </TestClass>
        <TestClass Name="PlayerTest" FullName="GameLogic.PlayerTest">
          <TestMethod Name="PlayerAttackOnInvalidTargetTest" Outcome="Passed" />
          <TestMethod Name="PlayerChooseTarget" Outcome="Passed" />
          <TestMethod Name="PlayerFleesSuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerFleesUnsuccessfully" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemInBag" Outcome="Passed" />
          <TestMethod Name="PlayerUseItemOnEmptyBag" Outcome="Passed" />
        </TestClass>
        <TestClass Name="RNGTest" FullName="Utils.RNGTest">
          <TestMethod Name="RngUniqueListTest" Outcome="Failed">
            <Message>  Expected: False
  But was:  True

at STVRogue.Utils.RNGTest.RngUniqueListTest() in c:\CodeBlocks\STVRogue\NunitTests\Utils\RNGTest.cs:line 26
</Message>
          </TestMethod>
          <TestMethod Name="RngInitializeWithSeedTest" Outcome="Passed" />
          <TestMethod Name="RngUniqueListImpossibleArgumentTest" Outcome="Passed" />
        </TestClass>
      </Tests>
    </TestedMutant>
    <TestedMutant MutantId="ROR#53" TestingTimeMiliseconds="5516">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#55" TestingTimeMiliseconds="5504">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
    <TestedMutant MutantId="ROR#57" TestingTimeMiliseconds="5513">
      <Tests NumberOfFailedTests="0" NumberOfPassedTests="0" NumberOfInconlusiveTests="0" />
    </TestedMutant>
  </DetailedTestingResults>
</MutationTestingSession>